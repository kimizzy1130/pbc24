{
  "version": 3,
  "sources": ["../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/_assert.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/cryptoBrowser.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/utils.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/hmac.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/pbkdf2.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/_sha2.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/sha256.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/_u64.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/sha512.js", "../../@scure/base/lib/index.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@scure/bip39/index.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/bind.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/utils.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/buildURL.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/core/InterceptorManager.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/normalizeHeaderName.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/core/AxiosError.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/defaults/transitional.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/toFormData.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/core/settle.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/cookies.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/isAbsoluteURL.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/combineURLs.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/core/buildFullPath.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/parseHeaders.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/isURLSameOrigin.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/cancel/CanceledError.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/parseProtocol.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/adapters/xhr.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/null.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/defaults/index.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/core/transformData.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/cancel/isCancel.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/core/dispatchRequest.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/core/mergeConfig.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/env/data.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/validator.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/core/Axios.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/cancel/CancelToken.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/spread.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/helpers/isAxiosError.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/lib/axios.js", "../../@aptos-labs/wallet-adapter-core/node_modules/axios/index.js", "../../@aptos-labs/wallet-adapter-core/node_modules/eventemitter3/index.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/esm/cryptoBrowser.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/esm/utils.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/esm/_assert.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/esm/_u64.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/esm/sha3.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/client/types.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/version.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/types/index.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/client/core.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/utils/apiEndpoints.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/utils/const.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/client/get.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/client/post.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/accountAddress.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/bcs/consts.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/hex.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/common.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/bcs/serializer.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/authenticationKey.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/crypto/ed25519.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/bcs/deserializer.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/bcs/serializable/fixedBytes.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/bcs/serializable/entryFunctionBytes.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/bcs/serializable/movePrimitives.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/bcs/serializable/moveStructs.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/crypto/asymmetricCrypto.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/crypto/multiEd25519.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/crypto/secp256k1.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/crypto/anyPublicKey.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/crypto/multiKey.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/utils/hdKey.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/account.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/types/generated/queries.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/general.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/utils/memoize.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/account.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/account.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/aptosConfig.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/transactionBuilder/transactionBuilder.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/core/crypto/anySignature.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/utils/helpers.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/transaction.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/authenticator/account.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/authenticator/transaction.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/instances/chainId.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/instances/identifier.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/instances/moduleId.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/typeTag/index.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/instances/transactionPayload.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/instances/rawTransaction.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/instances/signedTransaction.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/typeTag/parser.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/transactionBuilder/helpers.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/transactions/transactionBuilder/remoteAbi.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/transactionSubmission.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/coin.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/coin.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/digitalAsset.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/digitalAsset.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/event.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/event.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/faucet.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/faucet.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/fungibleAsset.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/fungibleAsset.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/general.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/internal/staking.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/staking.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/transaction.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/transactionSubmission.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/ts-sdk/src/api/aptos.ts", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/esm/hmac.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/esm/_sha2.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@noble/hashes/esm/sha512.js", "../../@aptos-labs/wallet-adapter-core/node_modules/@aptos-labs/aptos-client/src/index.browser.ts", "../../@aptos-labs/wallet-adapter-core/dist/index.mjs", "../../@aptos-labs/wallet-adapter-react/dist/index.mjs"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n", "\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2Async = exports.pbkdf2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    _assert_js_1.default.hash(hash);\n    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    _assert_js_1.default.number(c);\n    _assert_js_1.default.number(dkLen);\n    _assert_js_1.default.number(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = (0, utils_js_1.toBytes)(_password);\n    const salt = (0, utils_js_1.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac_js_1.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2 = pbkdf2;\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, (i) => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2Async = pbkdf2Async;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n", "\"use strict\";\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.createBase58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64urlnopad = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            const rounded = Math.floor(digitBase / to);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nexports.utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexports.base64urlnopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = exports.base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst createBase58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);\nexports.createBase58check = createBase58check;\n// legacy export, bad name\nexports.base58check = exports.createBase58check;\nconst BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString; // as in python, but for bytes only\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mnemonicToSeedSync = exports.mnemonicToSeed = exports.validateMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.generateMnemonic = void 0;\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nconst _assert_1 = require(\"@noble/hashes/_assert\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst base_1 = require(\"@scure/base\");\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError(`Invalid mnemonic type: ${typeof str}`);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction assertEntropy(entropy) {\n    _assert_1.default.bytes(entropy, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction generateMnemonic(wordlist, strength = 128) {\n    _assert_1.default.number(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic((0, utils_1.randomBytes)(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([((0, sha256_1.sha256)(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2 ** 11 || typeof wordlist[0] !== 'string')\n        throw new Error('Worlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error(`Wordlist: non-string element: ${i}`);\n    });\n    return base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, true), base_1.utils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    assertEntropy(entropy);\n    return entropy;\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction entropyToMnemonic(entropy, wordlist) {\n    assertEntropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nconst salt = (passphrase) => nfkd(`mnemonic${passphrase}`);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeed(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2Async)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\n", "'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n", "'use strict';\n\nvar bind = require('./helpers/bind');\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n// eslint-disable-next-line func-names\nvar kindOf = (function(cache) {\n  // eslint-disable-next-line func-names\n  return function(thing) {\n    var str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n  };\n})(Object.create(null));\n\nfunction kindOfTest(type) {\n  type = type.toLowerCase();\n  return function isKindOf(thing) {\n    return kindOf(thing) === type;\n  };\n}\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return Array.isArray(val);\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nvar isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nvar isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nvar isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nvar isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nvar isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} thing The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(thing) {\n  var pattern = '[object FormData]';\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) ||\n    toString.call(thing) === pattern ||\n    (isFunction(thing.toString) && thing.toString() === pattern)\n  );\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nvar isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n */\n\nfunction inherits(constructor, superConstructor, props, descriptors) {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function} [filter]\n * @returns {Object}\n */\n\nfunction toFlatObject(sourceObj, destObj, filter) {\n  var props;\n  var i;\n  var prop;\n  var merged = {};\n\n  destObj = destObj || {};\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if (!merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = Object.getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/*\n * determines whether a string ends with the characters of a specified string\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n * @returns {boolean}\n */\nfunction endsWith(str, searchString, position) {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  var lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object\n * @param {*} [thing]\n * @returns {Array}\n */\nfunction toArray(thing) {\n  if (!thing) return null;\n  var i = thing.length;\n  if (isUndefined(i)) return null;\n  var arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n// eslint-disable-next-line func-names\nvar isTypedArray = (function(TypedArray) {\n  // eslint-disable-next-line func-names\n  return function(thing) {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM,\n  inherits: inherits,\n  toFlatObject: toFlatObject,\n  kindOf: kindOf,\n  kindOfTest: kindOfTest,\n  endsWith: endsWith,\n  toArray: toArray,\n  isTypedArray: isTypedArray,\n  isFileList: isFileList\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n", "'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n", "'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nvar prototype = AxiosError.prototype;\nvar descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED'\n// eslint-disable-next-line func-names\n].forEach(function(code) {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = function(error, code, config, request, response, customProps) {\n  var axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nmodule.exports = AxiosError;\n", "'use strict';\n\nmodule.exports = {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n", "'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Convert a data object to FormData\n * @param {Object} obj\n * @param {?Object} [formData]\n * @returns {Object}\n **/\n\nfunction toFormData(obj, formData) {\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new FormData();\n\n  var stack = [];\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  function build(data, parentKey) {\n    if (utils.isPlainObject(data) || utils.isArray(data)) {\n      if (stack.indexOf(data) !== -1) {\n        throw Error('Circular reference detected in ' + parentKey);\n      }\n\n      stack.push(data);\n\n      utils.forEach(data, function each(value, key) {\n        if (utils.isUndefined(value)) return;\n        var fullKey = parentKey ? parentKey + '.' + key : key;\n        var arr;\n\n        if (value && !parentKey && typeof value === 'object') {\n          if (utils.endsWith(key, '{}')) {\n            // eslint-disable-next-line no-param-reassign\n            value = JSON.stringify(value);\n          } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {\n            // eslint-disable-next-line func-names\n            arr.forEach(function(el) {\n              !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));\n            });\n            return;\n          }\n        }\n\n        build(value, fullKey);\n      });\n\n      stack.pop();\n    } else {\n      formData.append(parentKey, convertValue(data));\n    }\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nmodule.exports = toFormData;\n", "'use strict';\n\nvar AxiosError = require('./AxiosError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n", "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n};\n", "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n", "'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n", "'use strict';\n\nvar AxiosError = require('../core/AxiosError');\nvar utils = require('../utils');\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction CanceledError(message) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nmodule.exports = CanceledError;\n", "'use strict';\n\nmodule.exports = function parseProtocol(url) {\n  var match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n};\n", "'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar transitionalDefaults = require('../defaults/transitional');\nvar AxiosError = require('../core/AxiosError');\nvar CanceledError = require('../cancel/CanceledError');\nvar parseProtocol = require('../helpers/parseProtocol');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new CanceledError() : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    var protocol = parseProtocol(fullPath);\n\n    if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n", "// eslint-disable-next-line strict\nmodule.exports = null;\n", "'use strict';\n\nvar utils = require('../utils');\nvar normalizeHeaderName = require('../helpers/normalizeHeaderName');\nvar AxiosError = require('../core/AxiosError');\nvar transitionalDefaults = require('./transitional');\nvar toFormData = require('../helpers/toFormData');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('../adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('../adapters/http');\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n\n    var isObjectPayload = utils.isObject(data);\n    var contentType = headers && headers['Content-Type'];\n\n    var isFileList;\n\n    if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {\n      var _FormData = this.env && this.env.FormData;\n      return toFormData(isFileList ? {'files[]': data} : data, _FormData && new _FormData());\n    } else if (isObjectPayload || contentType === 'application/json') {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: require('./env/FormData')\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n", "'use strict';\n\nvar utils = require('./../utils');\nvar defaults = require('../defaults');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n", "'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n", "'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar CanceledError = require('../cancel/CanceledError');\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n", "'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'beforeRedirect': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n", "module.exports = {\n  \"version\": \"0.27.2\"\n};", "'use strict';\n\nvar VERSION = require('../env/data').version;\nvar AxiosError = require('../core/AxiosError');\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n", "'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar buildFullPath = require('./buildFullPath');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(configOrUrl, config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof configOrUrl === 'string') {\n    config = config || {};\n    config.url = configOrUrl;\n  } else {\n    config = configOrUrl || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  var fullPath = buildFullPath(config.baseURL, config.url);\n  return buildURL(fullPath, config.params, config.paramsSerializer);\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method: method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url: url,\n        data: data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nmodule.exports = Axios;\n", "'use strict';\n\nvar CanceledError = require('./CanceledError');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new CanceledError(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n", "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n};\n", "'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = require('./cancel/CanceledError');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\naxios.VERSION = require('./env/data').version;\naxios.toFormData = require('./helpers/toFormData');\n\n// Expose AxiosError class\naxios.AxiosError = require('../lib/core/AxiosError');\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n", "module.exports = require('./lib/axios');", "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n", "export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n", "const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosRequest } from \"../types\";\n\n/**\n * The API response type\n *\n * @param status - the response status. i.e. 200\n * @param statusText - the response message\n * @param data the response data\n * @param url the url the request was made to\n * @param headers the response headers\n * @param config (optional) - the request object\n * @param request (optional) - the request object\n */\nexport interface AptosResponse<Req, Res> {\n  status: number;\n  statusText: string;\n  data: Res;\n  url: string;\n  headers: any;\n  config?: any;\n  request?: Req;\n}\n\n/**\n * The type returned from an API error\n *\n * @param name - the error name \"AptosApiError\"\n * @param url the url the request was made to\n * @param status - the response status. i.e. 400\n * @param statusText - the response message\n * @param data the response data\n * @param request - the AptosRequest\n */\nexport class AptosApiError extends Error {\n  readonly url: string;\n\n  readonly status: number;\n\n  readonly statusText: string;\n\n  readonly data: any;\n\n  readonly request: AptosRequest;\n\n  constructor(request: AptosRequest, response: AptosResponse<any, any>, message: string) {\n    super(message);\n\n    this.name = \"AptosApiError\";\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.data = response.data;\n    this.request = request;\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * The current version of the SDK\n *\n * hardcoded for now, we would want to have it injected dynamically\n */\nexport const VERSION = \"2.0.0\";\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Network } from \"../utils/apiEndpoints\";\n\nexport * from \"./indexer\";\n\nexport enum MimeType {\n  /**\n   * JSON representation, used for transaction submission and accept type JSON output\n   */\n  JSON = \"application/json\",\n  /**\n   * BCS representation, used for accept type BCS output\n   */\n  BCS = \"application/x-bcs\",\n  /**\n   * BCS representation, used for transaction submission in BCS input\n   */\n  BCS_SIGNED_TRANSACTION = \"application/x.aptos.signed_transaction+bcs\",\n}\n\n/**\n * Hex data as input to a function\n */\nexport type HexInput = string | Uint8Array;\n\n/**\n * TypeTag enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/third_party/move/move-core/types/src/language_storage.rs#L27}\n */\nexport enum TypeTagVariants {\n  Bool = 0,\n  U8 = 1,\n  U64 = 2,\n  U128 = 3,\n  Address = 4,\n  Signer = 5,\n  Vector = 6,\n  Struct = 7,\n  U16 = 8,\n  U32 = 9,\n  U256 = 10,\n  Reference = 254, // This is specifically a placeholder and does not represent a real type\n  Generic = 255, // This is specifically a placeholder and does not represent a real type\n}\n\n/**\n * Script transaction arguments enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/third_party/move/move-core/types/src/transaction_argument.rs#L11}\n */\nexport enum ScriptTransactionArgumentVariants {\n  U8 = 0,\n  U64 = 1,\n  U128 = 2,\n  Address = 3,\n  U8Vector = 4,\n  Bool = 5,\n  U16 = 6,\n  U32 = 7,\n  U256 = 8,\n}\n\n/**\n * Transaction payload enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/mod.rs#L478}\n */\nexport enum TransactionPayloadVariants {\n  Script = 0,\n  EntryFunction = 2,\n  Multisig = 3,\n}\n\n/**\n * Transaction variants enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/mod.rs#L440}\n */\nexport enum TransactionVariants {\n  MultiAgentTransaction = 0,\n  FeePayerTransaction = 1,\n}\n\n/**\n * Transaction Authenticator enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs#L44}\n */\nexport enum TransactionAuthenticatorVariant {\n  Ed25519 = 0,\n  MultiEd25519 = 1,\n  MultiAgent = 2,\n  FeePayer = 3,\n  SingleSender = 4,\n}\n\n/**\n * Transaction Authenticator enum as they are represented in Rust\n * {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs#L414}\n */\nexport enum AccountAuthenticatorVariant {\n  Ed25519 = 0,\n  MultiEd25519 = 1,\n  SingleKey = 2,\n  MultiKey = 3,\n}\n\nexport enum AnyPublicKeyVariant {\n  Ed25519 = 0,\n  Secp256k1 = 1,\n}\n\nexport enum AnySignatureVariant {\n  Ed25519 = 0,\n  Secp256k1 = 1,\n}\n\n/**\n * BCS types\n */\nexport type Uint8 = number;\nexport type Uint16 = number;\nexport type Uint32 = number;\nexport type Uint64 = bigint;\nexport type Uint128 = bigint;\nexport type Uint256 = bigint;\nexport type AnyNumber = number | bigint;\n\n/**\n * Set of configuration options that can be provided when initializing the SDK.\n * The purpose of these options is to configure various aspects of the SDK's\n * behavior and interaction with the Aptos network\n */\nexport type AptosSettings = {\n  readonly network?: Network;\n\n  readonly fullnode?: string;\n\n  readonly faucet?: string;\n\n  readonly indexer?: string;\n\n  readonly clientConfig?: ClientConfig;\n\n  readonly client?: Client;\n};\n\n/**\n *\n * Controls the number of results that are returned and the starting position of those results.\n * @param offset parameter specifies the starting position of the query result within the set of data. Default is 0.\n * @param limit specifies the maximum number of items or records to return in a query result. Default is 25.\n */\nexport interface PaginationArgs {\n  offset?: AnyNumber;\n  limit?: number;\n}\n\n/**\n * QUERY TYPES\n */\n\n/**\n * A configuration object we can pass with the request to the server.\n *\n * @param TOKEN - an auth token to send with the request\n * @param HEADERS - extra headers we want to send with the request\n * @param WITH_CREDENTIALS - whether to carry cookies. By default, it is set to true and cookies will be sent\n */\nexport type ClientConfig = {\n  TOKEN?: string;\n  HEADERS?: Record<string, string | number | boolean>;\n  WITH_CREDENTIALS?: boolean;\n};\n\nexport interface ClientRequest<Req> {\n  url: string;\n  method: \"GET\" | \"POST\";\n  body?: Req;\n  contentType?: string;\n  params?: any;\n  overrides?: ClientConfig;\n  headers?: Record<string, any>;\n}\n\nexport interface ClientResponse<Res> {\n  status: number;\n  statusText: string;\n  data: Res;\n  config?: any;\n  request?: any;\n  response?: any;\n  headers?: any;\n}\n\nexport interface Client {\n  provider<Req, Res>(requestOptions: ClientRequest<Req>): Promise<ClientResponse<Res>>;\n}\n\n/**\n * The API request type\n *\n * @param url - the url to make the request to, i.e https://fullnode.aptoslabs.devnet.com/v1\n * @param method - the request method \"GET\" | \"POST\"\n * @param endpoint (optional) - the endpoint to make the request to, i.e transactions\n * @param body (optional) - the body of the request\n * @param contentType (optional) - the content type to set the `content-type` header to,\n * by default is set to `application/json`\n * @param params (optional) - query params to add to the request\n * @param originMethod (optional) - the local method the request came from\n * @param overrides (optional) - a `ClientConfig` object type to override request data\n */\nexport type AptosRequest = {\n  url: string;\n  method: \"GET\" | \"POST\";\n  path?: string;\n  body?: any;\n  contentType?: string;\n  acceptType?: string;\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  originMethod?: string;\n  overrides?: ClientConfig;\n};\n\n/**\n * Specifies ledger version of transactions. By default latest version will be used\n */\nexport type LedgerVersion = {\n  ledgerVersion?: AnyNumber;\n};\n\n/**\n * RESPONSE TYPES\n */\n\n/**\n * Type holding the outputs of the estimate gas API\n */\nexport type GasEstimation = {\n  /**\n   * The deprioritized estimate for the gas unit price\n   */\n  deprioritized_gas_estimate?: number;\n  /**\n   * The current estimate for the gas unit price\n   */\n  gas_estimate: number;\n  /**\n   * The prioritized estimate for the gas unit price\n   */\n  prioritized_gas_estimate?: number;\n};\n\nexport type MoveResource = {\n  type: MoveStructType;\n  data: {};\n};\n\nexport type AccountData = {\n  sequence_number: string;\n  authentication_key: string;\n};\n\nexport type MoveModuleBytecode = {\n  bytecode: string;\n  abi?: MoveModule;\n};\n\n/**\n * TRANSACTION TYPES\n */\n\nexport enum TransactionResponseType {\n  Pending = \"pending_transaction\",\n  User = \"user_transaction\",\n  Genesis = \"genesis_transaction\",\n  BlockMetadata = \"block_metadata_transaction\",\n  StateCheckpoint = \"state_checkpoint_transaction\",\n}\n\nexport type TransactionResponse =\n  | PendingTransactionResponse\n  | UserTransactionResponse\n  | GenesisTransactionResponse\n  | BlockMetadataTransactionResponse\n  | StateCheckpointTransactionResponse;\n\nexport type PendingTransactionResponse = {\n  type: TransactionResponseType.Pending;\n  hash: string;\n  sender: string;\n  sequence_number: string;\n  max_gas_amount: string;\n  gas_unit_price: string;\n  expiration_timestamp_secs: string;\n  payload: TransactionPayloadResponse;\n  signature?: TransactionSignature;\n};\n\nexport type UserTransactionResponse = {\n  type: TransactionResponseType.User;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash?: string;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  sender: string;\n  sequence_number: string;\n  max_gas_amount: string;\n  gas_unit_price: string;\n  expiration_timestamp_secs: string;\n  payload: TransactionPayloadResponse;\n  signature?: TransactionSignature;\n  /**\n   * Events generated by the transaction\n   */\n  events: Array<Event>;\n  timestamp: string;\n};\n\nexport type GenesisTransactionResponse = {\n  type: TransactionResponseType.Genesis;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash?: string;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  payload: GenesisPayload;\n  /**\n   * Events emitted during genesis\n   */\n  events: Array<Event>;\n};\n\nexport type BlockMetadataTransactionResponse = {\n  type: TransactionResponseType.BlockMetadata;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash?: string;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  id: string;\n  epoch: string;\n  round: string;\n  /**\n   * The events emitted at the block creation\n   */\n  events: Array<Event>;\n  /**\n   * Previous block votes\n   */\n  previous_block_votes_bitvec: Array<number>;\n  proposer: string;\n  /**\n   * The indices of the proposers who failed to propose\n   */\n  failed_proposer_indices: Array<number>;\n  timestamp: string;\n};\n\nexport type StateCheckpointTransactionResponse = {\n  type: TransactionResponseType.StateCheckpoint;\n  version: string;\n  hash: string;\n  state_change_hash: string;\n  event_root_hash: string;\n  state_checkpoint_hash?: string;\n  gas_used: string;\n  /**\n   * Whether the transaction was successful\n   */\n  success: boolean;\n  /**\n   * The VM status of the transaction, can tell useful information in a failure\n   */\n  vm_status: string;\n  accumulator_root_hash: string;\n  /**\n   * Final state of resources changed by the transaction\n   */\n  changes: Array<WriteSetChange>;\n  timestamp: string;\n};\n\n/**\n * WRITESET CHANGE TYPES\n */\n\nexport type WriteSetChange =\n  | WriteSetChangeDeleteModule\n  | WriteSetChangeDeleteResource\n  | WriteSetChangeDeleteTableItem\n  | WriteSetChangeWriteModule\n  | WriteSetChangeWriteResource\n  | WriteSetChangeWriteTableItem;\n\nexport type WriteSetChangeDeleteModule = {\n  type: string;\n  address: string;\n  /**\n   * State key hash\n   */\n  state_key_hash: string;\n  module: MoveModuleId;\n};\n\nexport type WriteSetChangeDeleteResource = {\n  type: string;\n  address: string;\n  state_key_hash: string;\n  resource: string;\n};\n\nexport type WriteSetChangeDeleteTableItem = {\n  type: string;\n  state_key_hash: string;\n  handle: string;\n  key: string;\n  data?: DeletedTableData;\n};\n\nexport type WriteSetChangeWriteModule = {\n  type: string;\n  address: string;\n  state_key_hash: string;\n  data: MoveModuleBytecode;\n};\n\nexport type WriteSetChangeWriteResource = {\n  type: string;\n  address: string;\n  state_key_hash: string;\n  data: MoveResource;\n};\n\nexport type WriteSetChangeWriteTableItem = {\n  type: string;\n  state_key_hash: string;\n  handle: string;\n  key: string;\n  value: string;\n  data?: DecodedTableData;\n};\n\nexport type DecodedTableData = {\n  /**\n   * Key of table in JSON\n   */\n  key: any;\n  /**\n   * Type of key\n   */\n  key_type: string;\n  /**\n   * Value of table in JSON\n   */\n  value: any;\n  /**\n   * Type of value\n   */\n  value_type: string;\n};\n\n/**\n * Deleted table data\n */\nexport type DeletedTableData = {\n  /**\n   * Deleted key\n   */\n  key: any;\n  /**\n   * Deleted key type\n   */\n  key_type: string;\n};\n\nexport type TransactionPayloadResponse = EntryFunctionPayloadResponse | ScriptPayloadResponse | MultisigPayloadResponse;\n\nexport type EntryFunctionPayloadResponse = {\n  type: string;\n  function: MoveStructType;\n  /**\n   * Type arguments of the function\n   */\n  type_arguments: Array<string>;\n  /**\n   * Arguments of the function\n   */\n  arguments: Array<any>;\n};\n\nexport type ScriptPayloadResponse = {\n  type: string;\n  code: MoveScriptBytecode;\n  /**\n   * Type arguments of the function\n   */\n  type_arguments: Array<string>;\n  /**\n   * Arguments of the function\n   */\n  arguments: Array<any>;\n};\n\nexport type MultisigPayloadResponse = {\n  type: string;\n  multisig_address: string;\n  transaction_payload?: EntryFunctionPayloadResponse;\n};\n\nexport type GenesisPayload = {\n  type: string;\n  write_set: WriteSet;\n};\n\n/**\n * Move script bytecode\n */\nexport type MoveScriptBytecode = {\n  bytecode: string;\n  abi?: MoveFunction;\n};\n\n/**\n * These are the JSON representations of transaction signatures returned from the node API.\n */\nexport type TransactionSignature =\n  | TransactionEd25519Signature\n  | TransactionSecp256k1Signature\n  | TransactionMultiEd25519Signature\n  | TransactionMultiAgentSignature\n  | TransactionFeePayerSignature;\n\nexport type TransactionEd25519Signature = {\n  type: string;\n  public_key: string;\n  signature: \"ed25519_signature\";\n};\n\nexport type TransactionSecp256k1Signature = {\n  type: string;\n  public_key: string;\n  signature: \"secp256k1_ecdsa_signature\";\n};\n\nexport type TransactionMultiEd25519Signature = {\n  type: \"multi_ed25519_signature\";\n  /**\n   * The public keys for the Ed25519 signature\n   */\n  public_keys: Array<string>;\n  /**\n   * Signature associated with the public keys in the same order\n   */\n  signatures: Array<string>;\n  /**\n   * The number of signatures required for a successful transaction\n   */\n  threshold: number;\n  bitmap: string;\n};\n\nexport type TransactionMultiAgentSignature = {\n  type: \"multi_agent_signature\";\n  sender: AccountSignature;\n  /**\n   * The other involved parties' addresses\n   */\n  secondary_signer_addresses: Array<string>;\n  /**\n   * The associated signatures, in the same order as the secondary addresses\n   */\n  secondary_signers: Array<AccountSignature>;\n};\n\nexport type TransactionFeePayerSignature = {\n  type: \"fee_payer_signature\";\n  sender: AccountSignature;\n  /**\n   * The other involved parties' addresses\n   */\n  secondary_signer_addresses: Array<string>;\n  /**\n   * The associated signatures, in the same order as the secondary addresses\n   */\n  secondary_signers: Array<AccountSignature>;\n  fee_payer_address: string;\n  fee_payer_signer: AccountSignature;\n};\n\n/**\n * The union of all single account signatures.\n */\nexport type AccountSignature = AccountEd25519Signature | AccountSecp256k1Signature | AccountMultiEd25519Signature;\n\nexport type AccountEd25519Signature = TransactionEd25519Signature;\n\nexport type AccountSecp256k1Signature = TransactionSecp256k1Signature;\n\nexport type AccountMultiEd25519Signature = TransactionMultiEd25519Signature;\n\nexport type WriteSet = ScriptWriteSet | DirectWriteSet;\n\nexport type ScriptWriteSet = {\n  type: string;\n  execute_as: string;\n  script: ScriptPayloadResponse;\n};\n\nexport type DirectWriteSet = {\n  type: string;\n  changes: Array<WriteSetChange>;\n  events: Array<Event>;\n};\n\nexport type EventGuid = {\n  creation_number: string;\n  account_address: string;\n};\n\nexport type Event = {\n  guid: EventGuid;\n  sequence_number: string;\n  type: string;\n  /**\n   * The JSON representation of the event\n   */\n  data: any;\n};\n\n/**\n * Map of Move types to local TypeScript types\n */\nexport type MoveUint8Type = number;\nexport type MoveUint16Type = number;\nexport type MoveUint32Type = number;\nexport type MoveUint64Type = string;\nexport type MoveUint128Type = string;\nexport type MoveUint256Type = string;\nexport type MoveAddressType = string;\nexport type MoveObjectType = string;\nexport type MoveOptionType = MoveType | null | undefined;\n/**\n * This is the format for a fully qualified struct, resource, or entry function in Move.\n */\nexport type MoveStructType = `${string}::${string}::${string}`;\n\nexport type MoveType =\n  | boolean\n  | string\n  | MoveUint8Type\n  | MoveUint16Type\n  | MoveUint32Type\n  | MoveUint64Type\n  | MoveUint128Type\n  | MoveUint256Type\n  | MoveAddressType\n  | MoveObjectType\n  | MoveStructType\n  | Array<MoveType>;\n\n/**\n * Possible Move values acceptable by move functions (entry, view)\n *\n * Map of a Move value to the corresponding TypeScript value\n *\n * `Bool -> boolean`\n *\n * `u8, u16, u32 -> number`\n *\n * `u64, u128, u256 -> string`\n *\n * `String -> string`\n *\n * `Address -> 0x${string}`\n *\n * `Struct - 0x${string}::${string}::${string}`\n *\n * `Object -> 0x${string}`\n *\n * `Vector -> Array<MoveValue>`\n *\n * `Option -> MoveValue | null | undefined`\n */\nexport type MoveValue =\n  | boolean\n  | string\n  | MoveUint8Type\n  | MoveUint16Type\n  | MoveUint32Type\n  | MoveUint64Type\n  | MoveUint128Type\n  | MoveUint256Type\n  | MoveAddressType\n  | MoveObjectType\n  | MoveStructType\n  | MoveOptionType\n  | Array<MoveValue>;\n\n/**\n * Move module id is a string representation of Move module.\n * Module name is case-sensitive.\n */\nexport type MoveModuleId = `${string}::${string}`;\n\n/**\n * Move function visibility\n */\nexport enum MoveFunctionVisibility {\n  PRIVATE = \"private\",\n  PUBLIC = \"public\",\n  FRIEND = \"friend\",\n}\n\n/**\n * Move function ability\n */\nexport enum MoveAbility {\n  STORE = \"store\",\n  DROP = \"drop\",\n  KEY = \"key\",\n  COPY = \"copy\",\n}\n\n/**\n * Move abilities tied to the generic type param and associated with the function that uses it\n */\nexport type MoveFunctionGenericTypeParam = {\n  constraints: Array<MoveAbility>;\n};\n\n/**\n * Move struct field\n */\nexport type MoveStructField = {\n  name: string;\n  type: string;\n};\n\n/**\n * A Move module\n */\nexport type MoveModule = {\n  address: string;\n  name: string;\n  /**\n   * Friends of the module\n   */\n  friends: Array<MoveModuleId>;\n  /**\n   * Public functions of the module\n   */\n  exposed_functions: Array<MoveFunction>;\n  /**\n   * Structs of the module\n   */\n  structs: Array<MoveStruct>;\n};\n\n/**\n * A move struct\n */\nexport type MoveStruct = {\n  name: string;\n  /**\n   * Whether the struct is a native struct of Move\n   */\n  is_native: boolean;\n  /**\n   * Abilities associated with the struct\n   */\n  abilities: Array<MoveAbility>;\n  /**\n   * Generic types associated with the struct\n   */\n  generic_type_params: Array<MoveFunctionGenericTypeParam>;\n  /**\n   * Fields associated with the struct\n   */\n  fields: Array<MoveStructField>;\n};\n\n/**\n * Move function\n */\nexport type MoveFunction = {\n  name: string;\n  visibility: MoveFunctionVisibility;\n  /**\n   * Whether the function can be called as an entry function directly in a transaction\n   */\n  is_entry: boolean;\n  /**\n   * Whether the function is a view function or not\n   */\n  is_view: boolean;\n  /**\n   * Generic type params associated with the Move function\n   */\n  generic_type_params: Array<MoveFunctionGenericTypeParam>;\n  /**\n   * Parameters associated with the move function\n   */\n  params: Array<string>;\n  /**\n   * Return type of the function\n   */\n  return: Array<string>;\n};\n\nexport enum RoleType {\n  VALIDATOR = \"validator\",\n  FULL_NODE = \"full_node\",\n}\n\nexport type LedgerInfo = {\n  /**\n   * Chain ID of the current chain\n   */\n  chain_id: number;\n  epoch: string;\n  ledger_version: string;\n  oldest_ledger_version: string;\n  ledger_timestamp: string;\n  node_role: RoleType;\n  oldest_block_height: string;\n  block_height: string;\n  /**\n   * Git hash of the build of the API endpoint.  Can be used to determine the exact\n   * software version used by the API endpoint.\n   */\n  git_hash?: string;\n};\n\n/**\n * A Block type\n */\nexport type Block = {\n  block_height: string;\n  block_hash: string;\n  block_timestamp: string;\n  first_version: string;\n  last_version: string;\n  /**\n   * The transactions in the block in sequential order\n   */\n  transactions?: Array<TransactionResponse>;\n};\n\n/**\n * The data needed to generate a View Request payload\n */\nexport type ViewRequestData = {\n  function: MoveStructType;\n  typeArguments?: Array<MoveStructType>;\n  functionArguments?: Array<MoveValue>;\n};\n\n// REQUEST TYPES\n\n/**\n * View request for the Move view function API\n *\n * `type MoveStructType = ${string}::${string}::${string}`;\n */\nexport type ViewRequest = {\n  function: MoveStructType;\n  /**\n   * Type arguments of the function\n   */\n  type_arguments: Array<MoveStructType>;\n  /**\n   * Arguments of the function\n   */\n  functionArguments: Array<MoveValue>;\n};\n\n/**\n * Table Item request for the GetTableItem API\n */\nexport type TableItemRequest = {\n  key_type: MoveValue;\n  value_type: MoveValue;\n  /**\n   * The value of the table item's key\n   */\n  key: any;\n};\n\n/**\n * A list of Authentication Key schemes that are supported by Aptos.\n *\n * They are combinations of signing schemes and derive schemes.\n */\nexport type AuthenticationKeyScheme = SigningScheme | DeriveScheme;\n\nexport enum SigningScheme {\n  /**\n   * For Ed25519PublicKey\n   */\n  Ed25519 = 0,\n  /**\n   * For MultiEd25519PublicKey\n   */\n  MultiEd25519 = 1,\n  /**\n   * For SingleKey ecdsa\n   */\n  SingleKey = 2,\n\n  MultiKey = 3,\n}\n\nexport enum SigningSchemeInput {\n  /**\n   * For Ed25519PublicKey\n   */\n  Ed25519 = 0,\n  /**\n   * For Secp256k1Ecdsa\n   */\n  Secp256k1Ecdsa = 2,\n}\n\n/**\n * Scheme used for deriving account addresses from other data\n */\nexport enum DeriveScheme {\n  /**\n   * Derives an address using an AUID, used for objects\n   */\n  DeriveAuid = 251,\n  /**\n   * Derives an address from another object address\n   */\n  DeriveObjectAddressFromObject = 252,\n  /**\n   * Derives an address from a GUID, used for objects\n   */\n  DeriveObjectAddressFromGuid = 253,\n  /**\n   * Derives an address from seed bytes, used for named objects\n   */\n  DeriveObjectAddressFromSeed = 254,\n  /**\n   * Derives an address from seed bytes, used for resource accounts\n   */\n  DeriveResourceAccountAddress = 255,\n}\n\n/**\n * Option properties to pass for waitForTransaction() function\n */\nexport type WaitForTransactionOptions = {\n  timeoutSecs?: number;\n  checkSuccess?: boolean;\n  indexerVersionCheck?: boolean;\n};\n/**\n * Account input type to generate an account using Legacy\n * Ed25519 or MultiEd25519 keys or without a specified `scheme`.\n * If `scheme` is not specified, we default to ED25519\n * In this case `legacy` is always true\n */\nexport type GenerateAccountWithLegacyKey = {\n  scheme?: SigningSchemeInput.Ed25519;\n  legacy: true;\n};\n\n/**\n * Account input type to generate an account using Unified\n * Secp256k1Ecdsa key\n * In this case `legacy` is always false\n */\nexport type GenerateAccountWithUnifiedKey = {\n  scheme: SigningSchemeInput.Secp256k1Ecdsa | SigningSchemeInput.Ed25519;\n  legacy?: false;\n};\n\n/**\n * Unify GenerateAccount type for Legacy and Unified keys\n */\nexport type GenerateAccount = GenerateAccountWithLegacyKey | GenerateAccountWithUnifiedKey;\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AptosApiError, AptosResponse } from \"./types\";\nimport { VERSION } from \"../version\";\nimport { AptosRequest, MimeType, ClientRequest, ClientResponse, Client, AnyNumber } from \"../types\";\n\n/**\n * Meaningful errors map\n */\nconst errors: Record<number, string> = {\n  400: \"Bad Request\",\n  401: \"Unauthorized\",\n  403: \"Forbidden\",\n  404: \"Not Found\",\n  429: \"Too Many Requests\",\n  500: \"Internal Server Error\",\n  502: \"Bad Gateway\",\n  503: \"Service Unavailable\",\n};\n\n/**\n * Given a url and method, sends the request with axios and\n * returns the response.\n */\nexport async function request<Req, Res>(options: ClientRequest<Req>, client: Client): Promise<ClientResponse<Res>> {\n  const { url, method, body, contentType, params, overrides } = options;\n  const headers: Record<string, string | AnyNumber | boolean | undefined> = {\n    ...overrides?.HEADERS,\n    \"x-aptos-client\": `aptos-ts-sdk/${VERSION}`,\n    \"content-type\": contentType ?? MimeType.JSON,\n  };\n\n  if (overrides?.TOKEN) {\n    headers.Authorization = `Bearer ${overrides?.TOKEN}`;\n  }\n\n  /*\n   * make a call using the @aptos-labs/aptos-client package\n   * {@link https://www.npmjs.com/package/@aptos-labs/aptos-client}\n   */\n  return client.provider<Req, Res>({\n    url,\n    method,\n    body,\n    params,\n    headers,\n    overrides,\n  });\n}\n\n/**\n * The main function to use when doing an API request.\n *\n * @param options AptosRequest\n * @param aptosConfig The config information for the SDK client instance\n * @returns the response or AptosApiError\n */\nexport async function aptosRequest<Req, Res>(\n  options: AptosRequest,\n  aptosConfig: AptosConfig,\n): Promise<AptosResponse<Req, Res>> {\n  const { url, path } = options;\n  const fullUrl = `${url}/${path ?? \"\"}`;\n  const response = await request<Req, Res>({ ...options, url: fullUrl }, aptosConfig.client);\n\n  const result: AptosResponse<Req, Res> = {\n    status: response.status,\n    statusText: response.statusText!,\n    data: response.data,\n    headers: response.headers,\n    config: response.config,\n    request: response.request,\n    url: fullUrl,\n  };\n\n  // to support both fullnode and indexer responses,\n  // check if it is an indexer query, and adjust response.data\n  if (aptosConfig.isIndexerRequest(url)) {\n    const indexerResponse = result.data as any;\n    // errors from indexer\n    if (indexerResponse.errors) {\n      throw new AptosApiError(\n        options,\n        result,\n        indexerResponse.errors[0].message ?? `Unhandled Error ${response.status} : ${response.statusText}`,\n      );\n    }\n    result.data = indexerResponse.data as Res;\n  }\n\n  if (result.status >= 200 && result.status < 300) {\n    return result;\n  }\n\n  const errorMessage = errors[result.status];\n\n  throw new AptosApiError(\n    options,\n    result,\n    errorMessage ?? `Unhandled Error ${response.status} : ${response.statusText}`,\n  );\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport const NetworkToIndexerAPI: Record<string, string> = {\n  mainnet: \"https://indexer.mainnet.aptoslabs.com/v1/graphql\",\n  testnet: \"https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql\",\n  devnet: \"https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql\",\n  local: \"http://127.0.0.1:8090/v1/graphql\",\n};\n\nexport const NetworkToNodeAPI: Record<string, string> = {\n  mainnet: \"https://fullnode.mainnet.aptoslabs.com/v1\",\n  testnet: \"https://fullnode.testnet.aptoslabs.com/v1\",\n  devnet: \"https://fullnode.devnet.aptoslabs.com/v1\",\n  local: \"http://127.0.0.1:8080/v1\",\n};\n\nexport const NetworkToFaucetAPI: Record<string, string> = {\n  mainnet: \"https://faucet.mainnet.aptoslabs.com\",\n  testnet: \"https://faucet.testnet.aptoslabs.com\",\n  devnet: \"https://faucet.devnet.aptoslabs.com\",\n  local: \"http://127.0.0.1:8081\",\n};\n\nexport enum Network {\n  MAINNET = \"mainnet\",\n  TESTNET = \"testnet\",\n  DEVNET = \"devnet\",\n  LOCAL = \"local\",\n  CUSTOM = \"custom\",\n}\n\nexport const NetworkToChainId: Record<string, number> = {\n  mainnet: 1,\n  testnet: 2,\n};\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Network } from \"./apiEndpoints\";\n\n/**\n * Type of API endpoint for request routing\n */\nexport enum AptosApiType {\n  FULLNODE,\n  INDEXER,\n  FAUCET,\n}\n\nexport const DEFAULT_NETWORK = Network.DEVNET;\n\n/**\n * The default max gas amount when none is given.\n *\n * This is the maximum number of gas units that will be used by a transaction before being rejected.\n *\n * Note that max gas amount varies based on the transaction.  A larger transaction will go over this\n * default gas amount, and the value will need to be changed for the specific transaction.\n */\nexport const DEFAULT_MAX_GAS_AMOUNT = 200000;\n\n/**\n * The default transaction expiration seconds from now.\n *\n * This time is how long until the blockchain nodes will reject the transaction.\n *\n * Note that the transaction expiration time varies based on network connection and network load.  It may need to be\n * increased for the transaction to be processed.\n */\nexport const DEFAULT_TXN_EXP_SEC_FROM_NOW = 20;\n\n/**\n * The default number of seconds to wait for a transaction to be processed.\n *\n * This time is the amount of time that the SDK will wait for a transaction to be processed when waiting for\n * the results of the transaction.  It may take longer based on network connection and network load.\n */\nexport const DEFAULT_TXN_TIMEOUT_SEC = 20;\n\n/**\n * The default gas currency for the network.\n */\nexport const APTOS_COIN = \"0x1::aptos_coin::AptosCoin\";\n\nexport const RAW_TRANSACTION_SALT = \"APTOS::RawTransaction\";\nexport const RAW_TRANSACTION_WITH_DATA_SALT = \"APTOS::RawTransactionWithData\";\n", "import { AptosConfig } from \"../api/aptosConfig\";\nimport { aptosRequest } from \"./core\";\nimport { AptosResponse } from \"./types\";\nimport { AnyNumber, ClientConfig, MimeType } from \"../types\";\nimport { AptosApiType } from \"../utils/const\";\n\nexport type GetRequestOptions = {\n  /**\n   * The config for the API client\n   */\n  aptosConfig: AptosConfig;\n  /**\n   * The type of API endpoint to call e.g. fullnode, indexer, etc\n   */\n  type: AptosApiType;\n  /**\n   * The name of the API method\n   */\n  originMethod: string;\n  /**\n   * The URL path to the API method\n   */\n  path: string;\n  /**\n   * The content type of the request body\n   */\n  contentType?: MimeType;\n  /**\n   * The accepted content type of the response of the API\n   */\n  acceptType?: MimeType;\n  /**\n   * The query parameters for the request\n   */\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  /**\n   * Specific client overrides for this request to override aptosConfig\n   */\n  overrides?: ClientConfig;\n};\n\nexport type GetAptosRequestOptions = Omit<GetRequestOptions, \"type\">;\n\n/**\n * Main function to do a Get request\n *\n * @param options GetRequestOptions\n * @returns\n */\nexport async function get<Req, Res>(options: GetRequestOptions): Promise<AptosResponse<Req, Res>> {\n  const { aptosConfig, overrides, params, contentType, acceptType, path, originMethod, type } = options;\n  const url = aptosConfig.getRequestUrl(type);\n\n  return aptosRequest<Req, Res>(\n    {\n      url,\n      method: \"GET\",\n      originMethod,\n      path,\n      contentType: contentType?.valueOf(),\n      acceptType: acceptType?.valueOf(),\n      params,\n      overrides: {\n        ...aptosConfig.clientConfig,\n        ...overrides,\n      },\n    },\n    aptosConfig,\n  );\n}\n\nexport async function getAptosFullNode<Req, Res>(options: GetAptosRequestOptions): Promise<AptosResponse<Req, Res>> {\n  return get<Req, Res>({ ...options, type: AptosApiType.FULLNODE });\n}\n\n/// This function is a helper for paginating using a function wrapping an API\nexport async function paginateWithCursor<Req extends Record<string, any>, Res extends any[]>(\n  options: GetAptosRequestOptions,\n): Promise<Res> {\n  const out = [];\n  let cursor: string | undefined;\n  const requestParams = options.params as Req & { start?: string; limit?: number };\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    requestParams.start = cursor;\n    // eslint-disable-next-line no-await-in-loop\n    const response = await getAptosFullNode<Req, Res>({\n      aptosConfig: options.aptosConfig,\n      originMethod: options.originMethod,\n      path: options.path,\n      params: requestParams,\n      overrides: options.overrides,\n    });\n    /**\n     * the cursor is a \"state key\" from the API perspective. Client\n     * should not need to \"care\" what it represents but just use it\n     * to query the next chunk of data.\n     */\n    cursor = response.headers[\"x-aptos-cursor\"];\n    // Now that we have the cursor (if any), we remove the headers before\n    // adding these to the output of this function.\n    delete (response as any).headers;\n    out.push(...response.data);\n    if (cursor === null || cursor === undefined) {\n      break;\n    }\n  }\n  return out as any;\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { aptosRequest } from \"./core\";\nimport { AptosResponse } from \"./types\";\nimport { AnyNumber, ClientConfig, MimeType } from \"../types\";\nimport { AptosApiType } from \"../utils/const\";\n\nexport type PostRequestOptions = {\n  /**\n   * The config for the API client\n   */\n  aptosConfig: AptosConfig;\n  /**\n   * The type of API endpoint to call e.g. fullnode, indexer, etc\n   */\n  type: AptosApiType;\n  /**\n   * The name of the API method\n   */\n  originMethod: string;\n  /**\n   * The URL path to the API method\n   */\n  path: string;\n  /**\n   * The content type of the request body\n   */\n  contentType?: MimeType;\n  /**\n   * The accepted content type of the response of the API\n   */\n  acceptType?: MimeType;\n  /**\n   * The query parameters for the request\n   */\n  params?: Record<string, string | AnyNumber | boolean | undefined>;\n  /**\n   * The body of the request, should match the content type of the request\n   */\n  body?: any;\n  /**\n   * Specific client overrides for this request to override aptosConfig\n   */\n  overrides?: ClientConfig;\n};\n\nexport type PostAptosRequestOptions = Omit<PostRequestOptions, \"type\">;\n\n/**\n * Main function to do a Post request\n *\n * @param options PostRequestOptions\n * @returns\n */\nexport async function post<Req, Res>(options: PostRequestOptions): Promise<AptosResponse<Req, Res>> {\n  const { type, originMethod, path, body, acceptType, contentType, params, aptosConfig, overrides } = options;\n  const url = aptosConfig.getRequestUrl(type);\n\n  return aptosRequest<Req, Res>(\n    {\n      url,\n      method: \"POST\",\n      originMethod,\n      path,\n      body,\n      contentType: contentType?.valueOf(),\n      acceptType: acceptType?.valueOf(),\n      params,\n      overrides: {\n        ...aptosConfig.clientConfig,\n        ...overrides,\n      },\n    },\n    aptosConfig,\n  );\n}\n\nexport async function postAptosFullNode<Req, Res>(options: PostAptosRequestOptions): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.FULLNODE });\n}\n\nexport async function postAptosIndexer<Req, Res>(options: PostAptosRequestOptions): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.INDEXER });\n}\n\nexport async function postAptosFaucet<Req, Res>(options: PostAptosRequestOptions): Promise<AptosResponse<Req, Res>> {\n  return post<Req, Res>({ ...options, type: AptosApiType.FAUCET });\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { Serializable, Serializer } from \"../bcs/serializer\";\nimport { Deserializer } from \"../bcs/deserializer\";\nimport { ParsingError, ParsingResult } from \"./common\";\nimport { TransactionArgument } from \"../transactions/instances/transactionArgument\";\nimport { HexInput, ScriptTransactionArgumentVariants } from \"../types\";\n\n/**\n * This enum is used to explain why an address was invalid.\n */\nexport enum AddressInvalidReason {\n  INCORRECT_NUMBER_OF_BYTES = \"incorrect_number_of_bytes\",\n  INVALID_HEX_CHARS = \"invalid_hex_chars\",\n  TOO_SHORT = \"too_short\",\n  TOO_LONG = \"too_long\",\n  LEADING_ZERO_X_REQUIRED = \"leading_zero_x_required\",\n  LONG_FORM_REQUIRED_UNLESS_SPECIAL = \"long_form_required_unless_special\",\n  INVALID_PADDING_ZEROES = \"INVALID_PADDING_ZEROES\",\n}\n\n/**\n * NOTE: Only use this class for account addresses. For other hex data, e.g. transaction\n * hashes, use the Hex class.\n *\n * AccountAddress is used for working with account addresses. Account addresses, when\n * represented as a string, generally look like these examples:\n * - 0x1\n * - 0xaa86fe99004361f747f91342ca13c426ca0cccb0c1217677180c9493bad6ef0c\n *\n * Proper formatting and parsing of account addresses is defined by AIP-40.\n * To learn more about the standard, read the AIP here:\n * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n *\n * The comments in this class make frequent reference to the LONG and SHORT formats,\n * as well as \"special\" addresses. To learn what these refer to see AIP-40.\n */\nexport class AccountAddress extends Serializable implements TransactionArgument {\n  /**\n   * This is the internal representation of an account address.\n   */\n  readonly data: Uint8Array;\n\n  /**\n   * The number of bytes that make up an account address.\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The length of an address string in LONG form without a leading 0x.\n   */\n  static readonly LONG_STRING_LENGTH: number = 64;\n\n  static ZERO: AccountAddress = AccountAddress.fromString(\"0x0\");\n\n  static ONE: AccountAddress = AccountAddress.fromString(\"0x1\");\n\n  static TWO: AccountAddress = AccountAddress.fromString(\"0x2\");\n\n  static THREE: AccountAddress = AccountAddress.fromString(\"0x3\");\n\n  static FOUR: AccountAddress = AccountAddress.fromString(\"0x4\");\n\n  /**\n   * Creates an instance of AccountAddress from a Uint8Array.\n   *\n   * @param args.data A Uint8Array representing an account address.\n   */\n  constructor(args: { data: Uint8Array }) {\n    super();\n    if (args.data.length !== AccountAddress.LENGTH) {\n      throw new ParsingError(\n        \"AccountAddress data should be exactly 32 bytes long\",\n        AddressInvalidReason.INCORRECT_NUMBER_OF_BYTES,\n      );\n    }\n    this.data = args.data;\n  }\n\n  /**\n   * Returns whether an address is special, where special is defined as 0x0 to 0xf\n   * inclusive. In other words, the last byte of the address must be < 0b10000 (16)\n   * and every other byte must be zero.\n   *\n   * For more information on how special addresses are defined see AIP-40:\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * @returns true if the address is special, false if not.\n   */\n  isSpecial(): boolean {\n    return (\n      this.data.slice(0, this.data.length - 1).every((byte) => byte === 0) && this.data[this.data.length - 1] < 0b10000\n    );\n  }\n\n  // ===\n  // Methods for representing an instance of AccountAddress as other types.\n  // ===\n\n  /**\n   * Return the AccountAddress as a string as per AIP-40.\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * In short, it means that special addresses are represented in SHORT form, meaning\n   * 0x0 through to 0xf inclusive, and every other address is represented in LONG form,\n   * meaning 0x + 64 hex characters.\n   *\n   * @returns AccountAddress as a string conforming to AIP-40.\n   */\n  toString(): `0x${string}` {\n    return `0x${this.toStringWithoutPrefix()}`;\n  }\n\n  /**\n   * NOTE: Prefer to use `toString` where possible.\n   *\n   * Return the AccountAddress as a string as per AIP-40 but without the leading 0x.\n   *\n   * Learn more by reading the docstring of `toString`.\n   *\n   * @returns AccountAddress as a string conforming to AIP-40 but without the leading 0x.\n   */\n  toStringWithoutPrefix(): string {\n    let hex = bytesToHex(this.data);\n    if (this.isSpecial()) {\n      hex = hex[hex.length - 1];\n    }\n    return hex;\n  }\n\n  /**\n   * NOTE: Prefer to use `toString` where possible.\n   *\n   * Whereas toString will format special addresses (as defined by isSpecial) using the\n   * SHORT form (no leading 0s), this format the address in the LONG format\n   * unconditionally.\n   *\n   * This means it will be 0x + 64 hex characters.\n   *\n   * @returns AccountAddress as a string in LONG form.\n   */\n  toStringLong(): `0x${string}` {\n    return `0x${this.toStringLongWithoutPrefix()}`;\n  }\n\n  /**\n   * NOTE: Prefer to use `toString` where possible.\n   *\n   * Whereas toString will format special addresses (as defined by isSpecial) using the\n   * SHORT form (no leading 0s), this function will include leading zeroes. The string\n   * will not have a leading zero.\n   *\n   * This means it will be 64 hex characters without a leading 0x.\n   *\n   * @returns AccountAddress as a string in LONG form without a leading 0x.\n   */\n  toStringLongWithoutPrefix(): string {\n    return bytesToHex(this.data);\n  }\n\n  /**\n   * Get the inner hex data. The inner data is already a Uint8Array so no conversion\n   * is taking place here, it just returns the inner data.\n   *\n   * @returns Hex data as Uint8Array\n   */\n  toUint8Array(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Serialize the AccountAddress to a Serializer instance's data buffer.\n   * @param serializer The serializer to serialize the AccountAddress to.\n   * @returns void\n   * @example\n   * const serializer = new Serializer();\n   * const address = AccountAddress.fromString(\"0x1\");\n   * address.serialize(serializer);\n   * const bytes = serializer.toUint8Array();\n   * // `bytes` is now the BCS-serialized address.\n   */\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.Address);\n    serializer.serialize(this);\n  }\n\n  /**\n   * Deserialize an AccountAddress from the byte buffer in a Deserializer instance.\n   * @param deserializer The deserializer to deserialize the AccountAddress from.\n   * @returns An instance of AccountAddress.\n   * @example\n   * const bytes = hexToBytes(\"0x0102030405060708091011121314151617181920212223242526272829303132\");\n   * const deserializer = new Deserializer(bytes);\n   * const address = AccountAddress.deserialize(deserializer);\n   * // `address` is now an instance of AccountAddress.\n   */\n  static deserialize(deserializer: Deserializer): AccountAddress {\n    const bytes = deserializer.deserializeFixedBytes(AccountAddress.LENGTH);\n    return new AccountAddress({ data: bytes });\n  }\n\n  // ===\n  // Methods for creating an instance of AccountAddress from other types.\n  // ===\n\n  /**\n   * NOTE: This function has strict parsing behavior. For relaxed behavior, please use\n   * the `fromStringRelaxed` function.\n   *\n   * Creates an instance of AccountAddress from a hex string.\n   *\n   * This function allows only the strictest formats defined by AIP-40. In short this\n   * means only the following formats are accepted:\n   *\n   * - LONG\n   * - SHORT for special addresses\n   *\n   * Where:\n   * - LONG is defined as 0x + 64 hex characters.\n   * - SHORT for special addresses is 0x0 to 0xf inclusive without padding zeroes.\n   *\n   * This means the following are not accepted:\n   * - SHORT for non-special addresses.\n   * - Any address without a leading 0x.\n   *\n   * Learn more about the different address formats by reading AIP-40:\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * @param input A hex string representing an account address.\n   *\n   * @returns An instance of AccountAddress.\n   */\n  static fromString(input: string): AccountAddress {\n    // Assert the string starts with 0x.\n    if (!input.startsWith(\"0x\")) {\n      throw new ParsingError(\"Hex string must start with a leading 0x.\", AddressInvalidReason.LEADING_ZERO_X_REQUIRED);\n    }\n\n    const address = AccountAddress.fromStringRelaxed(input);\n\n    // Check if the address is in LONG form. If it is not, this is only allowed for\n    // special addresses, in which case we check it is in proper SHORT form.\n    if (input.length !== AccountAddress.LONG_STRING_LENGTH + 2) {\n      if (!address.isSpecial()) {\n        throw new ParsingError(\n          `The given hex string ${address} is not a special address, it must be represented as 0x + 64 chars.`,\n          AddressInvalidReason.LONG_FORM_REQUIRED_UNLESS_SPECIAL,\n        );\n      } else if (input.length !== 3) {\n        // 0x + one hex char is the only valid SHORT form for special addresses.\n        throw new ParsingError(\n          // eslint-disable-next-line max-len\n          `The given hex string ${input} is a special address not in LONG form, it must be 0x0 to 0xf without padding zeroes.`,\n          AddressInvalidReason.INVALID_PADDING_ZEROES,\n        );\n      }\n    }\n\n    return address;\n  }\n\n  /**\n   * NOTE: This function has relaxed parsing behavior. For strict behavior, please use\n   * the `fromString` function. Where possible use `fromString` rather than this\n   * function, `fromStringRelaxed` is only provided for backwards compatibility.\n   *\n   * Creates an instance of AccountAddress from a hex string.\n   *\n   * This function allows all formats defined by AIP-40. In short this means the\n   * following formats are accepted:\n   *\n   * - LONG, with or without leading 0x\n   * - SHORT, with or without leading 0x\n   *\n   * Where:\n   * - LONG is 64 hex characters.\n   * - SHORT is 1 to 63 hex characters inclusive.\n   * - Padding zeroes are allowed, e.g. 0x0123 is valid.\n   *\n   * Learn more about the different address formats by reading AIP-40:\n   * https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-40.md.\n   *\n   * @param input A hex string representing an account address.\n   *\n   * @returns An instance of AccountAddress.\n   */\n  static fromStringRelaxed(input: string): AccountAddress {\n    let parsedInput = input;\n    // Remove leading 0x for parsing.\n    if (input.startsWith(\"0x\")) {\n      parsedInput = input.slice(2);\n    }\n\n    // Ensure the address string is at least 1 character long.\n    if (parsedInput.length === 0) {\n      throw new ParsingError(\n        \"Hex string is too short, must be 1 to 64 chars long, excluding the leading 0x.\",\n        AddressInvalidReason.TOO_SHORT,\n      );\n    }\n\n    // Ensure the address string is not longer than 64 characters.\n    if (parsedInput.length > 64) {\n      throw new ParsingError(\n        \"Hex string is too long, must be 1 to 64 chars long, excluding the leading 0x.\",\n        AddressInvalidReason.TOO_LONG,\n      );\n    }\n\n    let addressBytes: Uint8Array;\n    try {\n      // Pad the address with leading zeroes, so it is 64 chars long and then convert\n      // the hex string to bytes. Every two characters in a hex string constitutes a\n      // single byte. So a 64 length hex string becomes a 32 byte array.\n      addressBytes = hexToBytes(parsedInput.padStart(64, \"0\"));\n    } catch (e) {\n      const error = e as Error;\n      // At this point the only way this can fail is if the hex string contains\n      // invalid characters.\n      throw new ParsingError(`Hex characters are invalid: ${error.message}`, AddressInvalidReason.INVALID_HEX_CHARS);\n    }\n\n    return new AccountAddress({ data: addressBytes });\n  }\n\n  /**\n   * Convenience method for creating an AccountAddress from HexInput. For\n   * more information on how this works, see the constructor and fromString.\n   *\n   * @param input A hex string or Uint8Array representing an account address.\n   *\n   * @returns An instance of AccountAddress.\n   */\n  static fromHexInput(input: HexInput): AccountAddress {\n    if (input instanceof Uint8Array) {\n      return new AccountAddress({ data: input });\n    }\n    return AccountAddress.fromString(input);\n  }\n\n  /**\n   * Convenience method for creating an AccountAddress from HexInput. For\n   * more information on how this works, see the constructor and fromStringRelaxed.\n   *\n   * @param hexInput A hex string or Uint8Array representing an account address.\n   *\n   * @returns An instance of AccountAddress.\n   */\n  static fromHexInputRelaxed(hexInput: HexInput): AccountAddress {\n    if (hexInput instanceof Uint8Array) {\n      return new AccountAddress({ data: hexInput });\n    }\n    return AccountAddress.fromStringRelaxed(hexInput);\n  }\n\n  // ===\n  // Methods for checking validity.\n  // ===\n\n  /**\n   * Check if the string is a valid AccountAddress.\n   *\n   * @param args.input A hex string representing an account address.\n   * @param args.relaxed If true, use relaxed parsing behavior. If false, use strict parsing behavior.\n   *\n   * @returns valid = true if the string is valid, valid = false if not. If the string\n   * is not valid, invalidReason will be set explaining why it is invalid.\n   */\n  static isValid(args: { input: string; relaxed?: boolean }): ParsingResult<AddressInvalidReason> {\n    try {\n      if (args.relaxed) {\n        AccountAddress.fromStringRelaxed(args.input);\n      } else {\n        AccountAddress.fromString(args.input);\n      }\n      return { valid: true };\n    } catch (e) {\n      const error = e as ParsingError<AddressInvalidReason>;\n      return {\n        valid: false,\n        invalidReason: error.invalidReason,\n        invalidReasonMessage: error.message,\n      };\n    }\n  }\n\n  /**\n   * Return whether AccountAddresses are equal. AccountAddresses are considered equal\n   * if their underlying byte data is identical.\n   *\n   * @param other The AccountAddress to compare to.\n   * @returns true if the AccountAddresses are equal, false if not.\n   */\n  equals(other: AccountAddress): boolean {\n    if (this.data.length !== other.data.length) return false;\n    return this.data.every((value, index) => value === other.data[index]);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Uint8, Uint16, Uint32, Uint64, Uint128, Uint256 } from \"../types\";\n\n// Upper bound values for uint8, uint16, uint64 and uint128\nexport const MAX_U8_NUMBER: Uint8 = 2 ** 8 - 1;\nexport const MAX_U16_NUMBER: Uint16 = 2 ** 16 - 1;\nexport const MAX_U32_NUMBER: Uint32 = 2 ** 32 - 1;\nexport const MAX_U64_BIG_INT: Uint64 = BigInt(2) ** BigInt(64) - BigInt(1);\nexport const MAX_U128_BIG_INT: Uint128 = BigInt(2) ** BigInt(128) - BigInt(1);\nexport const MAX_U256_BIG_INT: Uint256 = BigInt(2) ** BigInt(256) - BigInt(1);\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { ParsingError, ParsingResult } from \"./common\";\nimport { HexInput } from \"../types\";\n\n/**\n * This enum is used to explain why parsing might have failed.\n */\nexport enum HexInvalidReason {\n  TOO_SHORT = \"too_short\",\n  INVALID_LENGTH = \"invalid_length\",\n  INVALID_HEX_CHARS = \"invalid_hex_chars\",\n}\n\n/**\n * NOTE: Do not use this class when working with account addresses, use AccountAddress.\n *\n * NOTE: When accepting hex data as input to a function, prefer to accept HexInput and\n * then use the static helper methods of this class to convert it into the desired\n * format. This enables the greatest flexibility for the developer.\n *\n * Hex is a helper class for working with hex data. Hex data, when represented as a\n * string, generally looks like this, for example: 0xaabbcc, 45cd32, etc.\n *\n * You might use this class like this:\n *\n * ```ts\n * getTransactionByHash(txnHash: HexInput): Promise<Transaction> {\n *   const txnHashString = Hex.fromHexInput(txnHash).toString();\n *   return await getTransactionByHashInner(txnHashString);\n * }\n * ```\n *\n * This call to `Hex.fromHexInput().toString()` converts the HexInput to a hex string\n * with a leading 0x prefix, regardless of what the input format was.\n *\n * These are some other ways to chain the functions together:\n * - `Hex.fromString({ hexInput: \"0x1f\" }).toUint8Array()`\n * - `new Hex([1, 3]).toStringWithoutPrefix()`\n */\nexport class Hex {\n  private readonly data: Uint8Array;\n\n  /**\n   * Create a new Hex instance from a Uint8Array.\n   *\n   * @param data Uint8Array\n   */\n  constructor(data: Uint8Array) {\n    this.data = data;\n  }\n\n  // ===\n  // Methods for representing an instance of Hex as other types.\n  // ===\n\n  /**\n   * Get the inner hex data. The inner data is already a Uint8Array so no conversion\n   * is taking place here, it just returns the inner data.\n   *\n   * @returns Hex data as Uint8Array\n   */\n  toUint8Array(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Get the hex data as a string without the 0x prefix.\n   *\n   * @returns Hex string without 0x prefix\n   */\n  toStringWithoutPrefix(): string {\n    return bytesToHex(this.data);\n  }\n\n  /**\n   * Get the hex data as a string with the 0x prefix.\n   *\n   * @returns Hex string with 0x prefix\n   */\n  toString(): string {\n    return `0x${this.toStringWithoutPrefix()}`;\n  }\n\n  // ===\n  // Methods for creating an instance of Hex from other types.\n  // ===\n\n  /**\n   * Static method to convert a hex string to Hex\n   *\n   * @param str A hex string, with or without the 0x prefix\n   *\n   * @returns Hex\n   */\n  static fromString(str: string): Hex {\n    let input = str;\n\n    if (input.startsWith(\"0x\")) {\n      input = input.slice(2);\n    }\n\n    if (input.length === 0) {\n      throw new ParsingError(\n        \"Hex string is too short, must be at least 1 char long, excluding the optional leading 0x.\",\n        HexInvalidReason.TOO_SHORT,\n      );\n    }\n\n    if (input.length % 2 !== 0) {\n      throw new ParsingError(\"Hex string must be an even number of hex characters.\", HexInvalidReason.INVALID_LENGTH);\n    }\n\n    try {\n      return new Hex(hexToBytes(input));\n    } catch (e) {\n      const error = e as Error;\n      throw new ParsingError(\n        `Hex string contains invalid hex characters: ${error.message}`,\n        HexInvalidReason.INVALID_HEX_CHARS,\n      );\n    }\n  }\n\n  /**\n   * Static method to convert an instance of HexInput to Hex\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   *\n   * @returns Hex\n   */\n  static fromHexInput(hexInput: HexInput): Hex {\n    if (hexInput instanceof Uint8Array) return new Hex(hexInput);\n    return Hex.fromString(hexInput);\n  }\n\n  // ===\n  // Methods for checking validity.\n  // ===\n\n  /**\n   * Check if the string is valid hex.\n   *\n   * @param str A hex string representing byte data.\n   *\n   * @returns valid = true if the string is valid, false if not. If the string is not\n   * valid, invalidReason and invalidReasonMessage will be set explaining why it is\n   * invalid.\n   */\n  static isValid(str: string): ParsingResult<HexInvalidReason> {\n    try {\n      Hex.fromString(str);\n      return { valid: true };\n    } catch (e) {\n      const error = e as ParsingError<HexInvalidReason>;\n      return {\n        valid: false,\n        invalidReason: error.invalidReason,\n        invalidReasonMessage: error.message,\n      };\n    }\n  }\n\n  /**\n   * Return whether Hex instances are equal. Hex instances are considered equal if\n   * their underlying byte data is identical.\n   *\n   * @param other The Hex instance to compare to.\n   * @returns true if the Hex instances are equal, false if not.\n   */\n  equals(other: Hex): boolean {\n    if (this.data.length !== other.data.length) return false;\n    return this.data.every((value, index) => value === other.data[index]);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This error is used to explain why parsing failed.\n */\nexport class ParsingError<T> extends Error {\n  /**\n   * This provides a programmatic way to access why parsing failed. Downstream devs\n   * might want to use this to build their own error messages if the default error\n   * messages are not suitable for their use case. This should be an enum.\n   */\n  public invalidReason: T;\n\n  constructor(message: string, invalidReason: T) {\n    super(message);\n    this.invalidReason = invalidReason;\n  }\n}\n\n/**\n * Whereas ParsingError is thrown when parsing fails, e.g. in a fromString function,\n * this type is returned from \"defensive\" functions like isValid.\n */\nexport type ParsingResult<T> = {\n  /**\n   * True if valid, false otherwise.\n   */\n  valid: boolean;\n\n  /**\n   * If valid is false, this will be a code explaining why parsing failed.\n   */\n  invalidReason?: T;\n\n  /**\n   * If valid is false, this will be a string explaining why parsing failed.\n   */\n  invalidReasonMessage?: string;\n};\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport {\n  MAX_U128_BIG_INT,\n  MAX_U16_NUMBER,\n  MAX_U32_NUMBER,\n  MAX_U64_BIG_INT,\n  MAX_U8_NUMBER,\n  MAX_U256_BIG_INT,\n} from \"./consts\";\nimport { Hex } from \"../core/hex\";\nimport { AnyNumber, Uint16, Uint32, Uint8 } from \"../types\";\n\n// This class is intended to be used as a base class for all serializable types.\n// It can be used to facilitate composable serialization of a complex type and\n// in general to serialize a type to its BCS representation.\nexport abstract class Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Serializes a `Serializable` value to its BCS representation.\n   * This function is the Typescript SDK equivalent of `bcs::to_bytes` in Move.\n   * @returns the BCS representation of the Serializable instance as a byte buffer\n   */\n  bcsToBytes(): Uint8Array {\n    const serializer = new Serializer();\n    this.serialize(serializer);\n    return serializer.toUint8Array();\n  }\n\n  /**\n   * Helper function to get a value's BCS-serialized bytes as a Hex instance.\n   * @returns a Hex instance with the BCS-serialized bytes loaded into its underlying Uint8Array\n   */\n  bcsToHex(): Hex {\n    const bcsBytes = this.bcsToBytes();\n    return Hex.fromHexInput(bcsBytes);\n  }\n}\n\nexport class Serializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  // Constructs a serializer with a buffer of size `length` bytes, 64 bytes by default.\n  // `length` must be greater than 0.\n  constructor(length: number = 64) {\n    if (length <= 0) {\n      throw new Error(\"Length needs to be greater than 0\");\n    }\n    this.buffer = new ArrayBuffer(length);\n    this.offset = 0;\n  }\n\n  private ensureBufferWillHandleSize(bytes: number) {\n    while (this.buffer.byteLength < this.offset + bytes) {\n      const newBuffer = new ArrayBuffer(this.buffer.byteLength * 2);\n      new Uint8Array(newBuffer).set(new Uint8Array(this.buffer));\n      this.buffer = newBuffer;\n    }\n  }\n\n  protected appendToBuffer(values: Uint8Array) {\n    this.ensureBufferWillHandleSize(values.length);\n    new Uint8Array(this.buffer, this.offset).set(values);\n    this.offset += values.length;\n  }\n\n  private serializeWithFunction(\n    fn: (byteOffset: number, value: number, littleEndian?: boolean) => void,\n    bytesLength: number,\n    value: number,\n  ) {\n    this.ensureBufferWillHandleSize(bytesLength);\n    const dv = new DataView(this.buffer, this.offset);\n    fn.apply(dv, [0, value, true]);\n    this.offset += bytesLength;\n  }\n\n  /**\n   * Serializes a string. UTF8 string is supported.\n   *\n   * The number of bytes in the string content is serialized first, as a uleb128-encoded u32 integer.\n   * Then the string content is serialized as UTF8 encoded bytes.\n   *\n   * BCS layout for \"string\": string_length | string_content\n   * where string_length is a u32 integer encoded as a uleb128 integer, equal to the number of bytes in string_content.\n   *\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeStr(\"1234abcd\");\n   * assert(serializer.toUint8Array() === new Uint8Array([8, 49, 50, 51, 52, 97, 98, 99, 100]));\n   * ```\n   */\n  serializeStr(value: string) {\n    const textEncoder = new TextEncoder();\n    this.serializeBytes(textEncoder.encode(value));\n  }\n\n  /**\n   * Serializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes\n   * where bytes_length is a u32 integer encoded as a uleb128 integer, equal to the length of the bytes array.\n   */\n  serializeBytes(value: Uint8Array) {\n    this.serializeU32AsUleb128(value.length);\n    this.appendToBuffer(value);\n  }\n\n  /**\n   * Serializes an array of bytes with known length. Therefore, length doesn't need to be\n   * serialized to help deserialization.\n   *\n   * When deserializing, the number of bytes to deserialize needs to be passed in.\n   */\n  serializeFixedBytes(value: Uint8Array) {\n    this.appendToBuffer(value);\n  }\n\n  /**\n   * Serializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for true and \"0x00\" for false.\n   */\n  serializeBool(value: boolean) {\n    ensureBoolean(value);\n    const byteValue = value ? 1 : 0;\n    this.appendToBuffer(new Uint8Array([byteValue]));\n  }\n\n  /**\n   * Serializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  @checkNumberRange(0, MAX_U8_NUMBER)\n  serializeU8(value: Uint8) {\n    this.appendToBuffer(new Uint8Array([value]));\n  }\n\n  /**\n   * Serializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU16(4660);\n   * assert(serializer.toUint8Array() === new Uint8Array([0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U16_NUMBER)\n  serializeU16(value: Uint16) {\n    this.serializeWithFunction(DataView.prototype.setUint16, 2, value);\n  }\n\n  /**\n   * Serializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU32(305419896);\n   * assert(serializer.toUint8Array() === new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32(value: Uint32) {\n    this.serializeWithFunction(DataView.prototype.setUint32, 4, value);\n  }\n\n  /**\n   * Serializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const serializer = new Serializer();\n   * serializer.serializeU64(1311768467750121216);\n   * assert(serializer.toUint8Array() === new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * ```\n   */\n  @checkNumberRange(BigInt(0), MAX_U64_BIG_INT)\n  serializeU64(value: AnyNumber) {\n    const low = BigInt(value) & BigInt(MAX_U32_NUMBER);\n    const high = BigInt(value) >> BigInt(32);\n\n    // write little endian number\n    this.serializeU32(Number(low));\n    this.serializeU32(Number(high));\n  }\n\n  /**\n   * Serializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U128_BIG_INT)\n  serializeU128(value: AnyNumber) {\n    const low = BigInt(value) & MAX_U64_BIG_INT;\n    const high = BigInt(value) >> BigInt(64);\n\n    // write little endian number\n    this.serializeU64(low);\n    this.serializeU64(high);\n  }\n\n  /**\n   * Serializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  @checkNumberRange(BigInt(0), MAX_U256_BIG_INT)\n  serializeU256(value: AnyNumber) {\n    const low = BigInt(value) & MAX_U128_BIG_INT;\n    const high = BigInt(value) >> BigInt(128);\n\n    // write little endian number\n    this.serializeU128(low);\n    this.serializeU128(high);\n  }\n\n  /**\n   * Serializes a uint32 number with uleb128.\n   *\n   * BCS uses uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  @checkNumberRange(0, MAX_U32_NUMBER)\n  serializeU32AsUleb128(val: Uint32) {\n    let value = val;\n    const valueArray = [];\n    while (value >>> 7 !== 0) {\n      valueArray.push((value & 0x7f) | 0x80);\n      value >>>= 7;\n    }\n    valueArray.push(value);\n    this.appendToBuffer(new Uint8Array(valueArray));\n  }\n\n  /**\n   * Returns the buffered bytes\n   */\n  toUint8Array(): Uint8Array {\n    return new Uint8Array(this.buffer).slice(0, this.offset);\n  }\n\n  /**\n   * Serializes a `Serializable` value, facilitating composable serialization.\n   *\n   * @param value The Serializable value to serialize\n   *\n   * @example\n   * // Define the MoveStruct class that implements the Serializable interface\n   * class MoveStruct extends Serializable {\n   *     constructor(\n   *         public creatorAddress: AccountAddress, // where AccountAddress extends Serializable\n   *         public collectionName: string,\n   *         public tokenName: string\n   *     ) {}\n   *\n   *     serialize(serializer: Serializer): void {\n   *         serializer.serialize(this.creatorAddress);  // Composable serialization of another Serializable object\n   *         serializer.serializeStr(this.collectionName);\n   *         serializer.serializeStr(this.tokenName);\n   *     }\n   * }\n   *\n   * // Construct a MoveStruct\n   * const moveStruct = new MoveStruct(new AccountAddress(...), \"MyCollection\", \"TokenA\");\n   *\n   * // Serialize a string, a u64 number, and a MoveStruct instance.\n   * const serializer = new Serializer();\n   * serializer.serializeStr(\"ExampleString\");\n   * serializer.serializeU64(12345678);\n   * serializer.serialize(moveStruct);\n   *\n   * // Get the bytes from the Serializer instance\n   * const serializedBytes = serializer.toUint8Array();\n   *\n   * @returns the serializer instance\n   */\n  serialize<T extends Serializable>(value: T): void {\n    // NOTE: The `serialize` method called by `value` is defined in `value`'s\n    // Serializable interface, not the one defined in this class.\n    value.serialize(this);\n  }\n\n  /**\n   * Serializes an array of BCS Serializable values to a serializer instance.\n   * Note that this does not return anything. The bytes are added to the serializer instance's byte buffer.\n   *\n   * @param values The array of BCS Serializable values\n   * @example\n   * const addresses = new Array<AccountAddress>(\n   *   AccountAddress.fromHexInputRelaxed(\"0x1\"),\n   *   AccountAddress.fromHexInputRelaxed(\"0x2\"),\n   *   AccountAddress.fromHexInputRelaxed(\"0xa\"),\n   *   AccountAddress.fromHexInputRelaxed(\"0xb\"),\n   * );\n   * const serializer = new Serializer();\n   * serializer.serializeVector(addresses);\n   * const serializedBytes = serializer.toUint8Array();\n   * // serializedBytes is now the BCS-serialized bytes\n   * // The equivalent value in Move would be:\n   * // `bcs::to_bytes(&vector<address> [@0x1, @0x2, @0xa, @0xb])`;\n   */\n  serializeVector<T extends Serializable>(values: Array<T>): void {\n    this.serializeU32AsUleb128(values.length);\n    values.forEach((item) => {\n      item.serialize(this);\n    });\n  }\n}\n\nexport function ensureBoolean(value: unknown): asserts value is boolean {\n  if (typeof value !== \"boolean\") {\n    throw new Error(`${value} is not a boolean value`);\n  }\n}\n\nexport const outOfRangeErrorMessage = (value: AnyNumber, min: AnyNumber, max: AnyNumber) =>\n  `${value} is out of range: [${min}, ${max}]`;\n\nexport function validateNumberInRange<T extends AnyNumber>(value: T, minValue: T, maxValue: T) {\n  const valueBigInt = BigInt(value);\n  if (valueBigInt > BigInt(maxValue) || valueBigInt < BigInt(minValue)) {\n    throw new Error(outOfRangeErrorMessage(value, minValue, maxValue));\n  }\n}\n\n/**\n * A decorator to ensure the input argument for a function is within a range.\n * @param minValue The input argument must be >= minValue\n * @param maxValue The input argument must be <= maxValue\n */\nfunction checkNumberRange<T extends AnyNumber>(minValue: T, maxValue: T) {\n  return (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const childFunction = descriptor.value;\n    // eslint-disable-next-line no-param-reassign\n    descriptor.value = function deco(value: AnyNumber) {\n      validateNumberInRange(value, minValue, maxValue);\n      return childFunction.apply(this, [value]);\n    };\n\n    return descriptor;\n  };\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { AccountAddress } from \"./accountAddress\";\nimport { PublicKey } from \"./crypto/asymmetricCrypto\";\nimport { Ed25519PublicKey } from \"./crypto/ed25519\";\nimport { MultiEd25519PublicKey } from \"./crypto/multiEd25519\";\nimport { Hex } from \"./hex\";\nimport { AuthenticationKeyScheme, HexInput, SigningScheme } from \"../types\";\nimport { AnyPublicKey } from \"./crypto/anyPublicKey\";\nimport { MultiKey } from \"./crypto/multiKey\";\nimport { Serializable, Serializer } from \"../bcs/serializer\";\nimport { Deserializer } from \"../bcs/deserializer\";\n\n/**\n * Each account stores an authentication key. Authentication key enables account owners to rotate\n * their private key(s) associated with the account without changing the address that hosts their account.\n * @see {@link https://aptos.dev/concepts/accounts | Account Basics}\n *\n * Note: AuthenticationKey only supports Ed25519 and MultiEd25519 public keys for now.\n *\n * Account addresses can be derived from AuthenticationKey\n */\nexport class AuthenticationKey extends Serializable {\n  /**\n   * An authentication key is always a SHA3-256 hash of data, and is always 32 bytes.\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The raw bytes of the authentication key.\n   */\n  public readonly data: Hex;\n\n  constructor(args: { data: HexInput }) {\n    super();\n    const { data } = args;\n    const hex = Hex.fromHexInput(data);\n    if (hex.toUint8Array().length !== AuthenticationKey.LENGTH) {\n      throw new Error(`Authentication Key length should be ${AuthenticationKey.LENGTH}`);\n    }\n    this.data = hex;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.data.toUint8Array());\n  }\n\n  /**\n   * Deserialize an AuthenticationKey from the byte buffer in a Deserializer instance.\n   * @param deserializer The deserializer to deserialize the AuthenticationKey from.\n   * @returns An instance of AuthenticationKey.\n   */\n  static deserialize(deserializer: Deserializer): AuthenticationKey {\n    const bytes = deserializer.deserializeFixedBytes(AuthenticationKey.LENGTH);\n    return new AuthenticationKey({ data: bytes });\n  }\n\n  toString(): string {\n    return this.data.toString();\n  }\n\n  toUint8Array(): Uint8Array {\n    return this.data.toUint8Array();\n  }\n\n  /**\n   * Creates an AuthenticationKey from seed bytes and a scheme\n   *\n   * This allows for the creation of AuthenticationKeys that are not derived from Public Keys directly\n   * @param args\n   */\n  public static fromPublicKeyAndScheme(args: { publicKey: PublicKey; scheme: AuthenticationKeyScheme }) {\n    const { publicKey, scheme } = args;\n    let authKeyBytes: Uint8Array;\n\n    switch (scheme) {\n      case SigningScheme.MultiKey:\n      case SigningScheme.SingleKey: {\n        const singleKeyBytes = publicKey.bcsToBytes();\n        authKeyBytes = new Uint8Array([...singleKeyBytes, scheme]);\n        break;\n      }\n\n      case SigningScheme.Ed25519:\n      case SigningScheme.MultiEd25519: {\n        const ed25519PublicKeyBytes = publicKey.toUint8Array();\n        const inputBytes = Hex.fromHexInput(ed25519PublicKeyBytes).toUint8Array();\n        authKeyBytes = new Uint8Array([...inputBytes, scheme]);\n        break;\n      }\n\n      default:\n        throw new Error(`Scheme ${scheme} is not supported`);\n    }\n\n    const hash = sha3Hash.create();\n    hash.update(authKeyBytes);\n    const hashDigest = hash.digest();\n    return new AuthenticationKey({ data: hashDigest });\n  }\n\n  /**\n   * Converts a PublicKey(s) to AuthenticationKey\n   *\n   * @param args.publicKey\n   * @returns AuthenticationKey\n   */\n  static fromPublicKey(args: { publicKey: PublicKey }): AuthenticationKey {\n    const { publicKey } = args;\n\n    let scheme: number;\n    if (publicKey instanceof Ed25519PublicKey) {\n      // for legacy support\n      scheme = SigningScheme.Ed25519.valueOf();\n    } else if (publicKey instanceof MultiEd25519PublicKey) {\n      // for legacy support\n      scheme = SigningScheme.MultiEd25519.valueOf();\n    } else if (publicKey instanceof AnyPublicKey) {\n      scheme = SigningScheme.SingleKey.valueOf();\n    } else if (publicKey instanceof MultiKey) {\n      scheme = SigningScheme.MultiKey.valueOf();\n    } else {\n      throw new Error(\"No supported authentication scheme for public key\");\n    }\n\n    return AuthenticationKey.fromPublicKeyAndScheme({ publicKey, scheme });\n  }\n\n  /**\n   * Derives an account address from AuthenticationKey. Since current AccountAddress is 32 bytes,\n   * AuthenticationKey bytes are directly translated to AccountAddress.\n   *\n   * @returns AccountAddress\n   */\n  derivedAddress(): AccountAddress {\n    return new AccountAddress({ data: this.data.toUint8Array() });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport nacl from \"tweetnacl\";\nimport { PublicKey, PrivateKey, Signature } from \"./asymmetricCrypto\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializer } from \"../../bcs/serializer\";\nimport { Hex } from \"../hex\";\nimport { HexInput } from \"../../types\";\n\n/**\n * Represents the public key of an Ed25519 key pair.\n *\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263) Aptos supports\n * `Legacy` and `Unified` authentication keys.\n *\n * Ed25519 scheme is represented in the SDK as `Legacy authentication key` and also\n * as `AnyPublicKey` that represents any `Unified authentication key`\n */\nexport class Ed25519PublicKey extends PublicKey {\n  /**\n   * Length of an Ed25519 public key\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * Bytes of the public key\n   * @private\n   */\n  private readonly key: Hex;\n\n  /**\n   * Create a new PublicKey instance from a Uint8Array or String.\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const hex = Hex.fromHexInput(hexInput);\n    if (hex.toUint8Array().length !== Ed25519PublicKey.LENGTH) {\n      throw new Error(`PublicKey length should be ${Ed25519PublicKey.LENGTH}`);\n    }\n    this.key = hex;\n  }\n\n  /**\n   * Get the public key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the public key\n   */\n  toUint8Array(): Uint8Array {\n    return this.key.toUint8Array();\n  }\n\n  /**\n   * Get the public key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the public key\n   */\n  toString(): string {\n    return this.key.toString();\n  }\n\n  /**\n   * Verifies a signed data with a public key\n   * @param args.message a signed message\n   * @param args.signature the signature of the message\n   */\n  verifySignature(args: { message: HexInput; signature: Ed25519Signature }): boolean {\n    const { message, signature } = args;\n    const rawMessage = Hex.fromHexInput(message).toUint8Array();\n    const rawSignature = Hex.fromHexInput(signature.toUint8Array()).toUint8Array();\n    return nacl.sign.detached.verify(rawMessage, rawSignature, this.key.toUint8Array());\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.key.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519PublicKey(bytes);\n  }\n\n  static load(deserializer: Deserializer): Ed25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519PublicKey(bytes);\n  }\n}\n\n/**\n * Represents the private key of an Ed25519 key pair.\n */\nexport class Ed25519PrivateKey extends PrivateKey {\n  /**\n   * Length of an Ed25519 private key\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The Ed25519 signing key\n   * @private\n   */\n  private readonly signingKeyPair: nacl.SignKeyPair;\n\n  /**\n   * Create a new PrivateKey instance from a Uint8Array or String.\n   *\n   * @param hexInput HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const privateKeyHex = Hex.fromHexInput(hexInput);\n    if (privateKeyHex.toUint8Array().length !== Ed25519PrivateKey.LENGTH) {\n      throw new Error(`PrivateKey length should be ${Ed25519PrivateKey.LENGTH}`);\n    }\n\n    // Create keyPair from Private key in Uint8Array format\n    this.signingKeyPair = nacl.sign.keyPair.fromSeed(privateKeyHex.toUint8Array().slice(0, Ed25519PrivateKey.LENGTH));\n  }\n\n  /**\n   * Get the private key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the private key\n   */\n  toUint8Array(): Uint8Array {\n    return this.signingKeyPair.secretKey.slice(0, Ed25519PrivateKey.LENGTH);\n  }\n\n  /**\n   * Get the private key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the private key\n   */\n  toString(): string {\n    return Hex.fromHexInput(this.toUint8Array()).toString();\n  }\n\n  /**\n   * Sign the given message with the private key.\n   *\n   * @param message in HexInput format\n   * @returns Signature\n   */\n  sign(message: HexInput): Ed25519Signature {\n    const hex = Hex.fromHexInput(message);\n    const signature = nacl.sign.detached(hex.toUint8Array(), this.signingKeyPair.secretKey);\n    return new Ed25519Signature(signature);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519PrivateKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519PrivateKey(bytes);\n  }\n\n  /**\n   * Generate a new random private key.\n   *\n   * @returns Ed25519PrivateKey\n   */\n  static generate(): Ed25519PrivateKey {\n    const keyPair = nacl.sign.keyPair();\n    return new Ed25519PrivateKey(keyPair.secretKey.slice(0, Ed25519PrivateKey.LENGTH));\n  }\n\n  /**\n   * Derive the Ed25519PublicKey for this private key.\n   *\n   * @returns Ed25519PublicKey\n   */\n  publicKey(): Ed25519PublicKey {\n    const bytes = this.signingKeyPair.publicKey;\n    return new Ed25519PublicKey(bytes);\n  }\n}\n\n/**\n * A signature of a message signed using an Ed25519 private key\n */\nexport class Ed25519Signature extends Signature {\n  /**\n   * Length of an Ed25519 signature\n   */\n  static readonly LENGTH = 64;\n\n  /**\n   * The signature bytes\n   * @private\n   */\n  private readonly data: Hex;\n\n  constructor(hexInput: HexInput) {\n    super();\n    const hex = Hex.fromHexInput(hexInput);\n    if (hex.toUint8Array().length !== Ed25519Signature.LENGTH) {\n      throw new Error(`Signature length should be ${Ed25519Signature.LENGTH}`);\n    }\n\n    this.data = hex;\n  }\n\n  /**\n   * Get the signature in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the signature\n   */\n  toUint8Array(): Uint8Array {\n    return this.data.toUint8Array();\n  }\n\n  /**\n   * Get the signature as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the signature\n   */\n  toString(): string {\n    return this.data.toString();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.data.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Ed25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519Signature(bytes);\n  }\n\n  static load(deserializer: Deserializer): Ed25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    return new Ed25519Signature(bytes);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-bitwise */\nimport { MAX_U32_NUMBER } from \"./consts\";\nimport { Uint8, Uint16, Uint32, Uint64, Uint128, Uint256 } from \"../types\";\n\n/**\n * This interface exists to define Deserializable<T> inputs for functions that\n * deserialize a byte buffer into a type T.\n * It is not intended to be implemented or extended, because Typescript has no support\n * for static methods in interfaces.\n */\nexport interface Deserializable<T> {\n  deserialize(deserializer: Deserializer): T;\n}\n\nexport class Deserializer {\n  private buffer: ArrayBuffer;\n\n  private offset: number;\n\n  constructor(data: Uint8Array) {\n    // copies data to prevent outside mutation of buffer.\n    this.buffer = new ArrayBuffer(data.length);\n    new Uint8Array(this.buffer).set(data, 0);\n    this.offset = 0;\n  }\n\n  private read(length: number): ArrayBuffer {\n    if (this.offset + length > this.buffer.byteLength) {\n      throw new Error(\"Reached to the end of buffer\");\n    }\n\n    const bytes = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return bytes;\n  }\n\n  /**\n   * Deserializes a string. UTF8 string is supported. Reads the string's bytes length \"l\" first,\n   * and then reads \"l\" bytes of content. Decodes the byte array into a string.\n   *\n   * BCS layout for \"string\": string_length | string_content\n   * where string_length is a u32 integer encoded as a uleb128 integer, equal to the number of bytes in string_content.\n   *\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([8, 49, 50, 51, 52, 97, 98, 99, 100]));\n   * assert(deserializer.deserializeStr() === \"1234abcd\");\n   * ```\n   */\n  deserializeStr(): string {\n    const value = this.deserializeBytes();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(value);\n  }\n\n  /**\n   * Deserializes an array of bytes.\n   *\n   * BCS layout for \"bytes\": bytes_length | bytes\n   * where bytes_length is a u32 integer encoded as a uleb128 integer, equal to the length of the bytes array.\n   */\n  deserializeBytes(): Uint8Array {\n    const len = this.deserializeUleb128AsU32();\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes an array of bytes. The number of bytes to read is already known.\n   *\n   */\n  deserializeFixedBytes(len: number): Uint8Array {\n    return new Uint8Array(this.read(len));\n  }\n\n  /**\n   * Deserializes a boolean value.\n   *\n   * BCS layout for \"boolean\": One byte. \"0x01\" for true and \"0x00\" for false.\n   */\n  deserializeBool(): boolean {\n    const bool = new Uint8Array(this.read(1))[0];\n    if (bool !== 1 && bool !== 0) {\n      throw new Error(\"Invalid boolean value\");\n    }\n    return bool === 1;\n  }\n\n  /**\n   * Deserializes a uint8 number.\n   *\n   * BCS layout for \"uint8\": One byte. Binary format in little-endian representation.\n   */\n  deserializeU8(): Uint8 {\n    return new DataView(this.read(1)).getUint8(0);\n  }\n\n  /**\n   * Deserializes a uint16 number.\n   *\n   * BCS layout for \"uint16\": Two bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x34, 0x12]));\n   * assert(deserializer.deserializeU16() === 4660);\n   * ```\n   */\n  deserializeU16(): Uint16 {\n    return new DataView(this.read(2)).getUint16(0, true);\n  }\n\n  /**\n   * Deserializes a uint32 number.\n   *\n   * BCS layout for \"uint32\": Four bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU32() === 305419896);\n   * ```\n   */\n  deserializeU32(): Uint32 {\n    return new DataView(this.read(4)).getUint32(0, true);\n  }\n\n  /**\n   * Deserializes a uint64 number.\n   *\n   * BCS layout for \"uint64\": Eight bytes. Binary format in little-endian representation.\n   * @example\n   * ```ts\n   * const deserializer = new Deserializer(new Uint8Array([0x00, 0xEF, 0xCD, 0xAB, 0x78, 0x56, 0x34, 0x12]));\n   * assert(deserializer.deserializeU64() === 1311768467750121216);\n   * ```\n   */\n  deserializeU64(): Uint64 {\n    const low = this.deserializeU32();\n    const high = this.deserializeU32();\n\n    // combine the two 32-bit values and return (little endian)\n    return BigInt((BigInt(high) << BigInt(32)) | BigInt(low));\n  }\n\n  /**\n   * Deserializes a uint128 number.\n   *\n   * BCS layout for \"uint128\": Sixteen bytes. Binary format in little-endian representation.\n   */\n  deserializeU128(): Uint128 {\n    const low = this.deserializeU64();\n    const high = this.deserializeU64();\n\n    // combine the two 64-bit values and return (little endian)\n    return BigInt((high << BigInt(64)) | low);\n  }\n\n  /**\n   * Deserializes a uint256 number.\n   *\n   * BCS layout for \"uint256\": Thirty-two bytes. Binary format in little-endian representation.\n   */\n  deserializeU256(): Uint256 {\n    const low = this.deserializeU128();\n    const high = this.deserializeU128();\n\n    // combine the two 128-bit values and return (little endian)\n    return BigInt((high << BigInt(128)) | low);\n  }\n\n  /**\n   * Deserializes a uleb128 encoded uint32 number.\n   *\n   * BCS use uleb128 encoding in two cases: (1) lengths of variable-length sequences and (2) tags of enum values\n   */\n  deserializeUleb128AsU32(): Uint32 {\n    let value: bigint = BigInt(0);\n    let shift = 0;\n\n    while (value < MAX_U32_NUMBER) {\n      const byte = this.deserializeU8();\n      value |= BigInt(byte & 0x7f) << BigInt(shift);\n\n      if ((byte & 0x80) === 0) {\n        break;\n      }\n      shift += 7;\n    }\n\n    if (value > MAX_U32_NUMBER) {\n      throw new Error(\"Overflow while parsing uleb128-encoded uint32 value\");\n    }\n\n    return Number(value);\n  }\n\n  /**\n   * Helper function that primarily exists to support alternative syntax for deserialization.\n   * That is, if we have a `const deserializer: new Deserializer(...)`, instead of having to use\n   * `MyClass.deserialize(deserializer)`, we can call `deserializer.deserialize(MyClass)`.\n   *\n   * @example const deserializer = new Deserializer(new Uint8Array([1, 2, 3]));\n   * const value = deserializer.deserialize(MyClass); // where MyClass has a `deserialize` function\n   * // value is now an instance of MyClass\n   * // equivalent to `const value = MyClass.deserialize(deserializer)`\n   * @param cls The BCS-deserializable class to deserialize the buffered bytes into.\n   *\n   * @returns the deserialized value of class type T\n   */\n  deserialize<T>(cls: Deserializable<T>): T {\n    // NOTE: `deserialize` in `cls.deserialize(this)` here is a static method defined in `cls`,\n    // It is separate from the `deserialize` instance method defined here in Deserializer.\n    return cls.deserialize(this);\n  }\n\n  /**\n   * Deserializes an array of BCS Deserializable values given an existing Deserializer\n   * instance with a loaded byte buffer.\n   *\n   * @param cls The BCS-deserializable class to deserialize the buffered bytes into.\n   * @example\n   * // serialize a vector of addresses\n   * const addresses = new Array<AccountAddress>(\n   *   AccountAddress.fromHexInputRelaxed(\"0x1\"),\n   *   AccountAddress.fromHexInputRelaxed(\"0x2\"),\n   *   AccountAddress.fromHexInputRelaxed(\"0xa\"),\n   *   AccountAddress.fromHexInputRelaxed(\"0xb\"),\n   * );\n   * const serializer = new Serializer();\n   * serializer.serializeVector(addresses);\n   * const serializedBytes = serializer.toUint8Array();\n   *\n   * // deserialize the bytes into an array of addresses\n   * const deserializer = new Deserializer(serializedBytes);\n   * const deserializedAddresses = deserializer.deserializeVector(AccountAddress);\n   * // deserializedAddresses is now an array of AccountAddress instances\n   * @returns an array of deserialized values of type T\n   */\n  deserializeVector<T>(cls: Deserializable<T>): Array<T> {\n    const length = this.deserializeUleb128AsU32();\n    const vector = new Array<T>();\n    for (let i = 0; i < length; i += 1) {\n      vector.push(this.deserialize(cls));\n    }\n    return vector;\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../serializer\";\nimport { Deserializer } from \"../deserializer\";\nimport { HexInput } from \"../../types\";\nimport { Hex } from \"../../core/hex\";\nimport { TransactionArgument } from \"../../transactions/instances/transactionArgument\";\n\n/**\n *  This class exists to represent a contiguous sequence of already serialized BCS-bytes.\n *\n *  It differs from most other Serializable classes in that its internal byte buffer is serialized to BCS\n *  bytes exactly as-is, without prepending the length of the bytes.\n *\n *  If you want to write your own serialization function and pass the bytes as a transaction argument,\n *  you should use this class.\n *\n *  This class is also more generally used to represent type-agnostic BCS bytes as a vector<u8>.\n *\n *  An example of this is the bytes resulting from entry function arguments that have been serialized\n *  for an entry function.\n *\n *  @example\n *  const yourCustomSerializedBytes = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]);\n *  const fixedBytes = new FixedBytes(yourCustomSerializedBytes);\n *  const payload = await generateTransactionPayload({\n *    function: \"0xbeefcafe::your_module::your_function_that_requires_custom_serialization\",\n *    functionArguments: [yourCustomBytes],\n *  });\n *\n *  For example, if you store each of the 32 bytes for an address as a U8 in a MoveVector<U8>, when you\n *  serialize that MoveVector<U8>, it will be serialized to 33 bytes. If you solely want to pass around\n *  the 32 bytes as a Serializable class that *does not* prepend the length to the BCS-serialized representation,\n *  use this class.\n *\n * @params value: HexInput representing a sequence of Uint8 bytes\n * @returns a Serializable FixedBytes instance, which when serialized, does not prepend the length of the bytes\n * @see EntryFunctionBytes\n */\nexport class FixedBytes extends Serializable implements TransactionArgument {\n  public value: Uint8Array;\n\n  constructor(value: HexInput) {\n    super();\n    this.value = Hex.fromHexInput(value).toUint8Array();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeFixedBytes(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    serializer.serialize(this);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer, length: number): FixedBytes {\n    const bytes = deserializer.deserializeFixedBytes(length);\n    return new FixedBytes(bytes);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../serializer\";\nimport { Deserializer } from \"../deserializer\";\nimport { FixedBytes } from \"./fixedBytes\";\nimport { EntryFunctionArgument } from \"../../transactions/instances/transactionArgument\";\nimport { HexInput } from \"../../types\";\n\n/**\n * This class exists solely to represent a sequence of fixed bytes as a serialized entry function, because\n * serializing an entry function appends a prefix that's *only* used for entry function arguments.\n *\n * NOTE: Attempting to use this class for a serialized script function will result in erroneous\n * and unexpected behavior.\n *\n * If you wish to convert this class back to a TransactionArgument, you must know the type\n * of the argument beforehand, and use the appropriate class to deserialize the bytes within\n * an instance of this class.\n */\nexport class EntryFunctionBytes extends Serializable implements EntryFunctionArgument {\n  public readonly value: FixedBytes;\n\n  private constructor(value: HexInput) {\n    super();\n    this.value = new FixedBytes(value);\n  }\n\n  // Note that to see the Move, BCS-serialized representation of the underlying fixed byte vector,\n  // we must not serialize the length prefix.\n  //\n  // In other words, this class is only used to represent a sequence of bytes that are already\n  // BCS-serialized as a type. To represent those bytes accurately, the BCS-serialized form is the same exact\n  // representation.\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.value);\n  }\n\n  // When we serialize these bytes as an entry function argument, we need to\n  // serialize the length prefix. This essentially converts the underlying fixed byte vector to a type-agnostic\n  // byte vector to an `any` type.\n  // NOTE: This, and the lack of a `serializeForScriptFunction`, is the only meaningful difference between this\n  // class and FixedBytes.\n  serializeForEntryFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(this.value.value.length);\n    serializer.serialize(this);\n  }\n\n  /**\n   * The only way to create an instance of this class is to use this static method.\n   *\n   * This function should only be used when deserializing a sequence of EntryFunctionPayload arguments.\n   * @param deserializer the deserializer instance with the buffered bytes\n   * @param length the length of the bytes to deserialize\n   * @returns an instance of this class, which will now only be usable as an EntryFunctionArgument\n   */\n  static deserialize(deserializer: Deserializer, length: number): EntryFunctionBytes {\n    const fixedBytes = FixedBytes.deserialize(deserializer, length);\n    return new EntryFunctionBytes(fixedBytes.value);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  MAX_U128_BIG_INT,\n  MAX_U16_NUMBER,\n  MAX_U32_NUMBER,\n  MAX_U64_BIG_INT,\n  MAX_U8_NUMBER,\n  MAX_U256_BIG_INT,\n} from \"../consts\";\nimport { Deserializer } from \"../deserializer\";\nimport { Serializable, Serializer, ensureBoolean, validateNumberInRange } from \"../serializer\";\nimport { TransactionArgument } from \"../../transactions/instances/transactionArgument\";\nimport { AnyNumber, Uint16, Uint32, Uint8, ScriptTransactionArgumentVariants } from \"../../types\";\n\nexport class Bool extends Serializable implements TransactionArgument {\n  public readonly value: boolean;\n\n  constructor(value: boolean) {\n    super();\n    ensureBoolean(value);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBool(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.Bool);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): Bool {\n    return new Bool(deserializer.deserializeBool());\n  }\n}\n\nexport class U8 extends Serializable implements TransactionArgument {\n  public readonly value: Uint8;\n\n  constructor(value: Uint8) {\n    super();\n    validateNumberInRange(value, 0, MAX_U8_NUMBER);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U8);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U8 {\n    return new U8(deserializer.deserializeU8());\n  }\n}\n\nexport class U16 extends Serializable implements TransactionArgument {\n  public readonly value: Uint16;\n\n  constructor(value: Uint16) {\n    super();\n    validateNumberInRange(value, 0, MAX_U16_NUMBER);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU16(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U16);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U16 {\n    return new U16(deserializer.deserializeU16());\n  }\n}\n\nexport class U32 extends Serializable implements TransactionArgument {\n  public readonly value: Uint32;\n\n  constructor(value: Uint32) {\n    super();\n    validateNumberInRange(value, 0, MAX_U32_NUMBER);\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U32);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U32 {\n    return new U32(deserializer.deserializeU32());\n  }\n}\n\nexport class U64 extends Serializable implements TransactionArgument {\n  public readonly value: bigint;\n\n  constructor(value: AnyNumber) {\n    super();\n    validateNumberInRange(value, BigInt(0), MAX_U64_BIG_INT);\n    this.value = BigInt(value);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU64(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U64);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U64 {\n    return new U64(deserializer.deserializeU64());\n  }\n}\n\nexport class U128 extends Serializable implements TransactionArgument {\n  public readonly value: bigint;\n\n  constructor(value: AnyNumber) {\n    super();\n    validateNumberInRange(value, BigInt(0), MAX_U128_BIG_INT);\n    this.value = BigInt(value);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU128(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U128);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U128 {\n    return new U128(deserializer.deserializeU128());\n  }\n}\n\nexport class U256 extends Serializable implements TransactionArgument {\n  public readonly value: bigint;\n\n  constructor(value: AnyNumber) {\n    super();\n    validateNumberInRange(value, BigInt(0), MAX_U256_BIG_INT);\n    this.value = BigInt(value);\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU256(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U256);\n    serializer.serialize(this);\n  }\n\n  static deserialize(deserializer: Deserializer): U256 {\n    return new U256(deserializer.deserializeU256());\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Bool, U128, U16, U256, U32, U64, U8 } from \"./movePrimitives\";\nimport { Serializable, Serializer } from \"../serializer\";\nimport { Deserializable, Deserializer } from \"../deserializer\";\nimport { AnyNumber, HexInput, ScriptTransactionArgumentVariants } from \"../../types\";\nimport { Hex } from \"../../core/hex\";\nimport { EntryFunctionArgument, TransactionArgument } from \"../../transactions/instances/transactionArgument\";\n\n/**\n * This class is the Aptos Typescript SDK representation of a Move `vector<T>`,\n * where `T` represents either a primitive type (`bool`, `u8`, `u64`, ...)\n * or a BCS-serializable struct itself.\n *\n * It is a BCS-serializable, array-like type that contains an array of values of type `T`,\n * where `T` is a class that implements `Serializable`.\n *\n * The purpose of this class is to facilitate easy construction of BCS-serializable\n * Move `vector<T>` types.\n *\n * @example\n * // in Move: `vector<u8> [1, 2, 3, 4];`\n * const vecOfU8s = new MoveVector<U8>([new U8(1), new U8(2), new U8(3), new U8(4)]);\n * // in Move: `std::bcs::to_bytes(vector<u8> [1, 2, 3, 4]);`\n * const bcsBytes = vecOfU8s.toUint8Array();\n *\n * // vector<vector<u8>> [ vector<u8> [1], vector<u8> [1, 2, 3, 4], vector<u8> [5, 6, 7, 8] ];\n * const vecOfVecs = new MoveVector<MoveVector<U8>>([\n *   new MoveVector<U8>([new U8(1)]),\n *   MoveVector.U8([1, 2, 3, 4]),\n *   MoveVector.U8([5, 6, 7, 8]),\n * ]);\n *\n * // vector<Option<u8>> [ std::option::some<u8>(1), std::option::some<u8>(2) ];\n * const vecOfOptionU8s = new MoveVector<MoveOption<U8>>([\n *    MoveOption.U8(1),\n *    MoveOption.U8(2),\n * ]);\n *\n * // vector<MoveString> [ std::string::utf8(b\"hello\"), std::string::utf8(b\"world\") ];\n * const vecOfStrings = new MoveVector([new MoveString(\"hello\"), new MoveString(\"world\")]);\n * const vecOfStrings2 = MoveVector.MoveString([\"hello\", \"world\"]);\n *\n * // where MySerializableStruct is a class you've made that implements Serializable\n * const vecOfSerializableValues = new MoveVector<MySerializableStruct>([\n *   new MySerializableStruct(\"hello\", \"world\"),\n *   new MySerializableStruct(\"foo\", \"bar\"),\n * ]);\n * @params\n * values: an Array<T> of values where T is a class that implements Serializable\n * @returns a `MoveVector<T>` with the values `values`\n */\nexport class MoveVector<T extends Serializable & EntryFunctionArgument>\n  extends Serializable\n  implements TransactionArgument\n{\n  public values: Array<T>;\n\n  constructor(values: Array<T>) {\n    super();\n    this.values = values;\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  /**\n   * NOTE: This function will only work when the inner values in the `MoveVector` are `U8`s.\n   * @param serializer\n   */\n  serializeForScriptFunction(serializer: Serializer): void {\n    // runtime check to ensure that you can't serialize anything other than vector<u8>\n    // TODO: consider adding support for MoveString later?\n    const isU8 = this.values[0] instanceof U8;\n    if (!isU8) {\n      throw new Error(\"Script function arguments only accept u8 vectors\");\n    }\n    serializer.serializeU32AsUleb128(ScriptTransactionArgumentVariants.U8Vector);\n    serializer.serialize(this);\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U8s from an array of numbers.\n   *\n   * @example\n   * const v = MoveVector.U8([1, 2, 3, 4]);\n   * @params values: an array of `numbers` to convert to U8s\n   * @returns a `MoveVector<U8>`\n   */\n  static U8(values: Array<number> | HexInput): MoveVector<U8> {\n    let numbers: Array<number>;\n\n    if (Array.isArray(values) && typeof values[0] === \"number\") {\n      numbers = values;\n    } else if (typeof values === \"string\") {\n      const hex = Hex.fromHexInput(values);\n      numbers = Array.from(hex.toUint8Array());\n    } else if (values instanceof Uint8Array) {\n      numbers = Array.from(values);\n    } else {\n      throw new Error(\"Invalid input type\");\n    }\n\n    return new MoveVector<U8>(numbers.map((v) => new U8(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U16s from an array of numbers.\n   *\n   * @example\n   * const v = MoveVector.U16([1, 2, 3, 4]);\n   * @params values: an array of `numbers` to convert to U16s\n   * @returns a `MoveVector<U16>`\n   */\n  static U16(values: Array<number>): MoveVector<U16> {\n    return new MoveVector<U16>(values.map((v) => new U16(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U32s from an array of numbers.\n   *\n   * @example\n   * const v = MoveVector.U32([1, 2, 3, 4]);\n   * @params values: an array of `numbers` to convert to U32s\n   * @returns a `MoveVector<U32>`\n   */\n  static U32(values: Array<number>): MoveVector<U32> {\n    return new MoveVector<U32>(values.map((v) => new U32(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U64s from an array of numbers or bigints.\n   *\n   * @example\n   * const v = MoveVector.U64([1, 2, 3, 4]);\n   * @params values: an array of numbers of type `number | bigint` to convert to U64s\n   * @returns a `MoveVector<U64>`\n   */\n  static U64(values: Array<AnyNumber>): MoveVector<U64> {\n    return new MoveVector<U64>(values.map((v) => new U64(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U128s from an array of numbers or bigints.\n   *\n   * @example\n   * const v = MoveVector.U128([1, 2, 3, 4]);\n   * @params values: an array of numbers of type `number | bigint` to convert to U128s\n   * @returns a `MoveVector<U128>`\n   */\n  static U128(values: Array<AnyNumber>): MoveVector<U128> {\n    return new MoveVector<U128>(values.map((v) => new U128(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of U256s from an array of numbers or bigints.\n   *\n   * @example\n   * const v = MoveVector.U256([1, 2, 3, 4]);\n   * @params values: an array of numbers of type `number | bigint` to convert to U256s\n   * @returns a `MoveVector<U256>`\n   */\n  static U256(values: Array<AnyNumber>): MoveVector<U256> {\n    return new MoveVector<U256>(values.map((v) => new U256(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of Bools from an array of booleans.\n   *\n   * @example\n   * const v = MoveVector.Bool([true, false, true, false]);\n   * @params values: an array of `numbers` to convert to Bools\n   * @returns a `MoveVector<Bool>`\n   */\n  static Bool(values: Array<boolean>): MoveVector<Bool> {\n    return new MoveVector<Bool>(values.map((v) => new Bool(v)));\n  }\n\n  /**\n   * Factory method to generate a MoveVector of MoveStrings from an array of strings.\n   *\n   * @example\n   * const v = MoveVector.MoveString([\"hello\", \"world\"]);\n   * @params values: an array of `numbers` to convert to MoveStrings\n   * @returns a `MoveVector<MoveString>`\n   */\n  static MoveString(values: Array<string>): MoveVector<MoveString> {\n    return new MoveVector<MoveString>(values.map((v) => new MoveString(v)));\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeVector(this.values);\n  }\n\n  /**\n   * Deserialize a MoveVector of type T, specifically where T is a Serializable and Deserializable type.\n   *\n   * NOTE: This only works with a depth of one. Generics will not work.\n   *\n   * NOTE: This will not work with types that aren't of the Serializable class.\n   *\n   * If you want to use types that merely implement Deserializable,\n   * please use the deserializeVector function in the Deserializer class.\n   * @example\n   * const vec = MoveVector.deserialize(deserializer, U64);\n   * @params deserializer: the Deserializer instance to use, with bytes loaded into it already.\n   * cls: the class to typecast the input values to, must be a Serializable and Deserializable type.\n   * @returns a MoveVector of the corresponding class T\n   * *\n   */\n  static deserialize<T extends Serializable & EntryFunctionArgument>(\n    deserializer: Deserializer,\n    cls: Deserializable<T>,\n  ): MoveVector<T> {\n    const length = deserializer.deserializeUleb128AsU32();\n    const values = new Array<T>();\n    for (let i = 0; i < length; i += 1) {\n      values.push(cls.deserialize(deserializer));\n    }\n    return new MoveVector(values);\n  }\n}\n\nexport class MoveString extends Serializable implements TransactionArgument {\n  public value: string;\n\n  constructor(value: string) {\n    super();\n    this.value = value;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.value);\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  serializeForScriptFunction(serializer: Serializer): void {\n    // serialize the string, load it into a vector<u8> and serialize it as a script vector<u8> argument\n    const vectorU8 = MoveVector.U8(this.bcsToBytes());\n    vectorU8.serializeForScriptFunction(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): MoveString {\n    return new MoveString(deserializer.deserializeStr());\n  }\n}\n\nexport class MoveOption<T extends Serializable & EntryFunctionArgument>\n  extends Serializable\n  implements EntryFunctionArgument\n{\n  private vec: MoveVector<T>;\n\n  public readonly value?: T;\n\n  constructor(value?: T | null) {\n    super();\n    if (typeof value !== \"undefined\" && value !== null) {\n      this.vec = new MoveVector([value]);\n    } else {\n      this.vec = new MoveVector([]);\n    }\n\n    [this.value] = this.vec.values;\n  }\n\n  serializeForEntryFunction(serializer: Serializer): void {\n    const bcsBytes = this.bcsToBytes();\n    serializer.serializeBytes(bcsBytes);\n  }\n\n  /**\n   * Retrieves the inner value of the MoveOption.\n   *\n   * This method is inspired by Rust's `Option<T>.unwrap()`.\n   * In Rust, attempting to unwrap a `None` value results in a panic.\n   *\n   * Similarly, this method will throw an error if the value is not present.\n   *\n   * @example\n   * const option = new MoveOption<Bool>(new Bool(true));\n   * const value = option.unwrap();  // Returns the Bool instance\n   *\n   * @throws {Error} Throws an error if the MoveOption does not contain a value.\n   *\n   * @returns {T} The contained value if present.\n   */\n  unwrap(): T {\n    if (!this.isSome()) {\n      throw new Error(\"Called unwrap on a MoveOption with no value\");\n    } else {\n      return this.vec.values[0];\n    }\n  }\n\n  // Check if the MoveOption has a value.\n  isSome(): boolean {\n    return this.vec.values.length === 1;\n  }\n\n  serialize(serializer: Serializer): void {\n    // serialize 0 or 1\n    // if 1, serialize the value\n    this.vec.serialize(serializer);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U8> from a `number` or `undefined`.\n   *\n   * @example\n   * MoveOption.U8(1).isSome() === true;\n   * MoveOption.U8().isSome() === false;\n   * MoveOption.U8(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U8> with an inner value `value`\n   */\n  static U8(value?: number | null): MoveOption<U8> {\n    return new MoveOption<U8>(value !== null && value !== undefined ? new U8(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U16> from a `number` or `undefined`.\n   *\n   * @example\n   * MoveOption.U16(1).isSome() === true;\n   * MoveOption.U16().isSome() === false;\n   * MoveOption.U16(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U16> with an inner value `value`\n   */\n  static U16(value?: number | null): MoveOption<U16> {\n    return new MoveOption<U16>(value !== null && value !== undefined ? new U16(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U32> from a `number` or `undefined`.\n   *\n   * @example\n   * MoveOption.U32(1).isSome() === true;\n   * MoveOption.U32().isSome() === false;\n   * MoveOption.U32(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U32> with an inner value `value`\n   */\n  static U32(value?: number | null): MoveOption<U32> {\n    return new MoveOption<U32>(value !== null && value !== undefined ? new U32(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U64> from a `number` or a `bigint` or `undefined`.\n   *\n   * @example\n   * MoveOption.U64(1).isSome() === true;\n   * MoveOption.U64().isSome() === false;\n   * MoveOption.U64(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U64> with an inner value `value`\n   */\n  static U64(value?: AnyNumber | null): MoveOption<U64> {\n    return new MoveOption<U64>(value !== null && value !== undefined ? new U64(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U128> from a `number` or a `bigint` or `undefined`.\n   *\n   * @example\n   * MoveOption.U128(1).isSome() === true;\n   * MoveOption.U128().isSome() === false;\n   * MoveOption.U128(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U128> with an inner value `value`\n   */\n  static U128(value?: AnyNumber | null): MoveOption<U128> {\n    return new MoveOption<U128>(value !== null && value !== undefined ? new U128(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<U256> from a `number` or a `bigint` or `undefined`.\n   *\n   * @example\n   * MoveOption.U256(1).isSome() === true;\n   * MoveOption.U256().isSome() === false;\n   * MoveOption.U256(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<U256> with an inner value `value`\n   */\n  static U256(value?: AnyNumber | null): MoveOption<U256> {\n    return new MoveOption<U256>(value !== null && value !== undefined ? new U256(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<Bool> from a `boolean` or `undefined`.\n   *\n   * @example\n   * MoveOption.Bool(true).isSome() === true;\n   * MoveOption.Bool().isSome() === false;\n   * MoveOption.Bool(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<Bool> with an inner value `value`\n   */\n  static Bool(value?: boolean | null): MoveOption<Bool> {\n    return new MoveOption<Bool>(value !== null && value !== undefined ? new Bool(value) : undefined);\n  }\n\n  /**\n   * Factory method to generate a MoveOption<MoveString> from a `string` or `undefined`.\n   *\n   * @example\n   * MoveOption.MoveString(\"hello\").isSome() === true;\n   * MoveOption.MoveString(\"\").isSome() === true;\n   * MoveOption.MoveString().isSome() === false;\n   * MoveOption.MoveString(undefined).isSome() === false;\n   * @params value: the value used to fill the MoveOption. If `value` is undefined\n   * the resulting MoveOption's .isSome() method will return false.\n   * @returns a MoveOption<MoveString> with an inner value `value`\n   */\n  static MoveString(value?: string | null): MoveOption<MoveString> {\n    return new MoveOption<MoveString>(value !== null && value !== undefined ? new MoveString(value) : undefined);\n  }\n\n  static deserialize<U extends Serializable & EntryFunctionArgument>(\n    deserializer: Deserializer,\n    cls: Deserializable<U>,\n  ): MoveOption<U> {\n    const vector = MoveVector.deserialize(deserializer, cls);\n    return new MoveOption(vector.values[0]);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializable, Serializer } from \"../../bcs\";\nimport { HexInput } from \"../../types\";\n\n/**\n * An abstract representation of a public key.  All Asymmetric key pairs will use this to\n * verify signatures and for authentication keys.\n */\nexport abstract class PublicKey extends Serializable {\n  /**\n   * Verifies that the private key associated with this public key signed the message with the given signature.\n   * @param args.message The message that was signed\n   * @param args.signature The signature to verify\n   */\n  abstract verifySignature(args: { message: HexInput; signature: Signature }): boolean;\n\n  /**\n   * Get the raw public key bytes\n   */\n  abstract toUint8Array(): Uint8Array;\n\n  /**\n   * Get the public key as a hex string with a 0x prefix e.g. 0x123456...\n   */\n  abstract toString(): string;\n\n  abstract serialize(serializer: Serializer): void;\n}\n\n/**\n * An abstract representation of a private key.  This is used to sign transactions and\n * derive the public key associated.\n */\nexport abstract class PrivateKey extends Serializable {\n  /**\n   * Sign a message with the key\n   * @param message The message to sign\n   */\n  abstract sign(message: HexInput): Signature;\n\n  /**\n   * Get the raw private key bytes\n   */\n  abstract toUint8Array(): Uint8Array;\n\n  /**\n   * Get the private key as a hex string with a 0x prefix e.g. 0x123456...\n   */\n  abstract toString(): string;\n\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Derives the public key associated with the private key\n   */\n  abstract publicKey(): PublicKey;\n}\n\n/**\n * An abstract representation of a signature.  This is the product of signing a\n * message and can be used with the PublicKey to verify the signature.\n */\nexport abstract class Signature extends Serializable {\n  /**\n   * Get the raw signature bytes\n   */\n  abstract toUint8Array(): Uint8Array;\n\n  /**\n   * Get the signature as a hex string with a 0x prefix e.g. 0x123456...\n   */\n  abstract toString(): string;\n\n  abstract serialize(serializer: Serializer): void;\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { PublicKey, Signature } from \"./asymmetricCrypto\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializer } from \"../../bcs/serializer\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"./ed25519\";\nimport { Hex } from \"../hex\";\nimport { HexInput } from \"../../types\";\n\n/**\n * Represents the public key of a K-of-N Ed25519 multi-sig transaction.\n */\nexport class MultiEd25519PublicKey extends PublicKey {\n  /**\n   * Maximum number of public keys supported\n   */\n  static readonly MAX_KEYS = 32;\n\n  /**\n   * Minimum number of public keys needed\n   */\n  static readonly MIN_KEYS = 2;\n\n  /**\n   * Minimum threshold for the number of valid signatures required\n   */\n  static readonly MIN_THRESHOLD = 1;\n\n  /**\n   * List of Ed25519 public keys for this MultiEd25519PublicKey\n   */\n  public readonly publicKeys: Ed25519PublicKey[];\n\n  /**\n   * The minimum number of valid signatures required, for the number of public keys specified\n   */\n  public readonly threshold: number;\n\n  /**\n   * Public key for a K-of-N multi-sig transaction. A K-of-N multi-sig transaction means that for such a\n   * transaction to be executed, at least K out of the N authorized signers have signed the transaction\n   * and passed the check conducted by the chain.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/ | Creating a Signed Transaction}\n   *\n   * @param args.publicKeys A list of public keys\n   * @param args.threshold At least \"threshold\" signatures must be valid\n   */\n  constructor(args: { publicKeys: Ed25519PublicKey[]; threshold: number }) {\n    super();\n\n    const { publicKeys, threshold } = args;\n\n    // Validate number of public keys\n    if (publicKeys.length > MultiEd25519PublicKey.MAX_KEYS || publicKeys.length < MultiEd25519PublicKey.MIN_KEYS) {\n      throw new Error(\n        `Must have between ${MultiEd25519PublicKey.MIN_KEYS} and ${MultiEd25519PublicKey.MAX_KEYS} public keys, inclusive`,\n      );\n    }\n\n    // Validate threshold: must be between 1 and the number of public keys, inclusive\n    if (threshold < MultiEd25519PublicKey.MIN_THRESHOLD || threshold > publicKeys.length) {\n      throw new Error(\n        `Threshold must be between ${MultiEd25519PublicKey.MIN_THRESHOLD} and ${publicKeys.length}, inclusive`,\n      );\n    }\n\n    this.publicKeys = publicKeys;\n    this.threshold = threshold;\n  }\n\n  /**\n   * Converts a PublicKeys into Uint8Array (bytes) with: bytes = p1_bytes | ... | pn_bytes | threshold\n   */\n  toUint8Array(): Uint8Array {\n    const bytes = new Uint8Array(this.publicKeys.length * Ed25519PublicKey.LENGTH + 1);\n    this.publicKeys.forEach((k: Ed25519PublicKey, i: number) => {\n      bytes.set(k.toUint8Array(), i * Ed25519PublicKey.LENGTH);\n    });\n\n    bytes[this.publicKeys.length * Ed25519PublicKey.LENGTH] = this.threshold;\n\n    return bytes;\n  }\n\n  toString(): string {\n    return Hex.fromHexInput(this.toUint8Array()).toString();\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  verifySignature(args: { message: HexInput; signature: MultiEd25519Signature }): boolean {\n    throw new Error(\"TODO - Method not implemented.\");\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    const threshold = bytes[bytes.length - 1];\n\n    const keys: Ed25519PublicKey[] = [];\n\n    for (let i = 0; i < bytes.length - 1; i += Ed25519PublicKey.LENGTH) {\n      const begin = i;\n      keys.push(new Ed25519PublicKey(bytes.subarray(begin, begin + Ed25519PublicKey.LENGTH)));\n    }\n    return new MultiEd25519PublicKey({ publicKeys: keys, threshold });\n  }\n}\n\n/**\n * Represents the signature of a K-of-N Ed25519 multi-sig transaction.\n */\nexport class MultiEd25519Signature extends Signature {\n  /**\n   * Maximum number of Ed25519 signatures supported\n   */\n  static MAX_SIGNATURES_SUPPORTED = 32;\n\n  /**\n   * Number of bytes in the bitmap representing who signed the transaction (32-bits)\n   */\n  static BITMAP_LEN: number = 4;\n\n  /**\n   * The list of underlying Ed25519 signatures\n   */\n  public readonly signatures: Ed25519Signature[];\n\n  /**\n   * 32-bit Bitmap representing who signed the transaction\n   *\n   * This is represented where each public key can be masked to determine whether the message was signed by that key.\n   */\n  public readonly bitmap: Uint8Array;\n\n  /**\n   * Signature for a K-of-N multi-sig transaction.\n   *\n   * @see {@link\n   * https://aptos.dev/integration/creating-a-signed-transaction/#multisignature-transactions | Creating a Signed Transaction}\n   *\n   * @param args.signatures A list of signatures\n   * @param args.bitmap 4 bytes, at most 32 signatures are supported. If Nth bit value is `1`, the Nth\n   * signature should be provided in `signatures`. Bits are read from left to right\n   */\n  constructor(args: { signatures: Ed25519Signature[]; bitmap: Uint8Array }) {\n    super();\n\n    const { signatures, bitmap } = args;\n    if (bitmap.length !== MultiEd25519Signature.BITMAP_LEN) {\n      throw new Error(`\"bitmap\" length should be ${MultiEd25519Signature.BITMAP_LEN}`);\n    }\n\n    if (signatures.length > MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED) {\n      throw new Error(\n        `The number of signatures cannot be greater than ${MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED}`,\n      );\n    }\n\n    this.signatures = signatures;\n    this.bitmap = bitmap;\n  }\n\n  /**\n   * Converts a MultiSignature into Uint8Array (bytes) with `bytes = s1_bytes | ... | sn_bytes | bitmap`\n   */\n  toUint8Array(): Uint8Array {\n    const bytes = new Uint8Array(this.signatures.length * Ed25519Signature.LENGTH + MultiEd25519Signature.BITMAP_LEN);\n    this.signatures.forEach((k: Ed25519Signature, i: number) => {\n      bytes.set(k.toUint8Array(), i * Ed25519Signature.LENGTH);\n    });\n\n    bytes.set(this.bitmap, this.signatures.length * Ed25519Signature.LENGTH);\n\n    return bytes;\n  }\n\n  toString(): string {\n    return Hex.fromHexInput(this.toUint8Array()).toString();\n  }\n\n  /**\n   * Helper method to create a bitmap out of the specified bit positions\n   * @param args.bits The bitmap positions that should be set. A position starts at index 0.\n   * Valid position should range between 0 and 31.\n   * @example\n   * Here's an example of valid `bits`\n   * ```\n   * [0, 2, 31]\n   * ```\n   * `[0, 2, 31]` means the 1st, 3rd and 32nd bits should be set in the bitmap.\n   * The result bitmap should be 0b1010000000000000000000000000001\n   *\n   * @returns bitmap that is 32bit long\n   */\n  static createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number) => {\n      if (bit >= MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED) {\n        throw new Error(`Cannot have a signature larger than ${MultiEd25519Signature.MAX_SIGNATURES_SUPPORTED - 1}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(\"Duplicate bits detected.\");\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): MultiEd25519Signature {\n    const bytes = deserializer.deserializeBytes();\n    const bitmap = bytes.subarray(bytes.length - 4);\n\n    const signatures: Ed25519Signature[] = [];\n\n    for (let i = 0; i < bytes.length - bitmap.length; i += Ed25519Signature.LENGTH) {\n      const begin = i;\n      signatures.push(new Ed25519Signature(bytes.subarray(begin, begin + Ed25519Signature.LENGTH)));\n    }\n    return new MultiEd25519Signature({ signatures, bitmap });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { sha3_256 } from \"@noble/hashes/sha3\";\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { PrivateKey, PublicKey, Signature } from \"./asymmetricCrypto\";\nimport { Deserializer, Serializer } from \"../../bcs\";\nimport { Hex } from \"../hex\";\nimport { HexInput } from \"../../types\";\n\n/**\n * Represents the Secp256k1 ecdsa public key\n *\n * Secp256k1 authentication key is represented in the SDK as `AnyPublicKey`.\n */\nexport class Secp256k1PublicKey extends PublicKey {\n  // Secp256k1 ecdsa public keys contain a prefix indicating compression and two 32-byte coordinates.\n  static readonly LENGTH: number = 65;\n\n  // Hex value of the public key\n  private readonly key: Hex;\n\n  /**\n   * Create a new PublicKey instance from a Uint8Array or String.\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const hex = Hex.fromHexInput(hexInput);\n    if (hex.toUint8Array().length !== Secp256k1PublicKey.LENGTH) {\n      throw new Error(`PublicKey length should be ${Secp256k1PublicKey.LENGTH}`);\n    }\n    this.key = hex;\n  }\n\n  /**\n   * Get the public key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the public key\n   */\n  toUint8Array(): Uint8Array {\n    return this.key.toUint8Array();\n  }\n\n  /**\n   * Get the public key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the public key\n   */\n  toString(): string {\n    return this.key.toString();\n  }\n\n  /**\n   * Verifies a signed data with a public key\n   *\n   * @param args.message message\n   * @param args.signature The signature\n   * @returns true if the signature is valid\n   */\n  verifySignature(args: { message: HexInput; signature: Secp256k1Signature }): boolean {\n    const { message, signature } = args;\n    const msgHex = Hex.fromHexInput(message).toUint8Array();\n    const sha3Message = sha3_256(msgHex);\n    const rawSignature = signature.toUint8Array();\n    return secp256k1.verify(rawSignature, sha3Message, this.toUint8Array());\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.key.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Secp256k1PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Secp256k1PublicKey(bytes);\n  }\n\n  static load(deserializer: Deserializer): Secp256k1PublicKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Secp256k1PublicKey(bytes);\n  }\n}\n\n/**\n * A Secp256k1 ecdsa private key\n */\nexport class Secp256k1PrivateKey extends PrivateKey {\n  /**\n   * Length of Secp256k1 ecdsa private key\n   */\n  static readonly LENGTH: number = 32;\n\n  /**\n   * The private key bytes\n   * @private\n   */\n  private readonly key: Hex;\n\n  /**\n   * Create a new PrivateKey instance from a Uint8Array or String.\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const privateKeyHex = Hex.fromHexInput(hexInput);\n    if (privateKeyHex.toUint8Array().length !== Secp256k1PrivateKey.LENGTH) {\n      throw new Error(`PrivateKey length should be ${Secp256k1PrivateKey.LENGTH}`);\n    }\n\n    this.key = privateKeyHex;\n  }\n\n  /**\n   * Get the private key in bytes (Uint8Array).\n   *\n   * @returns\n   */\n  toUint8Array(): Uint8Array {\n    return this.key.toUint8Array();\n  }\n\n  /**\n   * Get the private key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the private key\n   */\n  toString(): string {\n    return this.key.toString();\n  }\n\n  /**\n   * Sign the given message with the private key.\n   *\n   * @param message in HexInput format\n   * @returns Signature\n   */\n  sign(message: HexInput): Secp256k1Signature {\n    const msgHex = Hex.fromHexInput(message);\n    const sha3Message = sha3_256(msgHex.toUint8Array());\n    const signature = secp256k1.sign(sha3Message, this.key.toUint8Array());\n    return new Secp256k1Signature(signature.toCompactRawBytes());\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Secp256k1PrivateKey {\n    const bytes = deserializer.deserializeBytes();\n    return new Secp256k1PrivateKey(bytes);\n  }\n\n  /**\n   * Generate a new random private key.\n   *\n   * @returns Secp256k1PrivateKey\n   */\n  static generate(): Secp256k1PrivateKey {\n    const hexInput = secp256k1.utils.randomPrivateKey();\n    return new Secp256k1PrivateKey(hexInput);\n  }\n\n  /**\n   * Derive the Secp256k1PublicKey from this private key.\n   *\n   * @returns Secp256k1PublicKey\n   */\n  publicKey(): Secp256k1PublicKey {\n    const bytes = secp256k1.getPublicKey(this.key.toUint8Array(), false);\n    return new Secp256k1PublicKey(bytes);\n  }\n}\n\n/**\n * A signature of a message signed using an Secp256k1 ecdsa private key\n */\nexport class Secp256k1Signature extends Signature {\n  /**\n   * Secp256k1 ecdsa signatures are 256-bit.\n   */\n  static readonly LENGTH = 64;\n\n  /**\n   * The signature bytes\n   * @private\n   */\n  private readonly data: Hex;\n\n  /**\n   * Create a new Signature instance from a Uint8Array or String.\n   *\n   * @param hexInput A HexInput (string or Uint8Array)\n   */\n  constructor(hexInput: HexInput) {\n    super();\n\n    const hex = Hex.fromHexInput(hexInput);\n    if (hex.toUint8Array().length !== Secp256k1Signature.LENGTH) {\n      throw new Error(`Signature length should be ${Secp256k1Signature.LENGTH}, recieved ${hex.toUint8Array().length}`);\n    }\n    this.data = hex;\n  }\n\n  /**\n   * Get the signature in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the signature\n   */\n  toUint8Array(): Uint8Array {\n    return this.data.toUint8Array();\n  }\n\n  /**\n   * Get the signature as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the signature\n   */\n  toString(): string {\n    return this.data.toString();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.data.toUint8Array());\n  }\n\n  static deserialize(deserializer: Deserializer): Secp256k1Signature {\n    const hex = deserializer.deserializeBytes();\n    return new Secp256k1Signature(hex);\n  }\n\n  static load(deserializer: Deserializer): Secp256k1Signature {\n    const bytes = deserializer.deserializeBytes();\n    return new Secp256k1Signature(bytes);\n  }\n}\n", "import { Serializer, Deserializer } from \"../../bcs\";\nimport { AnyPublicKeyVariant, HexInput } from \"../../types\";\nimport { AnySignature } from \"./anySignature\";\nimport { PublicKey } from \"./asymmetricCrypto\";\nimport { Ed25519PublicKey } from \"./ed25519\";\nimport { Secp256k1PublicKey } from \"./secp256k1\";\n\n/**\n * Represents any public key supported by Aptos.\n *\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263) Aptos supports\n * `Legacy` and `Unified` authentication keys.\n *\n * Any unified authentication key is represented in the SDK as `AnyPublicKey`.\n */\nexport class AnyPublicKey extends PublicKey {\n  /**\n   * Reference to the inner public key\n   */\n  public readonly publicKey: PublicKey;\n\n  constructor(publicKey: PublicKey) {\n    super();\n    this.publicKey = publicKey;\n  }\n\n  /**\n   * Get the public key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the public key\n   */\n  toUint8Array(): Uint8Array {\n    return this.publicKey.toUint8Array();\n  }\n\n  /**\n   * Get the public key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the public key\n   */\n  toString(): string {\n    return this.publicKey.toString();\n  }\n\n  /**\n   * Verifies a signed data with a public key\n   *\n   * @param args.message message\n   * @param args.signature The signature\n   * @returns true if the signature is valid\n   */\n  verifySignature(args: { message: HexInput; signature: AnySignature }): boolean {\n    const { message, signature } = args;\n    return this.publicKey.verifySignature({ message, signature });\n  }\n\n  serialize(serializer: Serializer): void {\n    if (this.publicKey instanceof Ed25519PublicKey) {\n      serializer.serializeU32AsUleb128(AnyPublicKeyVariant.Ed25519);\n      this.publicKey.serialize(serializer);\n    } else if (this.publicKey instanceof Secp256k1PublicKey) {\n      serializer.serializeU32AsUleb128(AnyPublicKeyVariant.Secp256k1);\n      this.publicKey.serialize(serializer);\n    } else {\n      throw new Error(\"Unknown public key type\");\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): AnyPublicKey {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case AnyPublicKeyVariant.Ed25519:\n        return new AnyPublicKey(Ed25519PublicKey.load(deserializer));\n      case AnyPublicKeyVariant.Secp256k1:\n        return new AnyPublicKey(Secp256k1PublicKey.load(deserializer));\n      default:\n        throw new Error(`Unknown variant index for AnyPublicKey: ${index}`);\n    }\n  }\n}\n", "import { Hex } from \"../hex\";\nimport { HexInput } from \"../../types\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializer } from \"../../bcs/serializer\";\nimport { AnyPublicKey } from \"./anyPublicKey\";\nimport { AnySignature } from \"./anySignature\";\nimport { PublicKey } from \"./asymmetricCrypto\";\n\nexport class MultiKey extends PublicKey {\n  /**\n   * List of any public keys\n   */\n  public readonly publicKeys: AnyPublicKey[];\n\n  /**\n   * The minimum number of valid signatures required, for the number of public keys specified\n   */\n  public readonly signaturesRequired: number;\n\n  constructor(args: { publicKeys: PublicKey[]; signaturesRequired: number }) {\n    super();\n    const { publicKeys, signaturesRequired } = args;\n\n    // Validate number of public keys is greater than signature required\n    if (signaturesRequired < 1) {\n      throw new Error(\"The number of required signatures needs to be greater then 0\");\n    }\n\n    // Validate number of public keys is greater than signature required\n    if (publicKeys.length < signaturesRequired) {\n      throw new Error(\n        `Provided ${publicKeys.length} public keys is smaller than the ${signaturesRequired} required signatures`,\n      );\n    }\n\n    const keys: AnyPublicKey[] = [];\n    publicKeys.forEach((publicKey) => {\n      if (publicKey instanceof AnyPublicKey) {\n        keys.push(publicKey);\n      } else {\n        // if public key is instance of a legacy authentication key, i.e\n        // Legacy Ed25519, convert it into AnyPublicKey\n        keys.push(new AnyPublicKey(publicKey));\n      }\n    });\n\n    this.publicKeys = keys;\n    this.signaturesRequired = signaturesRequired;\n  }\n\n  toUint8Array(): Uint8Array {\n    return this.bcsToBytes();\n  }\n\n  /**\n   * Create a bitmap that holds the mapping from the original public keys\n   * to the signatures passed in\n   *\n   * @param args.bits array of the index mapping to the matching public keys\n   * @returns Uint8array bit map\n   */\n  createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number, idx: number) => {\n      if (idx + 1 > this.publicKeys.length) {\n        throw new Error(`Signature index ${idx + 1} is out of public keys range, ${this.publicKeys.length}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(`Duplicate bit ${bit} detected.`);\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  /**\n   * Hex string representation the multi key bytes\n   *\n   * @returns string\n   */\n  toString(): string {\n    return Hex.fromHexInput(this.toUint8Array()).toString();\n  }\n\n  // TODO\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  verifySignature(args: { message: HexInput; signature: AnySignature }): boolean {\n    throw new Error(\"not implemented\");\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeVector(this.publicKeys);\n    serializer.serializeU8(this.signaturesRequired);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiKey {\n    const keys = deserializer.deserializeVector(AnyPublicKey);\n    const signaturesRequired = deserializer.deserializeU8();\n\n    return new MultiKey({ publicKeys: keys, signaturesRequired });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport * as bip39 from \"@scure/bip39\";\n\nexport type DerivedKeys = {\n  key: Uint8Array;\n  chainCode: Uint8Array;\n};\n\n/**\n * Aptos derive path is 637\n *\n * See https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n */\nexport const APTOS_PATH_REGEX = /^m\\/44'\\/637'\\/[0-9]+'\\/[0-9]+'\\/[0-9]+'?$/;\n\n/**\n * A list of supported key types and associated seeds\n */\nexport enum KeyType {\n  ED25519 = \"ed25519 seed\",\n}\n\nconst HARDENED_OFFSET = 0x80000000;\n\nconst deriveKey = (hashSeed: Uint8Array | string, data: Uint8Array | string): DerivedKeys => {\n  const digest = hmac.create(sha512, hashSeed).update(data).digest();\n  return {\n    key: digest.slice(0, 32),\n    chainCode: digest.slice(32),\n  };\n};\n\n/**\n * Derive a child key from the private key\n * @param key\n * @param chainCode\n * @param index\n * @constructor\n */\nconst CKDPriv = ({ key, chainCode }: DerivedKeys, index: number): DerivedKeys => {\n  const buffer = new ArrayBuffer(4);\n  new DataView(buffer).setUint32(0, index);\n  const indexBytes = new Uint8Array(buffer);\n  const zero = new Uint8Array([0]);\n  const data = new Uint8Array([...zero, ...key, ...indexBytes]);\n\n  return deriveKey(chainCode, data);\n};\n\nconst removeApostrophes = (val: string): string => val.replace(\"'\", \"\");\n\n/**\n * Splits derive path into segments\n * @param path\n */\nconst splitPath = (path: string): Array<string> => path.split(\"/\").slice(1).map(removeApostrophes);\n\n/**\n * Checks if the BIP44 path is valid for Aptos\n * @param path the BIP44 path\n *\n * @returns true if the path is a valid Aptos path\n */\nexport const isValidPath = (path: string): boolean => {\n  if (!APTOS_PATH_REGEX.test(path)) {\n    return false;\n  }\n  return !splitPath(path).some(Number.isNaN as any);\n};\n\n/**\n * Normalizes the mnemonic by removing extra whitespace and making it lowercase\n * @param mnemonic the mnemonic seed phrase\n */\nconst mnemonicToSeed = (mnemonic: string): Uint8Array => {\n  const normalizedMnemonic = mnemonic\n    .trim()\n    .split(/\\s+/)\n    .map((part) => part.toLowerCase())\n    .join(\" \");\n  return bip39.mnemonicToSeedSync(normalizedMnemonic);\n};\n\n/**\n * Derives a private key from a mnemonic seed phrase.\n *\n * To derive multiple keys from the same phrase, change the path\n * @param keyType the key type seed used to derive keys\n * @param path the BIP44 path\n * @param seedPhrase the mnemonic seed phrase\n * @param offset the offset used for key derivation, defaults to [HARDENED_OFFSET]\n */\nexport const derivePrivateKeyFromMnemonic = (\n  keyType: KeyType,\n  path: string,\n  seedPhrase: string,\n  offset = HARDENED_OFFSET,\n): DerivedKeys => {\n  if (!isValidPath(path)) {\n    throw new Error(\"Invalid derivation path\");\n  }\n\n  // Derive the master key from the mnemonic\n  const { key, chainCode } = deriveKey(keyType, mnemonicToSeed(seedPhrase));\n  const segments = splitPath(path).map((el) => parseInt(el, 10));\n\n  // Derive the child key based on the path\n  return segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), { key, chainCode });\n};\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress } from \"./accountAddress\";\nimport { AuthenticationKey } from \"./authenticationKey\";\nimport { PrivateKey, PublicKey, Signature } from \"./crypto/asymmetricCrypto\";\nimport { Ed25519PrivateKey, Ed25519PublicKey } from \"./crypto/ed25519\";\nimport { MultiEd25519PublicKey } from \"./crypto/multiEd25519\";\nimport { Secp256k1PrivateKey, Secp256k1PublicKey } from \"./crypto/secp256k1\";\nimport { Hex } from \"./hex\";\nimport { GenerateAccount, HexInput, SigningScheme, SigningSchemeInput } from \"../types\";\nimport { derivePrivateKeyFromMnemonic, KeyType } from \"../utils/hdKey\";\nimport { AnyPublicKey } from \"./crypto/anyPublicKey\";\n\n/**\n * Class for creating and managing account on Aptos network\n *\n * Use this class to create accounts, sign transactions, and more.\n * Note: Creating an account instance does not create the account on-chain.\n *\n * Since [AIP-55](https://github.com/aptos-foundation/AIPs/pull/263) Aptos supports\n * `Legacy` and `Unified` authentications.\n *\n * @Legacy includes `ED25519` and `MultiED25519`\n * @Unified includes `SingleSender` and `MultiSender`, where currently\n * `SingleSender` supports `ED25519` and `Secp256k1`, and `MultiSender` supports\n * `MultiED25519`.\n *\n * In TypeScript SDK, we support all of these options\n * @generate default to generate Unified keys, with an optional `legacy` boolean argument\n * that lets you generate new keys conforming to the Legacy authentication.\n * @fromPrivateKey derives an account by a provided private key and address, with an optional\n * `legacy` boolean argument that lets you generate new keys conforming to the Legacy authentication.\n * @fromDerivationPath derives an account with bip44 path and mnemonics,\n *\n */\nexport class Account {\n  /**\n   * Public key associated with the account\n   */\n  readonly publicKey: PublicKey;\n\n  /**\n   * Private key associated with the account\n   */\n  readonly privateKey: PrivateKey;\n\n  /**\n   * Account address associated with the account\n   */\n  readonly accountAddress: AccountAddress;\n\n  /**\n   * Signing scheme used to sign transactions\n   */\n  readonly signingScheme: SigningScheme;\n\n  /**\n   * constructor for Account\n   *\n   * Need to update this to use the new crypto library if new schemes are added.\n   *\n   * @param args.privateKey PrivateKey - private key of the account\n   * @param args.address AccountAddress - address of the account\n   * @param args.legacy optional. If set to true, the keypair authentication keys will be derived with a Legacy scheme.\n   * Defaults to deriving an authentication key with a Unified scheme\n   *\n   * This method is private because it should only be called by the factory static methods.\n   * @returns Account\n   */\n  private constructor(args: { privateKey: PrivateKey; address: AccountAddress; legacy?: boolean }) {\n    const { privateKey, address, legacy } = args;\n\n    // Derive the public key from the private key\n    this.publicKey = privateKey.publicKey();\n\n    // Derive the signing scheme from the public key\n    if (this.publicKey instanceof Ed25519PublicKey) {\n      if (legacy) {\n        this.signingScheme = SigningScheme.Ed25519;\n      } else {\n        this.publicKey = new AnyPublicKey(this.publicKey);\n        this.signingScheme = SigningScheme.SingleKey;\n      }\n    } else if (this.publicKey instanceof MultiEd25519PublicKey) {\n      this.signingScheme = SigningScheme.MultiEd25519;\n    } else if (this.publicKey instanceof Secp256k1PublicKey) {\n      this.publicKey = new AnyPublicKey(this.publicKey);\n      this.signingScheme = SigningScheme.SingleKey;\n    } else {\n      throw new Error(\"Can not create new Account, unsupported public key type\");\n    }\n\n    this.privateKey = privateKey;\n    this.accountAddress = address;\n  }\n\n  /**\n   * Derives an account with random private key and address.\n   * Default generation is using the Unified flow with ED25519 key\n   *\n   * @param args optional. Unify GenerateAccount type for Legacy and Unified keys\n   *\n   * Account input type to generate an account using Legacy\n   * Ed25519 or MultiEd25519 keys or without a specified `scheme`.\n   * ```\n   * GenerateAccountWithLegacyKey = {\n   *  scheme?: SigningSchemeInput.Ed25519 | SigningSchemeInput.MultiEd25519;\n   *  legacy: true;\n   * };\n   * ```\n   *\n   * Account input type to generate an account using Unified\n   * Secp256k1Ecdsa key\n   * In this case `legacy` is always false\n   * ```\n   * GenerateAccountWithUnifiedKey = {\n   *  scheme: SigningSchemeInput.Secp256k1Ecdsa;\n   *  legacy?: false;\n   * };\n   * ```\n   *\n   * @returns Account with the given signing scheme\n   */\n  static generate(args?: GenerateAccount): Account {\n    let privateKey: PrivateKey;\n\n    switch (args?.scheme) {\n      case SigningSchemeInput.Secp256k1Ecdsa:\n        privateKey = Secp256k1PrivateKey.generate();\n        break;\n      default:\n        privateKey = Ed25519PrivateKey.generate();\n    }\n\n    let publicKey = privateKey.publicKey();\n    if (!args?.legacy) {\n      publicKey = new AnyPublicKey(privateKey.publicKey());\n    }\n\n    const address = new AccountAddress({\n      data: Account.authKey({\n        publicKey,\n      }).toUint8Array(),\n    });\n    return new Account({ privateKey, address, legacy: args?.legacy });\n  }\n\n  /**\n   * Instantiates an account given a private key and a specified account address.\n   * This is primarily used to instantiate an `Account` that has had its authentication key rotated.\n   *\n   * @param privateKey PrivateKey - private key of the account\n   * @param address The account address\n   * @param args.legacy optional. If set to true, the keypair authentication keys will be derived with a Legacy scheme.\n   * Defaults to deriving an authentication key with a Unified scheme\n   *\n   * @returns Account\n   */\n  static fromPrivateKeyAndAddress(args: {\n    privateKey: PrivateKey;\n    address: AccountAddress;\n    legacy?: boolean;\n  }): Account {\n    const { privateKey, address, legacy } = args;\n    return new Account({ privateKey, address, legacy });\n  }\n\n  /**\n   * Derives an account with bip44 path and mnemonics,\n   *\n   * @param args.path the BIP44 derive path (e.g. m/44'/637'/0'/0'/0')\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\n   * @param args.mnemonic the mnemonic seed phrase of the account\n   * @returns AptosAccount\n   */\n  static fromDerivationPath(args: { path: string; mnemonic: string }): Account {\n    const { path, mnemonic } = args;\n    const { key } = derivePrivateKeyFromMnemonic(KeyType.ED25519, path, mnemonic);\n    const privateKey = new Ed25519PrivateKey(key);\n    const publicKey = privateKey.publicKey();\n    const authKey = Account.authKey({ publicKey });\n    const address = new AccountAddress({ data: authKey.toUint8Array() });\n    return new Account({ privateKey, address, legacy: true });\n  }\n\n  /**\n   * This key enables account owners to rotate their private key(s)\n   * associated with the account without changing the address that hosts their account.\n   * See here for more info: {@link https://aptos.dev/concepts/accounts#single-signer-authentication}\n   *\n   * @param args.publicKey PublicKey - public key of the account\n   * @returns Authentication key for the associated account\n   */\n  static authKey(args: { publicKey: PublicKey }): Hex {\n    const { publicKey } = args;\n    const authKey = AuthenticationKey.fromPublicKey({ publicKey });\n    return authKey.data;\n  }\n\n  /**\n   * Sign the given message with the private key.\n   *\n   * TODO: Add sign transaction or specific types\n   *\n   * @param data in HexInput format\n   * @returns Signature\n   */\n  sign(data: HexInput): Signature {\n    return this.privateKey.sign(data);\n  }\n\n  /**\n   * Verify the given message and signature with the public key.\n   *\n   * @param args.message raw message data in HexInput format\n   * @param args.signature signed message Signature\n   * @returns\n   */\n  verifySignature(args: { message: HexInput; signature: Signature }): boolean {\n    const { message, signature } = args;\n    const rawMessage = Hex.fromHexInput(message).toUint8Array();\n    return this.publicKey.verifySignature({ message: rawMessage, signature });\n  }\n}\n", "import * as Types from \"./operations\";\n\nimport { GraphQLClient } from \"graphql-request\";\nimport * as Dom from \"graphql-request/dist/types.dom\";\nexport const CurrentTokenOwnershipFieldsFragmentDoc = `\n    fragment CurrentTokenOwnershipFields on current_token_ownerships_v2 {\n  token_standard\n  token_properties_mutated_v1\n  token_data_id\n  table_type_v1\n  storage_id\n  property_version_v1\n  owner_address\n  last_transaction_version\n  last_transaction_timestamp\n  is_soulbound_v2\n  is_fungible_v2\n  amount\n  current_token_data {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\nexport const TokenActivitiesFieldsFragmentDoc = `\n    fragment TokenActivitiesFields on token_activities_v2 {\n  after_value\n  before_value\n  entry_function_id_str\n  event_account_address\n  event_index\n  from_address\n  is_fungible_v2\n  property_version_v1\n  to_address\n  token_amount\n  token_data_id\n  token_standard\n  transaction_timestamp\n  transaction_version\n  type\n}\n    `;\nexport const GetAccountCoinsCount = `\n    query getAccountCoinsCount($address: String) {\n  current_fungible_asset_balances_aggregate(\n    where: {owner_address: {_eq: $address}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountCoinsData = `\n    query getAccountCoinsData($where_condition: current_fungible_asset_balances_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_fungible_asset_balances_order_by!]) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n    metadata {\n      token_standard\n      symbol\n      supply_aggregator_table_key_v1\n      supply_aggregator_table_handle_v1\n      project_uri\n      name\n      last_transaction_version\n      last_transaction_timestamp\n      icon_uri\n      decimals\n      creator_address\n      asset_type\n    }\n  }\n}\n    `;\nexport const GetAccountCollectionsWithOwnedTokens = `\n    query getAccountCollectionsWithOwnedTokens($where_condition: current_collection_ownership_v2_view_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collection_ownership_v2_view_order_by!]) {\n  current_collection_ownership_v2_view(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      mutable_description\n      max_supply\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n    collection_id\n    collection_name\n    collection_uri\n    creator_address\n    distinct_tokens\n    last_transaction_version\n    owner_address\n    single_token_uri\n  }\n}\n    `;\nexport const GetAccountOwnedObjects = `\n    query getAccountOwnedObjects($where_condition: current_objects_bool_exp, $offset: Int, $limit: Int, $order_by: [current_objects_order_by!]) {\n  current_objects(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    allow_ungated_transfer\n    state_key_hash\n    owner_address\n    object_address\n    last_transaction_version\n    last_guid_creation_num\n    is_deleted\n  }\n}\n    `;\nexport const GetAccountOwnedTokens = `\n    query getAccountOwnedTokens($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountOwnedTokensByTokenData = `\n    query getAccountOwnedTokensByTokenData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountOwnedTokensFromCollection = `\n    query getAccountOwnedTokensFromCollection($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetAccountTokensCount = `\n    query getAccountTokensCount($where_condition: current_token_ownerships_v2_bool_exp, $offset: Int, $limit: Int) {\n  current_token_ownerships_v2_aggregate(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetAccountTransactionsCount = `\n    query getAccountTransactionsCount($address: String) {\n  account_transactions_aggregate(where: {account_address: {_eq: $address}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    `;\nexport const GetChainTopUserTransactions = `\n    query getChainTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    `;\nexport const GetCollectionData = `\n    query getCollectionData($where_condition: current_collections_v2_bool_exp!) {\n  current_collections_v2(where: $where_condition) {\n    collection_id\n    collection_name\n    creator_address\n    current_supply\n    description\n    last_transaction_timestamp\n    last_transaction_version\n    max_supply\n    mutable_description\n    mutable_uri\n    table_handle_v1\n    token_standard\n    total_minted_v2\n    uri\n  }\n}\n    `;\nexport const GetCurrentFungibleAssetBalances = `\n    query getCurrentFungibleAssetBalances($where_condition: current_fungible_asset_balances_bool_exp, $offset: Int, $limit: Int) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n  }\n}\n    `;\nexport const GetDelegatedStakingActivities = `\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    `;\nexport const GetEvents = `\n    query getEvents($where_condition: events_bool_exp, $offset: Int, $limit: Int, $order_by: [events_order_by!]) {\n  events(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    account_address\n    creation_number\n    data\n    event_index\n    sequence_number\n    transaction_block_height\n    transaction_version\n    type\n  }\n}\n    `;\nexport const GetFungibleAssetActivities = `\n    query getFungibleAssetActivities($where_condition: fungible_asset_activities_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_activities(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    asset_type\n    block_height\n    entry_function_id_str\n    event_index\n    gas_fee_payer_address\n    is_frozen\n    is_gas_fee\n    is_transaction_success\n    owner_address\n    storage_id\n    storage_refund_amount\n    token_standard\n    transaction_timestamp\n    transaction_version\n    type\n  }\n}\n    `;\nexport const GetFungibleAssetMetadata = `\n    query getFungibleAssetMetadata($where_condition: fungible_asset_metadata_bool_exp, $offset: Int, $limit: Int) {\n  fungible_asset_metadata(where: $where_condition, offset: $offset, limit: $limit) {\n    icon_uri\n    project_uri\n    supply_aggregator_table_handle_v1\n    supply_aggregator_table_key_v1\n    creator_address\n    asset_type\n    decimals\n    last_transaction_timestamp\n    last_transaction_version\n    name\n    symbol\n    token_standard\n  }\n}\n    `;\nexport const GetNumberOfDelegators = `\n    query getNumberOfDelegators($where_condition: num_active_delegator_per_pool_bool_exp!, $order_by: [num_active_delegator_per_pool_order_by!]) {\n  num_active_delegator_per_pool(where: $where_condition, order_by: $order_by) {\n    num_active_delegator\n    pool_address\n  }\n}\n    `;\nexport const GetProcessorStatus = `\n    query getProcessorStatus {\n  processor_status {\n    last_success_version\n    processor\n    last_updated\n  }\n}\n    `;\nexport const GetTokenActivity = `\n    query getTokenActivity($where_condition: token_activities_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [token_activities_v2_order_by!]) {\n  token_activities_v2(\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n    limit: $limit\n  ) {\n    ...TokenActivitiesFields\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`;\nexport const GetCurrentTokenOwnership = `\n    query getCurrentTokenOwnership($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`;\nexport const GetTokenData = `\n    query getTokenData($where_condition: current_token_datas_v2_bool_exp, $offset: Int, $limit: Int, $order_by: [current_token_datas_v2_order_by!]) {\n  current_token_datas_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(\n  action: (requestHeaders?: Record<string, string>) => Promise<T>,\n  operationName: string,\n  operationType?: string,\n) => Promise<T>;\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getAccountCoinsCount(\n      variables?: Types.GetAccountCoinsCountQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetAccountCoinsCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCoinsCountQuery>(GetAccountCoinsCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountCoinsCount\",\n        \"query\",\n      );\n    },\n    getAccountCoinsData(\n      variables: Types.GetAccountCoinsDataQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetAccountCoinsDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCoinsDataQuery>(GetAccountCoinsData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountCoinsData\",\n        \"query\",\n      );\n    },\n    getAccountCollectionsWithOwnedTokens(\n      variables: Types.GetAccountCollectionsWithOwnedTokensQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetAccountCollectionsWithOwnedTokensQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountCollectionsWithOwnedTokensQuery>(\n            GetAccountCollectionsWithOwnedTokens,\n            variables,\n            { ...requestHeaders, ...wrappedRequestHeaders },\n          ),\n        \"getAccountCollectionsWithOwnedTokens\",\n        \"query\",\n      );\n    },\n    getAccountOwnedObjects(\n      variables?: Types.GetAccountOwnedObjectsQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetAccountOwnedObjectsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedObjectsQuery>(GetAccountOwnedObjects, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedObjects\",\n        \"query\",\n      );\n    },\n    getAccountOwnedTokens(\n      variables: Types.GetAccountOwnedTokensQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetAccountOwnedTokensQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensQuery>(GetAccountOwnedTokens, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedTokens\",\n        \"query\",\n      );\n    },\n    getAccountOwnedTokensByTokenData(\n      variables: Types.GetAccountOwnedTokensByTokenDataQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetAccountOwnedTokensByTokenDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensByTokenDataQuery>(GetAccountOwnedTokensByTokenData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountOwnedTokensByTokenData\",\n        \"query\",\n      );\n    },\n    getAccountOwnedTokensFromCollection(\n      variables: Types.GetAccountOwnedTokensFromCollectionQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetAccountOwnedTokensFromCollectionQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountOwnedTokensFromCollectionQuery>(\n            GetAccountOwnedTokensFromCollection,\n            variables,\n            { ...requestHeaders, ...wrappedRequestHeaders },\n          ),\n        \"getAccountOwnedTokensFromCollection\",\n        \"query\",\n      );\n    },\n    getAccountTokensCount(\n      variables?: Types.GetAccountTokensCountQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetAccountTokensCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountTokensCountQuery>(GetAccountTokensCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountTokensCount\",\n        \"query\",\n      );\n    },\n    getAccountTransactionsCount(\n      variables?: Types.GetAccountTransactionsCountQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetAccountTransactionsCountQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetAccountTransactionsCountQuery>(GetAccountTransactionsCount, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getAccountTransactionsCount\",\n        \"query\",\n      );\n    },\n    getChainTopUserTransactions(\n      variables?: Types.GetChainTopUserTransactionsQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetChainTopUserTransactionsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetChainTopUserTransactionsQuery>(GetChainTopUserTransactions, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getChainTopUserTransactions\",\n        \"query\",\n      );\n    },\n    getCollectionData(\n      variables: Types.GetCollectionDataQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetCollectionDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCollectionDataQuery>(GetCollectionData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCollectionData\",\n        \"query\",\n      );\n    },\n    getCurrentFungibleAssetBalances(\n      variables?: Types.GetCurrentFungibleAssetBalancesQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetCurrentFungibleAssetBalancesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCurrentFungibleAssetBalancesQuery>(GetCurrentFungibleAssetBalances, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCurrentFungibleAssetBalances\",\n        \"query\",\n      );\n    },\n    getDelegatedStakingActivities(\n      variables?: Types.GetDelegatedStakingActivitiesQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetDelegatedStakingActivitiesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetDelegatedStakingActivitiesQuery>(GetDelegatedStakingActivities, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getDelegatedStakingActivities\",\n        \"query\",\n      );\n    },\n    getEvents(\n      variables?: Types.GetEventsQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetEventsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetEventsQuery>(GetEvents, variables, { ...requestHeaders, ...wrappedRequestHeaders }),\n        \"getEvents\",\n        \"query\",\n      );\n    },\n    getFungibleAssetActivities(\n      variables?: Types.GetFungibleAssetActivitiesQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetFungibleAssetActivitiesQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetFungibleAssetActivitiesQuery>(GetFungibleAssetActivities, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getFungibleAssetActivities\",\n        \"query\",\n      );\n    },\n    getFungibleAssetMetadata(\n      variables?: Types.GetFungibleAssetMetadataQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetFungibleAssetMetadataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetFungibleAssetMetadataQuery>(GetFungibleAssetMetadata, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getFungibleAssetMetadata\",\n        \"query\",\n      );\n    },\n    getNumberOfDelegators(\n      variables: Types.GetNumberOfDelegatorsQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetNumberOfDelegatorsQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetNumberOfDelegatorsQuery>(GetNumberOfDelegators, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getNumberOfDelegators\",\n        \"query\",\n      );\n    },\n    getProcessorStatus(\n      variables?: Types.GetProcessorStatusQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetProcessorStatusQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetProcessorStatusQuery>(GetProcessorStatus, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getProcessorStatus\",\n        \"query\",\n      );\n    },\n    getTokenActivity(\n      variables: Types.GetTokenActivityQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetTokenActivityQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTokenActivityQuery>(GetTokenActivity, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTokenActivity\",\n        \"query\",\n      );\n    },\n    getCurrentTokenOwnership(\n      variables: Types.GetCurrentTokenOwnershipQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetCurrentTokenOwnershipQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetCurrentTokenOwnershipQuery>(GetCurrentTokenOwnership, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getCurrentTokenOwnership\",\n        \"query\",\n      );\n    },\n    getTokenData(\n      variables?: Types.GetTokenDataQueryVariables,\n      requestHeaders?: Dom.RequestInit[\"headers\"],\n    ): Promise<Types.GetTokenDataQuery> {\n      return withWrapper(\n        (wrappedRequestHeaders) =>\n          client.request<Types.GetTokenDataQuery>(GetTokenData, variables, {\n            ...requestHeaders,\n            ...wrappedRequestHeaders,\n          }),\n        \"getTokenData\",\n        \"query\",\n      );\n    },\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/general}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * general namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { getAptosFullNode, postAptosFullNode, postAptosIndexer } from \"../client\";\nimport {\n  AnyNumber,\n  Block,\n  GetChainTopUserTransactionsResponse,\n  GetProcessorStatusResponse,\n  GraphqlQuery,\n  LedgerInfo,\n  LedgerVersion,\n  MoveValue,\n  TableItemRequest,\n  ViewRequest,\n  ViewRequestData,\n} from \"../types\";\nimport { GetChainTopUserTransactionsQuery, GetProcessorStatusQuery } from \"../types/generated/operations\";\nimport { GetChainTopUserTransactions, GetProcessorStatus } from \"../types/generated/queries\";\n\nexport async function getLedgerInfo(args: { aptosConfig: AptosConfig }): Promise<LedgerInfo> {\n  const { aptosConfig } = args;\n  const { data } = await getAptosFullNode<{}, LedgerInfo>({\n    aptosConfig,\n    originMethod: \"getLedgerInfo\",\n    path: \"\",\n  });\n  return data;\n}\n\nexport async function getBlockByVersion(args: {\n  aptosConfig: AptosConfig;\n  ledgerVersion: AnyNumber;\n  options?: { withTransactions?: boolean };\n}): Promise<Block> {\n  const { aptosConfig, ledgerVersion, options } = args;\n  const { data } = await getAptosFullNode<{}, Block>({\n    aptosConfig,\n    originMethod: \"getBlockByVersion\",\n    path: `blocks/by_version/${ledgerVersion}`,\n    params: { with_transactions: options?.withTransactions },\n  });\n  return data;\n}\n\nexport async function getBlockByHeight(args: {\n  aptosConfig: AptosConfig;\n  blockHeight: AnyNumber;\n  options?: { withTransactions?: boolean };\n}): Promise<Block> {\n  const { aptosConfig, blockHeight, options } = args;\n  const { data } = await getAptosFullNode<{}, Block>({\n    aptosConfig,\n    originMethod: \"getBlockByHeight\",\n    path: `blocks/by_height/${blockHeight}`,\n    params: { with_transactions: options?.withTransactions },\n  });\n  return data;\n}\n\nexport async function getTableItem(args: {\n  aptosConfig: AptosConfig;\n  handle: string;\n  data: TableItemRequest;\n  options?: LedgerVersion;\n}): Promise<any> {\n  const { aptosConfig, handle, data, options } = args;\n  const response = await postAptosFullNode<TableItemRequest, any>({\n    aptosConfig,\n    originMethod: \"getTableItem\",\n    path: `tables/${handle}/item`,\n    params: { ledger_version: options?.ledgerVersion },\n    body: data,\n  });\n  return response.data;\n}\n\nexport async function view(args: {\n  aptosConfig: AptosConfig;\n  payload: ViewRequestData;\n  options?: LedgerVersion;\n}): Promise<MoveValue[]> {\n  const { aptosConfig, payload, options } = args;\n  const { data } = await postAptosFullNode<ViewRequest, MoveValue[]>({\n    aptosConfig,\n    originMethod: \"view\",\n    path: \"view\",\n    params: { ledger_version: options?.ledgerVersion },\n    body: {\n      function: payload.function,\n      type_arguments: payload.typeArguments ?? [],\n      arguments: payload.functionArguments ?? [],\n    },\n  });\n  return data;\n}\n\nexport async function getChainTopUserTransactions(args: {\n  aptosConfig: AptosConfig;\n  limit: number;\n}): Promise<GetChainTopUserTransactionsResponse> {\n  const { aptosConfig, limit } = args;\n  const graphqlQuery = {\n    query: GetChainTopUserTransactions,\n    variables: { limit },\n  };\n\n  const data = await queryIndexer<GetChainTopUserTransactionsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getChainTopUserTransactions\",\n  });\n\n  return data.user_transactions;\n}\n\nexport async function queryIndexer<T>(args: {\n  aptosConfig: AptosConfig;\n  query: GraphqlQuery;\n  originMethod?: string;\n}): Promise<T> {\n  const { aptosConfig, query, originMethod } = args;\n  const { data } = await postAptosIndexer<GraphqlQuery, T>({\n    aptosConfig,\n    originMethod: originMethod ?? \"queryIndexer\",\n    path: \"\",\n    body: query,\n    overrides: { WITH_CREDENTIALS: false },\n  });\n  return data;\n}\n\nexport async function getProcessorStatuses(args: { aptosConfig: AptosConfig }): Promise<GetProcessorStatusResponse> {\n  const { aptosConfig } = args;\n\n  const graphqlQuery = {\n    query: GetProcessorStatus,\n  };\n\n  const data = await queryIndexer<GetProcessorStatusQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getProcessorStatuses\",\n  });\n\n  return data.processor_status;\n}\n\nexport async function getIndexerLastSuccessVersion(args: { aptosConfig: AptosConfig }): Promise<number> {\n  const response = await getProcessorStatuses({ aptosConfig: args.aptosConfig });\n  return response[0].last_success_version;\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * The global cache Map shared across all functions.  Must keep care to ensure that the\n * cache keys are unique across all functions.\n */\nconst cache = new Map<string, { value: any; timestamp: number }>();\n\n/**\n * A memoize high order function to cache async function response\n *\n * @param func An async function to cache the result of\n * @param key The provided cache key\n * @param ttlMs time-to-live in milliseconds for cached data\n * @returns the cached or latest result\n */\nexport function memoizeAsync<T>(\n  func: (...args: any[]) => Promise<T>,\n  key: string,\n  ttlMs?: number,\n): (...args: any[]) => Promise<T> {\n  return async (...args: any[]) => {\n    // Check if the cached result exists and is within TTL\n    if (cache.has(key)) {\n      const { value, timestamp } = cache.get(key)!;\n      if (ttlMs === undefined || Date.now() - timestamp <= ttlMs) {\n        return value;\n      }\n    }\n\n    // If not cached or TTL expired, compute the result\n    const result = await func(...args);\n\n    // Cache the result with a timestamp\n    cache.set(key, { value: result, timestamp: Date.now() });\n\n    return result;\n  };\n}\n\n/**\n * A memoize high order function to cache function response\n *\n * @param func A function to cache the result of\n * @param key The provided cache key\n * @param ttlMs time-to-live in milliseconds for cached data\n * @returns the cached or latest result\n */\nexport function memoize<T>(func: (...args: any[]) => T, key: string, ttlMs?: number): (...args: any[]) => T {\n  return (...args: any[]) => {\n    // Check if the cached result exists and is within TTL\n    if (cache.has(key)) {\n      const { value, timestamp } = cache.get(key)!;\n      if (ttlMs === undefined || Date.now() - timestamp <= ttlMs) {\n        return value;\n      }\n    }\n\n    // If not cached or TTL expired, compute the result\n    const result = func(...args);\n\n    // Cache the result with a timestamp\n    cache.set(key, { value: result, timestamp: Date.now() });\n\n    return result;\n  };\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/account}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * account namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AptosApiError, getAptosFullNode, paginateWithCursor } from \"../client\";\nimport { AccountAddress } from \"../core/accountAddress\";\nimport { Account } from \"../core/account\";\nimport { PrivateKey } from \"../core/crypto/asymmetricCrypto\";\nimport { Hex } from \"../core/hex\";\nimport { getTableItem, queryIndexer } from \"./general\";\nimport {\n  AccountData,\n  GetAccountCoinsDataResponse,\n  GetAccountCollectionsWithOwnedTokenResponse,\n  GetAccountOwnedObjectsResponse,\n  GetAccountOwnedTokensFromCollectionResponse,\n  GetAccountOwnedTokensQueryResponse,\n  HexInput,\n  LedgerVersion,\n  MoveModuleBytecode,\n  MoveResource,\n  MoveStructType,\n  OrderBy,\n  PaginationArgs,\n  SigningScheme,\n  TokenStandard,\n  TransactionResponse,\n} from \"../types\";\nimport {\n  GetAccountCoinsCountQuery,\n  GetAccountCoinsDataQuery,\n  GetAccountCollectionsWithOwnedTokensQuery,\n  GetAccountOwnedObjectsQuery,\n  GetAccountOwnedTokensFromCollectionQuery,\n  GetAccountOwnedTokensQuery,\n  GetAccountTokensCountQuery,\n  GetAccountTransactionsCountQuery,\n} from \"../types/generated/operations\";\nimport {\n  GetAccountCoinsCount,\n  GetAccountCoinsData,\n  GetAccountCollectionsWithOwnedTokens,\n  GetAccountOwnedObjects,\n  GetAccountOwnedTokens,\n  GetAccountOwnedTokensFromCollection,\n  GetAccountTokensCount,\n  GetAccountTransactionsCount,\n} from \"../types/generated/queries\";\nimport { memoizeAsync } from \"../utils/memoize\";\nimport { Secp256k1PrivateKey, AuthenticationKey, Ed25519PrivateKey } from \"../core\";\nimport { AnyPublicKey } from \"../core/crypto/anyPublicKey\";\n\nexport async function getInfo(args: { aptosConfig: AptosConfig; accountAddress: HexInput }): Promise<AccountData> {\n  const { aptosConfig, accountAddress } = args;\n  const { data } = await getAptosFullNode<{}, AccountData>({\n    aptosConfig,\n    originMethod: \"getInfo\",\n    path: `accounts/${AccountAddress.fromHexInput(accountAddress).toString()}`,\n  });\n  return data;\n}\n\nexport async function getModules(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  options?: PaginationArgs & LedgerVersion;\n}): Promise<MoveModuleBytecode[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithCursor<{}, MoveModuleBytecode[]>({\n    aptosConfig,\n    originMethod: \"getModules\",\n    path: `accounts/${AccountAddress.fromHexInput(accountAddress).toString()}/modules`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      start: options?.offset,\n      limit: options?.limit ?? 1000,\n    },\n  });\n}\n\n/**\n * Queries for a move module given account address and module name\n *\n * @param args.accountAddress Hex-encoded 32 byte Aptos account address\n * @param args.moduleName The name of the module\n * @param args.query.ledgerVersion Specifies ledger version of transactions. By default, latest version will be used\n * @returns The move module.\n */\nexport async function getModule(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  moduleName: string;\n  options?: LedgerVersion;\n}): Promise<MoveModuleBytecode> {\n  // We don't memoize the account module by ledger version, as it's not a common use case, this would be handled\n  // by the developer directly\n  if (args.options?.ledgerVersion !== undefined) {\n    return getModuleInner(args);\n  }\n\n  return memoizeAsync(\n    async () => getModuleInner(args),\n    `module-${args.accountAddress}-${args.moduleName}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n}\n\nasync function getModuleInner(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  moduleName: string;\n  options?: LedgerVersion;\n}): Promise<MoveModuleBytecode> {\n  const { aptosConfig, accountAddress, moduleName, options } = args;\n\n  const { data } = await getAptosFullNode<{}, MoveModuleBytecode>({\n    aptosConfig,\n    originMethod: \"getModule\",\n    path: `accounts/${AccountAddress.fromHexInput(accountAddress).toString()}/module/${moduleName}`,\n    params: { ledger_version: options?.ledgerVersion },\n  });\n  return data;\n}\n\nexport async function getTransactions(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  options?: PaginationArgs;\n}): Promise<TransactionResponse[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithCursor<{}, TransactionResponse[]>({\n    aptosConfig,\n    originMethod: \"getTransactions\",\n    path: `accounts/${AccountAddress.fromHexInput(accountAddress).toString()}/transactions`,\n    params: { start: options?.offset, limit: options?.limit },\n  });\n}\n\nexport async function getResources(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  options?: PaginationArgs & LedgerVersion;\n}): Promise<MoveResource[]> {\n  const { aptosConfig, accountAddress, options } = args;\n  return paginateWithCursor<{}, MoveResource[]>({\n    aptosConfig,\n    originMethod: \"getResources\",\n    path: `accounts/${AccountAddress.fromHexInput(accountAddress).toString()}/resources`,\n    params: {\n      ledger_version: options?.ledgerVersion,\n      start: options?.offset,\n      limit: options?.limit ?? 999,\n    },\n  });\n}\n\nexport async function getResource<T extends {}>(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  resourceType: MoveStructType;\n  options?: LedgerVersion;\n}): Promise<T> {\n  const { aptosConfig, accountAddress, resourceType, options } = args;\n  const { data } = await getAptosFullNode<{}, MoveResource>({\n    aptosConfig,\n    originMethod: \"getResource\",\n    path: `accounts/${AccountAddress.fromHexInput(accountAddress).toString()}/resource/${resourceType}`,\n    params: { ledger_version: options?.ledgerVersion },\n  });\n  return data.data as T;\n}\n\nexport async function lookupOriginalAccountAddress(args: {\n  aptosConfig: AptosConfig;\n  authenticationKey: HexInput;\n  options?: LedgerVersion;\n}): Promise<AccountAddress> {\n  const { aptosConfig, authenticationKey, options } = args;\n  type OriginatingAddress = {\n    address_map: { handle: string };\n  };\n  const resource = await getResource<OriginatingAddress>({\n    aptosConfig,\n    accountAddress: \"0x1\",\n    resourceType: \"0x1::account::OriginatingAddress\",\n    options,\n  });\n\n  const {\n    address_map: { handle },\n  } = resource;\n\n  // If the address is not found in the address map, which means its not rotated\n  // then return the address as is\n  try {\n    const originalAddress = await getTableItem({\n      aptosConfig,\n      handle,\n      data: {\n        key: Hex.fromHexInput(authenticationKey).toString(),\n        key_type: \"address\",\n        value_type: \"address\",\n      },\n      options,\n    });\n\n    return AccountAddress.fromHexInput(originalAddress);\n  } catch (err) {\n    if (err instanceof AptosApiError && err.data.error_code === \"table_item_not_found\") {\n      return AccountAddress.fromHexInput(authenticationKey);\n    }\n\n    throw err;\n  }\n}\n\nexport async function getAccountTokensCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n\n  const address = AccountAddress.fromHexInput(accountAddress).toString();\n\n  const whereCondition: any = {\n    owner_address: { _eq: address },\n    amount: { _gt: \"0\" },\n  };\n\n  const graphqlQuery = {\n    query: GetAccountTokensCount,\n    variables: { where_condition: whereCondition },\n  };\n\n  const data = await queryIndexer<GetAccountTokensCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountTokensCount\",\n  });\n  if (!data.current_token_ownerships_v2_aggregate.aggregate) {\n    throw Error(\"Failed to get the count of account tokens\");\n  }\n  return data.current_token_ownerships_v2_aggregate.aggregate.count;\n}\n\nexport async function getAccountOwnedTokens(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  options?: {\n    tokenStandard?: TokenStandard;\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetAccountOwnedTokensQueryResponse[0]>;\n  };\n}): Promise<GetAccountOwnedTokensQueryResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.fromHexInput(accountAddress).toString();\n\n  const whereCondition: any = {\n    owner_address: { _eq: address },\n    amount: { _gt: 0 },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountOwnedTokens,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.pagination?.offset,\n      limit: options?.pagination?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountOwnedTokensQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedTokens\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\nexport async function getAccountOwnedTokensFromCollectionAddress(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  collectionAddress: HexInput;\n  options?: {\n    tokenStandard?: TokenStandard;\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetAccountOwnedTokensFromCollectionResponse[0]>;\n  };\n}): Promise<GetAccountOwnedTokensFromCollectionResponse> {\n  const { aptosConfig, accountAddress, collectionAddress, options } = args;\n  const ownerAddress = AccountAddress.fromHexInput(accountAddress).toString();\n  const collAddress = Hex.fromHexInput(collectionAddress).toString();\n\n  const whereCondition: any = {\n    owner_address: { _eq: ownerAddress },\n    current_token_data: { collection_id: { _eq: collAddress } },\n    amount: { _gt: 0 },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountOwnedTokensFromCollection,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.pagination?.offset,\n      limit: options?.pagination?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountOwnedTokensFromCollectionQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedTokensFromCollectionAddress\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\nexport async function getAccountCollectionsWithOwnedTokens(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  options?: {\n    tokenStandard?: TokenStandard;\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetAccountCollectionsWithOwnedTokenResponse[0]>;\n  };\n}): Promise<GetAccountCollectionsWithOwnedTokenResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.fromHexInput(accountAddress).toString();\n\n  const whereCondition: any = {\n    owner_address: { _eq: address },\n    amount: { _gt: 0 },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.current_collection = {\n      token_standard: { _eq: options?.tokenStandard },\n    };\n  }\n\n  const graphqlQuery = {\n    query: GetAccountCollectionsWithOwnedTokens,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.pagination?.offset,\n      limit: options?.pagination?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountCollectionsWithOwnedTokensQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCollectionsWithOwnedTokens\",\n  });\n\n  return data.current_collection_ownership_v2_view;\n}\n\nexport async function getAccountTransactionsCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n\n  const address = AccountAddress.fromHexInput(accountAddress).toString();\n\n  const graphqlQuery = {\n    query: GetAccountTransactionsCount,\n    variables: { address },\n  };\n\n  const data = await queryIndexer<GetAccountTransactionsCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountTransactionsCount\",\n  });\n\n  if (!data.account_transactions_aggregate.aggregate) {\n    throw Error(\"Failed to get the count of account transactions\");\n  }\n\n  return data.account_transactions_aggregate.aggregate.count;\n}\n\nexport async function getAccountCoinsData(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  options?: {\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetAccountCoinsDataResponse[0]>;\n  };\n}): Promise<GetAccountCoinsDataResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.fromHexInput(accountAddress).toString();\n\n  const whereCondition: any = {\n    owner_address: { _eq: address },\n  };\n\n  const graphqlQuery = {\n    query: GetAccountCoinsData,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.pagination?.offset,\n      limit: options?.pagination?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetAccountCoinsDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCoinsData\",\n  });\n\n  return data.current_fungible_asset_balances;\n}\n\nexport async function getAccountCoinsCount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n}): Promise<number> {\n  const { aptosConfig, accountAddress } = args;\n  const address = AccountAddress.fromHexInput(accountAddress).toString();\n\n  const graphqlQuery = {\n    query: GetAccountCoinsCount,\n    variables: { address },\n  };\n\n  const data = await queryIndexer<GetAccountCoinsCountQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountCoinsCount\",\n  });\n\n  if (!data.current_fungible_asset_balances_aggregate.aggregate) {\n    throw Error(\"Failed to get the count of account coins\");\n  }\n\n  return data.current_fungible_asset_balances_aggregate.aggregate.count;\n}\n\nexport async function getAccountOwnedObjects(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  options?: {\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetAccountOwnedObjectsResponse[0]>;\n  };\n}): Promise<GetAccountOwnedObjectsResponse> {\n  const { aptosConfig, accountAddress, options } = args;\n  const address = AccountAddress.fromHexInput(accountAddress).toString();\n\n  const whereCondition: any = {\n    owner_address: { _eq: address },\n  };\n  const graphqlQuery = {\n    query: GetAccountOwnedObjects,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.pagination?.offset,\n      limit: options?.pagination?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n  const data = await queryIndexer<GetAccountOwnedObjectsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getAccountOwnedObjects\",\n  });\n\n  return data.current_objects;\n}\n\nexport async function deriveAccountFromPrivateKey(args: {\n  aptosConfig: AptosConfig;\n  privateKey: PrivateKey;\n}): Promise<Account> {\n  const { aptosConfig, privateKey } = args;\n  const publicKey = new AnyPublicKey(privateKey.publicKey());\n\n  if (privateKey instanceof Secp256k1PrivateKey) {\n    // private key is secp256k1, therefore we know it for sure uses a single signer key\n    const authKey = AuthenticationKey.fromPublicKeyAndScheme({ publicKey, scheme: SigningScheme.SingleKey });\n    const address = new AccountAddress({ data: authKey.toUint8Array() });\n    return Account.fromPrivateKeyAndAddress({ privateKey, address });\n  }\n\n  if (privateKey instanceof Ed25519PrivateKey) {\n    // lookup single sender ed25519\n    const SingleSenderTransactionAuthenticatorAuthKey = AuthenticationKey.fromPublicKeyAndScheme({\n      publicKey,\n      scheme: SigningScheme.SingleKey,\n    });\n    const isSingleSenderTransactionAuthenticator = await isAccountExist({\n      authKey: SingleSenderTransactionAuthenticatorAuthKey,\n      aptosConfig,\n    });\n    if (isSingleSenderTransactionAuthenticator) {\n      const address = new AccountAddress({ data: SingleSenderTransactionAuthenticatorAuthKey.toUint8Array() });\n      return Account.fromPrivateKeyAndAddress({ privateKey, address });\n    }\n    // lookup legacy ed25519\n    const legacyAuthKey = AuthenticationKey.fromPublicKeyAndScheme({ publicKey, scheme: SigningScheme.Ed25519 });\n    const isLegacyEd25519 = await isAccountExist({ authKey: legacyAuthKey, aptosConfig });\n    if (isLegacyEd25519) {\n      const address = new AccountAddress({ data: legacyAuthKey.toUint8Array() });\n      return Account.fromPrivateKeyAndAddress({ privateKey, address, legacy: true });\n    }\n  }\n  // if we are here, it means we couldn't find an address with an\n  // auth key that matches the provided private key\n  throw new Error(`Can't derive account from private key ${privateKey}`);\n}\n\nexport async function isAccountExist(args: { aptosConfig: AptosConfig; authKey: AuthenticationKey }): Promise<boolean> {\n  const { aptosConfig, authKey } = args;\n  const accountAddress = await lookupOriginalAccountAddress({\n    aptosConfig,\n    authenticationKey: authKey.toString(),\n  });\n\n  try {\n    await getInfo({\n      aptosConfig,\n      accountAddress: accountAddress.toString(),\n    });\n    return true;\n  } catch (error: any) {\n    // account not found\n    if (error.status === 404) {\n      return false;\n    }\n    throw new Error(`Error while looking for an account info ${accountAddress.toString()}`);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport { AccountAddress, PrivateKey, Account as AccountModule } from \"../core\";\nimport {\n  AccountData,\n  GetAccountCoinsDataResponse,\n  GetAccountCollectionsWithOwnedTokenResponse,\n  GetAccountOwnedObjectsResponse,\n  GetAccountOwnedTokensFromCollectionResponse,\n  GetAccountOwnedTokensQueryResponse,\n  HexInput,\n  LedgerVersion,\n  MoveModuleBytecode,\n  MoveResource,\n  MoveStructType,\n  OrderBy,\n  PaginationArgs,\n  TokenStandard,\n  TransactionResponse,\n} from \"../types\";\nimport {\n  deriveAccountFromPrivateKey,\n  getAccountCoinsCount,\n  getAccountCoinsData,\n  getAccountCollectionsWithOwnedTokens,\n  getAccountOwnedObjects,\n  getAccountOwnedTokens,\n  getAccountOwnedTokensFromCollectionAddress,\n  getAccountTokensCount,\n  getAccountTransactionsCount,\n  getInfo,\n  getModule,\n  getModules,\n  getResource,\n  getResources,\n  getTransactions,\n  lookupOriginalAccountAddress,\n} from \"../internal/account\";\n\n/**\n * A class to query all `Account` related queries on Aptos.\n */\nexport class Account {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Queries the current state for an Aptos account given its account address\n   *\n   * @param args.accountAddress Aptos account address\n   *\n   * @returns The account data\n   *\n   * @example An example of the returned account\n   * ```\n   * {\n   *    sequence_number: \"1\",\n   *    authentication_key: \"0x5307b5f4bc67829097a8ba9b43dba3b88261eeccd1f709d9bde240fc100fbb69\"\n   * }\n   * ```\n   */\n  async getAccountInfo(args: { accountAddress: HexInput }): Promise<AccountData> {\n    return getInfo({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for all modules in an account given an account address\n   *\n   * Note: In order to get all account modules, this function may call the API\n   * multiple times as it auto paginates.\n   *\n   * @param args.accountAddress Aptos account address\n   * @param args.options.offset The number module to start returning results from\n   * @param args.options.limit The number of results to return\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @returns Account modules\n   */\n\n  async getAccountModules(args: {\n    accountAddress: HexInput;\n    options?: PaginationArgs & LedgerVersion;\n  }): Promise<MoveModuleBytecode[]> {\n    return getModules({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a specific account module given account address and module name\n   *\n   * @param args.accountAddress Aptos account address\n   * @param args.moduleName The name of the module\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @returns Account module\n   *\n   * @example An example of an account module\n   * ```\n   * {\n   *    bytecode: \"0xa11ceb0b0600000006010002030206050807070f0d081c200\",\n   *    abi: { address: \"0x1\" }\n   * }\n   * ```\n   */\n  async getAccountModule(args: {\n    accountAddress: HexInput;\n    moduleName: string;\n    options?: LedgerVersion;\n  }): Promise<MoveModuleBytecode> {\n    return getModule({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries account transactions given an account address\n   *\n   * Note: In order to get all account transactions, this function may call the API\n   * multiple times as it auto paginates.\n   *\n   * @param args.accountAddress Aptos account address\n   * @param args.options.offset The number transaction to start returning results from\n   * @param args.options.limit The number of results to return\n   *\n   * @returns The account transactions\n   */\n  async getAccountTransactions(args: {\n    accountAddress: HexInput;\n    options?: PaginationArgs;\n  }): Promise<TransactionResponse[]> {\n    return getTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries all account resources given an account address\n   *\n   * Note: In order to get all account resources, this function may call the API\n   * multiple times as it auto paginates.\n   *\n   * @param args.accountAddress Aptos account address\n   * @param args.options.offset The number resource to start returning results from\n   * @param args.options.limit The number of results to return\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   * @returns Account resources\n   */\n  async getAccountResources(args: {\n    accountAddress: HexInput;\n    options?: PaginationArgs & LedgerVersion;\n  }): Promise<MoveResource[]> {\n    return getResources({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a specific account resource given account address and resource type. Note that the default is `any` in order\n   * to allow for ease of accessing properties of the object.\n   *\n   * @type The typed output of the resource\n   * @param args.accountAddress Aptos account address\n   * @param args.resourceType String representation of an on-chain Move struct type, i.e \"0x1::aptos_coin::AptosCoin\"\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @returns Account resource\n   *\n   * @example An example of an account resource\n   * ```\n   * {\n   *    data: { value: 6 }\n   * }\n   * ```\n   */\n  async getAccountResource<T extends {} = any>(args: {\n    accountAddress: HexInput;\n    resourceType: MoveStructType;\n    options?: LedgerVersion;\n  }): Promise<T> {\n    return getResource<T>({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Looks up the account address for a given authentication key\n   *\n   * This handles both if the account's authentication key has been rotated or not.\n   *\n   * @param args.authenticationKey The authentication key\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   * @returns Promise<AccountAddress> The accountAddress associated with the authentication key\n   */\n  async lookupOriginalAccountAddress(args: {\n    authenticationKey: HexInput;\n    options?: LedgerVersion;\n  }): Promise<AccountAddress> {\n    return lookupOriginalAccountAddress({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the current count of tokens owned by an account\n   *\n   * @param args.accountAddress The account address\n   * @returns Current count of tokens owned by the account\n   */\n  async getAccountTokensCount(args: { accountAddress: HexInput }): Promise<number> {\n    return getAccountTokensCount({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the account's current owned tokens.\n   *\n   * This query returns all tokens (v1 and v2 standards) an account owns, including NFTs, fungible, soulbound, etc.\n   * If you want to get only the token from a specific standard, you can pass an optional tokenStandard param\n   *\n   * @param args.accountAddress The account address we want to get the tokens for\n   * @param args.options.tokenStandard The NFT standard to query for\n   * @param args.options.pagination.offset The number token to start returning results from\n   * @param args.options.pagination.limit The number of results to return\n   * @param args.options.orderBy The order to sort the tokens by\n   * @returns Tokens array with the token data\n   */\n  async getAccountOwnedTokens(args: {\n    accountAddress: HexInput;\n    options?: {\n      tokenStandard?: TokenStandard;\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetAccountOwnedTokensQueryResponse[0]>;\n    };\n  }): Promise<GetAccountOwnedTokensQueryResponse> {\n    return getAccountOwnedTokens({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries all current tokens of a specific collection that an account owns by the collection address\n   *\n   * This query returns all tokens (v1 and v2 standards) an account owns, including NFTs, fungible, soulbound, etc.\n   * If you want to get only the token from a specific standard, you can pass an optional tokenStandard param\n   *\n   * @param args.accountAddress The account address we want to get the tokens for\n   * @param args.collectionAddress The address of the collection being queried\n   * @param args.options.tokenStandard The NFT standard to query for\n   * @param args.options.pagination.offset The number token to start returning results from\n   * @param args.options.pagination.limit The number of results to return\n   * @param args.options.orderBy The order to sort the tokens by\n   * @returns Tokens array with the token data\n   */\n  async getAccountOwnedTokensFromCollectionAddress(args: {\n    accountAddress: HexInput;\n    collectionAddress: HexInput;\n    options?: {\n      tokenStandard?: TokenStandard;\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetAccountOwnedTokensFromCollectionResponse[0]>;\n    };\n  }): Promise<GetAccountOwnedTokensFromCollectionResponse> {\n    return getAccountOwnedTokensFromCollectionAddress({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries for all collections that an account currently has tokens for.\n   *\n   * This query returns all tokens (v1 and v2 standards) an account owns, including NFTs, fungible, soulbound, etc.\n   * If you want to get only the token from a specific standard, you can pass an optional tokenStandard param\n   *\n   * @param args.accountAddress The account address we want to get the collections for\n   * @param args.options.tokenStandard The NFT standard to query for\n   * @param args.options.pagination.offset The number collection to start returning results from\n   * @param args.options.pagination.limit The number of results to return\n   * @param args.options.orderBy The order to sort the tokens by\n   * @returns Collections array with the collections data\n   */\n  async getAccountCollectionsWithOwnedTokens(args: {\n    accountAddress: HexInput;\n    options?: {\n      tokenStandard?: TokenStandard;\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetAccountCollectionsWithOwnedTokenResponse[0]>;\n    };\n  }): Promise<GetAccountCollectionsWithOwnedTokenResponse> {\n    return getAccountCollectionsWithOwnedTokens({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the current count of transactions submitted by an account\n   *\n   * @param args.accountAddress The account address we want to get the total count for\n   * @returns Current count of transactions made by an account\n   */\n  async getAccountTransactionsCount(args: { accountAddress: HexInput }): Promise<number> {\n    return getAccountTransactionsCount({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries an account's coins data\n   *\n   * @param args.accountAddress The account address we want to get the coins data for\n   * @param args.options.pagination.offset The number coin to start returning results from\n   * @param args.options.pagination.limit The number of results to return\n   * @param args.options.orderBy The order to sort the coins by\n   * @returns Array with the coins data\n   */\n  async getAccountCoinsData(args: {\n    accountAddress: HexInput;\n    options?: {\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetAccountCoinsDataResponse[0]>;\n    };\n  }): Promise<GetAccountCoinsDataResponse> {\n    return getAccountCoinsData({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries the current count of an account's coins aggregated\n   *\n   * @param args.accountAddress The account address we want to get the total count for\n   * @returns Current count of the aggregated count of all account's coins\n   */\n  async getAccountCoinsCount(args: { accountAddress: HexInput }): Promise<number> {\n    return getAccountCoinsCount({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries an account's owned objects\n   *\n   * @param args.accountAddress The account address we want to get the objects for\n   * @param args.options.pagination.offset The number coin to start returning results from\n   * @param args.options.pagination.limit The number of results to return\n   * @param args.options.orderBy The order to sort the coins by\n   * @returns Objects array with the object data\n   */\n  async getAccountOwnedObjects(args: {\n    accountAddress: HexInput;\n    options?: {\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetAccountOwnedObjectsResponse[0]>;\n    };\n  }): Promise<GetAccountOwnedObjectsResponse> {\n    return getAccountOwnedObjects({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Derives an account by providing a private key.\n   * This functions resolves the provided private key type and derives the public key from it.\n   *\n   * If the privateKey is a Secp256k1 type, it derives the account using the derived public key and\n   * auth key using the SingleKey scheme locally.\n   *\n   * If the privateKey is a ED25519 type, it looks up the authentication key on chain, and uses it to resolve\n   * whether it is a Legacy ED25519 key or a Unified ED25519 key. It then derives the account based\n   * on that.\n   *\n   * @param args.privateKey An account private key\n   * @returns Account type\n   */\n  async deriveAccountFromPrivateKey(args: { privateKey: PrivateKey }): Promise<AccountModule> {\n    return deriveAccountFromPrivateKey({ aptosConfig: this.config, ...args });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport aptosClient from \"@aptos-labs/aptos-client\";\nimport { AptosSettings, ClientConfig, Client } from \"../types\";\nimport { NetworkToNodeAPI, NetworkToFaucetAPI, NetworkToIndexerAPI, Network } from \"../utils/apiEndpoints\";\nimport { AptosApiType, DEFAULT_NETWORK } from \"../utils/const\";\n\n/**\n * This class holds the config information for the SDK client instance.\n */\nexport class AptosConfig {\n  /** The Network that this SDK is associated with. */\n  readonly network: Network;\n\n  /**\n   * The client instance the SDK uses\n   */\n  readonly client: Client;\n\n  /**\n   * The optional hardcoded fullnode URL to send requests to instead of using the network\n   */\n  readonly fullnode?: string;\n\n  /**\n   * The optional hardcoded faucet URL to send requests to instead of using the network\n   */\n  readonly faucet?: string;\n\n  /**\n   * The optional hardcoded indexer URL to send requests to instead of using the network\n   */\n  readonly indexer?: string;\n\n  readonly clientConfig?: ClientConfig;\n\n  constructor(settings?: AptosSettings) {\n    this.network = settings?.network ?? DEFAULT_NETWORK;\n    this.fullnode = settings?.fullnode;\n    this.faucet = settings?.faucet;\n    this.indexer = settings?.indexer;\n    this.client = settings?.client ?? { provider: aptosClient };\n    this.clientConfig = settings?.clientConfig ?? {};\n  }\n\n  /**\n   * Returns the URL endpoint to send the request to.\n   * If a custom URL was provided in the config, that URL is returned.\n   * If a custom URL was provided but not URL endpoints, an error is thrown.\n   * Otherwise, the URL endpoint is derived from the network.\n   *\n   * @param apiType - The type of Aptos API to get the URL for.\n   *\n   * @internal\n   */\n  getRequestUrl(apiType: AptosApiType): string {\n    switch (apiType) {\n      case AptosApiType.FULLNODE:\n        if (this.fullnode !== undefined) return this.fullnode;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom full node url\");\n        return NetworkToNodeAPI[this.network];\n      case AptosApiType.FAUCET:\n        if (this.faucet !== undefined) return this.faucet;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom faucet url\");\n        return NetworkToFaucetAPI[this.network];\n      case AptosApiType.INDEXER:\n        if (this.indexer !== undefined) return this.indexer;\n        if (this.network === Network.CUSTOM) throw new Error(\"Please provide a custom indexer url\");\n        return NetworkToIndexerAPI[this.network];\n      default:\n        throw Error(`apiType ${apiType} is not supported`);\n    }\n  }\n\n  /**\n   * Checks if the URL is a known indexer endpoint\n   *\n   * @internal\n   * */\n  isIndexerRequest(url: string): boolean {\n    return NetworkToIndexerAPI[this.network] === url;\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file handles the transaction creation lifecycle.\n * It holds different operations to generate a transaction payload, a raw transaction,\n * and a signed transaction that can be simulated, signed and submitted to chain.\n */\nimport { sha3_256 as sha3Hash } from \"@noble/hashes/sha3\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { AccountAddress, Hex, PublicKey } from \"../../core\";\nimport { Account } from \"../../core/account\";\nimport { AnyPublicKey } from \"../../core/crypto/anyPublicKey\";\nimport { AnySignature } from \"../../core/crypto/anySignature\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { Secp256k1PublicKey, Secp256k1Signature } from \"../../core/crypto/secp256k1\";\nimport { getInfo } from \"../../internal/account\";\nimport { getLedgerInfo } from \"../../internal/general\";\nimport { getGasPriceEstimation } from \"../../internal/transaction\";\nimport { NetworkToChainId } from \"../../utils/apiEndpoints\";\nimport {\n  DEFAULT_MAX_GAS_AMOUNT,\n  DEFAULT_TXN_EXP_SEC_FROM_NOW,\n  RAW_TRANSACTION_SALT,\n  RAW_TRANSACTION_WITH_DATA_SALT,\n} from \"../../utils/const\";\nimport {\n  AccountAuthenticator,\n  AccountAuthenticatorEd25519,\n  AccountAuthenticatorMultiKey,\n  AccountAuthenticatorSingleKey,\n} from \"../authenticator/account\";\nimport {\n  TransactionAuthenticatorEd25519,\n  TransactionAuthenticatorFeePayer,\n  TransactionAuthenticatorMultiAgent,\n  TransactionAuthenticatorSingleSender,\n} from \"../authenticator/transaction\";\nimport {\n  ChainId,\n  EntryFunction,\n  FeePayerRawTransaction,\n  MultiAgentRawTransaction,\n  MultiSig,\n  MultisigTransactionPayload,\n  RawTransaction,\n  Script,\n  TransactionPayloadEntryFunction,\n  TransactionPayloadMultisig,\n  TransactionPayloadScript,\n} from \"../instances\";\nimport { SignedTransaction } from \"../instances/signedTransaction\";\nimport {\n  InputGenerateTransactionOptions,\n  AnyTransactionPayloadInstance,\n  AnyRawTransactionInstance,\n  InputGenerateFeePayerRawTransactionArgs,\n  InputGenerateMultiAgentRawTransactionArgs,\n  InputGenerateRawTransactionArgs,\n  InputGenerateSingleSignerRawTransactionArgs,\n  InputSingleSignerTransaction,\n  AnyRawTransaction,\n  InputFeePayerTransaction,\n  InputMultiAgentTransaction,\n  InputScriptData,\n  InputSimulateTransactionData,\n  EntryFunctionArgumentTypes,\n  EntryFunctionABI,\n  InputGenerateTransactionPayloadData,\n  InputEntryFunctionData,\n  InputMultiSigData,\n  InputMultiSigDataWithRemoteABI,\n  InputEntryFunctionDataWithRemoteABI,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n} from \"../types\";\nimport { convertArgument, fetchEntryFunctionAbi, standardizeTypeTags } from \"./remoteAbi\";\nimport { memoizeAsync } from \"../../utils/memoize\";\nimport { HexInput, SigningScheme } from \"../../types\";\nimport { getFunctionParts, isScriptDataInput } from \"./helpers\";\n\n/**\n * We are defining function signatures, each with its specific input and output.\n * These are the possible function signature for our `generateTransactionPayload` function.\n * When we call our `generateTransactionPayload` function with the relevant type properties,\n * Typescript can infer the return type based on the appropriate function overload.\n */\nexport async function generateTransactionPayload(\n  args: InputScriptData & { aptosConfig?: undefined },\n): Promise<TransactionPayloadScript>;\nexport async function generateTransactionPayload(\n  args: InputEntryFunctionDataWithRemoteABI,\n): Promise<TransactionPayloadEntryFunction>;\nexport async function generateTransactionPayload(\n  args: InputMultiSigDataWithRemoteABI,\n): Promise<TransactionPayloadMultisig>;\nexport async function generateTransactionPayload(\n  args: InputGenerateTransactionPayloadDataWithRemoteABI,\n): Promise<AnyTransactionPayloadInstance>;\n\n/**\n * Builds a transaction payload based on the data argument and returns\n * a transaction payload - TransactionPayloadScript | TransactionPayloadMultisig | TransactionPayloadEntryFunction\n *\n * This uses the RemoteABI by default, and the remote ABI can be skipped by using generateTransactionPayloadWithABI\n *\n * @param args.data GenerateTransactionPayloadData\n *\n * @return TransactionPayload\n */\nexport async function generateTransactionPayload(\n  args: InputGenerateTransactionPayloadDataWithRemoteABI,\n): Promise<AnyTransactionPayloadInstance> {\n  if (isScriptDataInput(args)) {\n    return generateTransactionPayloadScript(args);\n  }\n\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  // We fetch the entry function ABI, and then pretend that we already had the ABI\n  const functionAbi = await memoizeAsync(\n    async () => fetchEntryFunctionAbi(moduleAddress, moduleName, functionName, args.aptosConfig),\n    `entry-function-${args.aptosConfig.network}-${moduleAddress}-${moduleName}-${functionName}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n\n  return generateTransactionPayloadWithABI(args, functionAbi);\n}\n\nexport function generateTransactionPayloadWithABI(\n  args: InputEntryFunctionData,\n  functionAbi: EntryFunctionABI,\n): TransactionPayloadEntryFunction;\nexport function generateTransactionPayloadWithABI(\n  args: InputMultiSigData,\n  functionAbi: EntryFunctionABI,\n): TransactionPayloadMultisig;\nexport function generateTransactionPayloadWithABI(\n  args: InputGenerateTransactionPayloadData,\n  functionAbi: EntryFunctionABI,\n): AnyTransactionPayloadInstance;\nexport function generateTransactionPayloadWithABI(\n  args: InputGenerateTransactionPayloadData,\n  functionAbi: EntryFunctionABI,\n): AnyTransactionPayloadInstance {\n  if (isScriptDataInput(args)) {\n    return generateTransactionPayloadScript(args);\n  }\n\n  const { moduleAddress, moduleName, functionName } = getFunctionParts(args.function);\n\n  // Ensure that all type arguments are typed properly\n  const typeArguments = standardizeTypeTags(args.typeArguments);\n\n  // Check the type argument count against the ABI\n  if (typeArguments.length !== functionAbi.typeParameters.length) {\n    throw new Error(\n      `Type argument count mismatch, expected ${functionAbi.typeParameters.length}, received ${typeArguments.length}`,\n    );\n  }\n\n  // Check all BCS types, and convert any non-BCS types\n  const functionArguments: Array<EntryFunctionArgumentTypes> = args.functionArguments.map((arg, i) =>\n    convertArgument(args.function, functionAbi, arg, i, typeArguments),\n  );\n\n  // Check that all arguments are accounted for\n  if (functionArguments.length !== functionAbi.parameters.length) {\n    throw new Error(\n      // eslint-disable-next-line max-len\n      `Too few arguments for '${moduleAddress}::${moduleName}::${functionName}', expected ${functionAbi.parameters.length} but got ${functionArguments.length}`,\n    );\n  }\n\n  // Generate entry function payload\n  const entryFunctionPayload = EntryFunction.build(\n    `${moduleAddress}::${moduleName}`,\n    functionName,\n    typeArguments,\n    functionArguments,\n  );\n\n  // Send it as multi sig if it's a multisig payload\n  if (\"multisigAddress\" in args) {\n    let multisigAddress: AccountAddress;\n    if (typeof args.multisigAddress === \"string\") {\n      multisigAddress = AccountAddress.fromString(args.multisigAddress);\n    } else {\n      multisigAddress = args.multisigAddress;\n    }\n    return new TransactionPayloadMultisig(\n      new MultiSig(multisigAddress, new MultisigTransactionPayload(entryFunctionPayload)),\n    );\n  }\n\n  // Otherwise send as an entry function\n  return new TransactionPayloadEntryFunction(entryFunctionPayload);\n}\n\nfunction generateTransactionPayloadScript(args: InputScriptData) {\n  return new TransactionPayloadScript(\n    new Script(Hex.fromHexInput(args.bytecode).toUint8Array(), args.typeArguments ?? [], args.functionArguments),\n  );\n}\n\n/**\n * Generates a raw transaction\n *\n * @param args.aptosConfig AptosConfig\n * @param args.sender The transaction's sender account address as a hex input\n * @param args.payload The transaction payload - can create by using generateTransactionPayload()\n *\n * @returns RawTransaction\n */\nexport async function generateRawTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: HexInput;\n  payload: AnyTransactionPayloadInstance;\n  options?: InputGenerateTransactionOptions;\n}): Promise<RawTransaction> {\n  const { aptosConfig, sender, payload, options } = args;\n\n  const getSequenceNumber = options?.accountSequenceNumber\n    ? Promise.resolve({ sequence_number: options.accountSequenceNumber })\n    : getInfo({ aptosConfig, accountAddress: sender });\n\n  const getChainId = NetworkToChainId[aptosConfig.network]\n    ? Promise.resolve({ chain_id: NetworkToChainId[aptosConfig.network] })\n    : getLedgerInfo({ aptosConfig });\n\n  const getGasUnitPrice = options?.gasUnitPrice\n    ? Promise.resolve({ gas_estimate: options.gasUnitPrice })\n    : getGasPriceEstimation({ aptosConfig });\n\n  const [{ sequence_number: sequenceNumber }, { chain_id: chainId }, { gas_estimate: gasEstimate }] = await Promise.all(\n    [getSequenceNumber, getChainId, getGasUnitPrice],\n  );\n\n  const { maxGasAmount, gasUnitPrice, expireTimestamp } = {\n    maxGasAmount: BigInt(DEFAULT_MAX_GAS_AMOUNT),\n    gasUnitPrice: BigInt(gasEstimate),\n    expireTimestamp: BigInt(Math.floor(Date.now() / 1000) + DEFAULT_TXN_EXP_SEC_FROM_NOW),\n    ...options,\n  };\n\n  return new RawTransaction(\n    AccountAddress.fromHexInput(sender),\n    BigInt(sequenceNumber),\n    payload,\n    BigInt(maxGasAmount),\n    BigInt(gasUnitPrice),\n    BigInt(expireTimestamp),\n    new ChainId(chainId),\n  );\n}\n\n/**\n * We are defining function signatures, each with its specific input and output.\n * These are the possible function signature for our `generateTransaction` function.\n * When we call our `generateTransaction` function with the relevant type properties,\n * Typescript can infer the return type based on the appropriate function overload.\n */\nexport async function buildTransaction(\n  args: InputGenerateSingleSignerRawTransactionArgs,\n): Promise<InputSingleSignerTransaction>;\nexport async function buildTransaction(\n  args: InputGenerateFeePayerRawTransactionArgs,\n): Promise<InputFeePayerTransaction>;\nexport async function buildTransaction(\n  args: InputGenerateMultiAgentRawTransactionArgs,\n): Promise<InputMultiAgentTransaction>;\nexport async function buildTransaction(args: InputGenerateRawTransactionArgs): Promise<AnyRawTransaction>;\n/**\n * Generates a transaction based on the provided arguments\n *\n * Note: we can start with one function to support all different payload/transaction types,\n * and if to complex to use, we could have function for each type\n *\n * @param args.aptosConfig AptosConfig\n * @param args.sender The transaction's sender account address as a hex input\n * @param args.payload The transaction payload - can create by using generateTransactionPayload()\n * @param args.options optional. Transaction options object\n * @param args.secondarySignerAddresses optional. For when want to create a multi signers transaction\n * @param args.feePayerAddress optional. For when want to create a fee payer (aka sponsored) transaction\n *\n * @return An Aptos raw transaction type (note that it holds the raw transaction as a bcs serialized data)\n * ```\n * {\n *  rawTransaction: Uint8Array,\n *  secondarySignerAddresses? : Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n */\nexport async function buildTransaction(args: InputGenerateRawTransactionArgs): Promise<AnyRawTransaction> {\n  const { aptosConfig, sender, payload, options, secondarySignerAddresses, feePayerAddress } = args;\n  // generate raw transaction\n  const rawTxn = await generateRawTransaction({\n    aptosConfig,\n    sender,\n    payload,\n    options,\n  });\n\n  if (feePayerAddress) {\n    const signers: Array<AccountAddress> = secondarySignerAddresses\n      ? secondarySignerAddresses.map((signer) => AccountAddress.fromHexInput(signer))\n      : [];\n\n    return {\n      rawTransaction: rawTxn.bcsToBytes(),\n      secondarySignerAddresses: signers,\n      feePayerAddress: AccountAddress.fromHexInput(feePayerAddress),\n    };\n  }\n\n  if (secondarySignerAddresses) {\n    const signers: Array<AccountAddress> = secondarySignerAddresses.map((signer) =>\n      AccountAddress.fromHexInput(signer),\n    );\n\n    return {\n      rawTransaction: rawTxn.bcsToBytes(),\n      secondarySignerAddresses: signers,\n    };\n  }\n  // return the raw transaction\n  return { rawTransaction: rawTxn.bcsToBytes() };\n}\n\n/**\n * Simulate a transaction before signing and submit to chain\n *\n * @param args.transaction A aptos transaction type to sign\n * @param args.signerPublicKey The signer public key\n * @param args.secondarySignersPublicKeys optional. The secondary signers public keys if multi signers transaction\n * @param args.feePayerPublicKey optional. The fee payer public key is a fee payer (aka sponsored) transaction\n * @param args.options optional. SimulateTransactionOptions\n *\n * @returns A signed serialized transaction that can be simulated\n */\nexport function generateSignedTransactionForSimulation(args: InputSimulateTransactionData): Uint8Array {\n  const { signerPublicKey, transaction, secondarySignersPublicKeys, feePayerPublicKey } = args;\n\n  const deserializer = new Deserializer(transaction.rawTransaction);\n  const deserializedTransaction = RawTransaction.deserialize(deserializer);\n\n  const accountAuthenticator = getAuthenticatorForSimulation(signerPublicKey);\n  // fee payer transaction\n  if (transaction.feePayerAddress) {\n    const transactionToSign = new FeePayerRawTransaction(\n      deserializedTransaction,\n      transaction.secondarySignerAddresses ?? [],\n      transaction.feePayerAddress,\n    );\n\n    let secondaryAccountAuthenticators: Array<AccountAuthenticator> = [];\n    if (secondarySignersPublicKeys) {\n      secondaryAccountAuthenticators = secondarySignersPublicKeys.map((publicKey) =>\n        getAuthenticatorForSimulation(publicKey),\n      );\n    }\n\n    const feePayerAuthenticator = getAuthenticatorForSimulation(feePayerPublicKey!);\n\n    const transactionAuthenticator = new TransactionAuthenticatorFeePayer(\n      accountAuthenticator,\n      transaction.secondarySignerAddresses ?? [],\n      secondaryAccountAuthenticators,\n      {\n        address: transaction.feePayerAddress,\n        authenticator: feePayerAuthenticator,\n      },\n    );\n    return new SignedTransaction(transactionToSign.raw_txn, transactionAuthenticator).bcsToBytes();\n  }\n\n  // multi agent transaction\n  if (transaction.secondarySignerAddresses) {\n    const transactionToSign = new MultiAgentRawTransaction(\n      deserializedTransaction,\n      transaction.secondarySignerAddresses,\n    );\n\n    let secondaryAccountAuthenticators: Array<AccountAuthenticator> = [];\n\n    secondaryAccountAuthenticators = secondarySignersPublicKeys!.map((publicKey) =>\n      getAuthenticatorForSimulation(publicKey),\n    );\n\n    const transactionAuthenticator = new TransactionAuthenticatorMultiAgent(\n      accountAuthenticator,\n      transaction.secondarySignerAddresses,\n      secondaryAccountAuthenticators,\n    );\n\n    return new SignedTransaction(transactionToSign.raw_txn, transactionAuthenticator).bcsToBytes();\n  }\n\n  // raw transaction\n  let transactionAuthenticator;\n  if (accountAuthenticator instanceof AccountAuthenticatorEd25519) {\n    transactionAuthenticator = new TransactionAuthenticatorEd25519(\n      accountAuthenticator.public_key,\n      accountAuthenticator.signature,\n    );\n  } else if (accountAuthenticator instanceof AccountAuthenticatorSingleKey) {\n    transactionAuthenticator = new TransactionAuthenticatorSingleSender(accountAuthenticator);\n  } else {\n    throw new Error(\"Invalid public key\");\n  }\n  return new SignedTransaction(deserializedTransaction, transactionAuthenticator).bcsToBytes();\n}\n\nexport function getAuthenticatorForSimulation(publicKey: PublicKey) {\n  // TODO add support for AnyMultiKey\n  if (publicKey instanceof AnyPublicKey) {\n    if (publicKey.publicKey instanceof Ed25519PublicKey) {\n      return new AccountAuthenticatorSingleKey(publicKey, new AnySignature(new Ed25519Signature(new Uint8Array(64))));\n    }\n    if (publicKey.publicKey instanceof Secp256k1PublicKey) {\n      return new AccountAuthenticatorSingleKey(publicKey, new AnySignature(new Secp256k1Signature(new Uint8Array(64))));\n    }\n  }\n\n  // legacy code\n  // TODO add support to legacy multied25519\n  return new AccountAuthenticatorEd25519(\n    new Ed25519PublicKey(publicKey.toUint8Array()),\n    new Ed25519Signature(new Uint8Array(64)),\n  );\n}\n\n/**\n * Sign a transaction that can later be submitted to chain\n *\n * @param args.signer The signer account to sign the transaction\n * @param args.transaction A aptos transaction type to sign\n *\n * @return The signer AccountAuthenticator\n */\nexport function sign(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n  const { signer, transaction } = args;\n\n  const transactionToSign = deriveTransactionType(transaction);\n\n  // get the signing message\n  const message = getSigningMessage(transactionToSign);\n\n  // account.signMessage\n  const signerSignature = signer.sign(message);\n\n  // return account authentication\n  switch (signer.signingScheme) {\n    case SigningScheme.Ed25519:\n      return new AccountAuthenticatorEd25519(\n        new Ed25519PublicKey(signer.publicKey.toUint8Array()),\n        new Ed25519Signature(signerSignature.toUint8Array()),\n      );\n    case SigningScheme.SingleKey:\n      return new AccountAuthenticatorSingleKey(signer.publicKey as AnyPublicKey, new AnySignature(signerSignature));\n    // TODO support MultiEd25519\n    default:\n      throw new Error(`Cannot sign transaction, signing scheme ${signer.signingScheme} not supported`);\n  }\n}\n\n/**\n * Prepare a transaction to be submitted to chain\n *\n * @param args.transaction A aptos transaction type\n * @param args.senderAuthenticator The account authenticator of the transaction sender\n * @param args.secondarySignerAuthenticators optional. For when the transaction is a multi signers transaction\n *\n * @returns A SignedTransaction\n */\nexport function generateSignedTransaction(args: {\n  transaction: AnyRawTransaction;\n  senderAuthenticator: AccountAuthenticator;\n  secondarySignerAuthenticators?: {\n    feePayerAuthenticator?: AccountAuthenticator;\n    additionalSignersAuthenticators?: Array<AccountAuthenticator>;\n  };\n}): Uint8Array {\n  const { transaction, senderAuthenticator, secondarySignerAuthenticators } = args;\n\n  const transactionToSubmit = deriveTransactionType(transaction);\n\n  if (secondarySignerAuthenticators) {\n    return generateMultiSignersSignedTransaction(\n      transactionToSubmit as MultiAgentRawTransaction | FeePayerRawTransaction,\n      senderAuthenticator,\n      secondarySignerAuthenticators,\n    );\n  }\n\n  // submit single signer transaction\n\n  // check what instance is accountAuthenticator\n  if (senderAuthenticator instanceof AccountAuthenticatorEd25519) {\n    const transactionAuthenticator = new TransactionAuthenticatorEd25519(\n      senderAuthenticator.public_key,\n      senderAuthenticator.signature,\n    );\n    return new SignedTransaction(transactionToSubmit as RawTransaction, transactionAuthenticator).bcsToBytes();\n  }\n\n  if (\n    senderAuthenticator instanceof AccountAuthenticatorSingleKey ||\n    senderAuthenticator instanceof AccountAuthenticatorMultiKey\n  ) {\n    const transactionAuthenticator = new TransactionAuthenticatorSingleSender(senderAuthenticator);\n    return new SignedTransaction(transactionToSubmit as RawTransaction, transactionAuthenticator).bcsToBytes();\n  }\n\n  throw new Error(\n    `Cannot generate a signed transaction, ${senderAuthenticator} is not a supported account authentication scheme`,\n  );\n}\n\n/**\n * Derive the raw transaction type - FeePayerRawTransaction or MultiAgentRawTransaction or RawTransaction\n *\n * @param transaction A aptos transaction type\n *\n * @returns FeePayerRawTransaction | MultiAgentRawTransaction | RawTransaction\n */\nexport function deriveTransactionType(transaction: AnyRawTransaction): AnyRawTransactionInstance {\n  const deserializer = new Deserializer(transaction.rawTransaction);\n  const deserializedTransaction = RawTransaction.deserialize(deserializer);\n\n  if (transaction.feePayerAddress) {\n    return new FeePayerRawTransaction(\n      deserializedTransaction,\n      transaction.secondarySignerAddresses ?? [],\n      transaction.feePayerAddress,\n    );\n  }\n  if (transaction.secondarySignerAddresses) {\n    return new MultiAgentRawTransaction(deserializedTransaction, transaction.secondarySignerAddresses);\n  }\n\n  return deserializedTransaction as RawTransaction;\n}\n\n/**\n * Generate a multi signers signed transaction that can be submitted to chain\n *\n * @param transaction MultiAgentRawTransaction | FeePayerRawTransaction\n * @param senderAuthenticator The account authenticator of the transaction sender\n * @param secondarySignerAuthenticators The extra signers account Authenticators\n *\n * @returns A SignedTransaction\n */\nexport function generateMultiSignersSignedTransaction(\n  transaction: MultiAgentRawTransaction | FeePayerRawTransaction,\n  senderAuthenticator: AccountAuthenticator,\n  secondarySignerAuthenticators: {\n    feePayerAuthenticator?: AccountAuthenticator;\n    additionalSignersAuthenticators?: Array<AccountAuthenticator>;\n  },\n) {\n  if (transaction instanceof FeePayerRawTransaction) {\n    if (!secondarySignerAuthenticators.feePayerAuthenticator) {\n      throw new Error(\"Must provide a feePayerAuthenticator argument to generate a signed fee payer transaction\");\n    }\n    const { feePayerAuthenticator, additionalSignersAuthenticators } = secondarySignerAuthenticators;\n    const txAuthenticatorFeePayer = new TransactionAuthenticatorFeePayer(\n      senderAuthenticator,\n      transaction.secondary_signer_addresses,\n      additionalSignersAuthenticators ?? [],\n      {\n        address: transaction.fee_payer_address,\n        authenticator: feePayerAuthenticator,\n      },\n    );\n    return new SignedTransaction(transaction.raw_txn, txAuthenticatorFeePayer).bcsToBytes();\n  }\n  if (transaction instanceof MultiAgentRawTransaction) {\n    if (!secondarySignerAuthenticators.additionalSignersAuthenticators) {\n      throw new Error(\n        \"Must provide a additionalSignersAuthenticators argument to generate a signed multi agent transaction\",\n      );\n    }\n    const { additionalSignersAuthenticators } = secondarySignerAuthenticators;\n    const multiAgentAuthenticator = new TransactionAuthenticatorMultiAgent(\n      senderAuthenticator,\n      transaction.secondary_signer_addresses,\n      additionalSignersAuthenticators ?? [],\n    );\n    return new SignedTransaction(transaction.raw_txn, multiAgentAuthenticator).bcsToBytes();\n  }\n\n  throw new Error(\n    `Cannot prepare multi signers transaction to submission, ${typeof transaction} transaction is not supported`,\n  );\n}\n\nexport function getSigningMessage(rawTxn: AnyRawTransactionInstance): Uint8Array {\n  const hash = sha3Hash.create();\n\n  if (rawTxn instanceof RawTransaction) {\n    hash.update(RAW_TRANSACTION_SALT);\n  } else if (rawTxn instanceof MultiAgentRawTransaction) {\n    hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n  } else if (rawTxn instanceof FeePayerRawTransaction) {\n    hash.update(RAW_TRANSACTION_WITH_DATA_SALT);\n  } else {\n    throw new Error(`Unknown transaction type to sign on: ${rawTxn}`);\n  }\n\n  const prefix = hash.digest();\n\n  const body = rawTxn.bcsToBytes();\n\n  const mergedArray = new Uint8Array(prefix.length + body.length);\n  mergedArray.set(prefix);\n  mergedArray.set(body, prefix.length);\n\n  return mergedArray;\n}\n", "import { Serializer, Deserializer } from \"../../bcs\";\nimport { AnySignatureVariant } from \"../../types\";\nimport { Signature } from \"./asymmetricCrypto\";\nimport { Ed25519Signature } from \"./ed25519\";\nimport { Secp256k1Signature } from \"./secp256k1\";\n\nexport class AnySignature extends Signature {\n  public readonly signature: Signature;\n\n  constructor(signature: Signature) {\n    super();\n    this.signature = signature;\n  }\n\n  /**\n   * Get the public key in bytes (Uint8Array).\n   *\n   * @returns Uint8Array representation of the public key\n   */\n  toUint8Array(): Uint8Array {\n    return this.signature.toUint8Array();\n  }\n\n  /**\n   * Get the public key as a hex string with the 0x prefix.\n   *\n   * @returns string representation of the public key\n   */\n  toString(): string {\n    return this.signature.toString();\n  }\n\n  serialize(serializer: Serializer): void {\n    if (this.signature instanceof Ed25519Signature) {\n      serializer.serializeU32AsUleb128(AnySignatureVariant.Ed25519);\n      this.signature.serialize(serializer);\n    } else if (this.signature instanceof Secp256k1Signature) {\n      serializer.serializeU32AsUleb128(AnySignatureVariant.Secp256k1);\n      this.signature.serialize(serializer);\n    } else {\n      throw new Error(\"Unknown signature type\");\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): AnySignature {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case AnySignatureVariant.Ed25519:\n        return new AnySignature(Ed25519Signature.load(deserializer));\n      case AnySignatureVariant.Secp256k1:\n        return new AnySignature(Secp256k1Signature.load(deserializer));\n      default:\n        throw new Error(`Unknown variant index for AnySignature: ${index}`);\n    }\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Sleep the current thread for the given amount of time\n * @param timeMs time in milliseconds to sleep\n */\nexport async function sleep(timeMs: number): Promise<null> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeMs);\n  });\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/transaction}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * transaction namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AptosApiError, getAptosFullNode, paginateWithCursor } from \"../client\";\nimport {\n  TransactionResponseType,\n  type AnyNumber,\n  type GasEstimation,\n  type HexInput,\n  type PaginationArgs,\n  type TransactionResponse,\n  WaitForTransactionOptions,\n} from \"../types\";\nimport { DEFAULT_TXN_TIMEOUT_SEC } from \"../utils/const\";\nimport { sleep } from \"../utils/helpers\";\nimport { memoizeAsync } from \"../utils/memoize\";\nimport { getIndexerLastSuccessVersion } from \"./general\";\n\nexport async function getTransactions(args: {\n  aptosConfig: AptosConfig;\n  options?: PaginationArgs;\n}): Promise<TransactionResponse[]> {\n  const { aptosConfig, options } = args;\n  return paginateWithCursor<{}, TransactionResponse[]>({\n    aptosConfig,\n    originMethod: \"getTransactions\",\n    path: \"transactions\",\n    params: { start: options?.offset, limit: options?.limit },\n  });\n}\n\nexport async function getGasPriceEstimation(args: { aptosConfig: AptosConfig }) {\n  const { aptosConfig } = args;\n\n  return memoizeAsync(\n    async () => {\n      const { data } = await getAptosFullNode<{}, GasEstimation>({\n        aptosConfig,\n        originMethod: \"getGasPriceEstimation\",\n        path: \"estimate_gas_price\",\n      });\n      return data;\n    },\n    `gas-price-${aptosConfig.network}`,\n    1000 * 60 * 5, // 5 minutes\n  )();\n}\n\nexport async function getTransactionByVersion(args: {\n  aptosConfig: AptosConfig;\n  ledgerVersion: AnyNumber;\n}): Promise<TransactionResponse> {\n  const { aptosConfig, ledgerVersion } = args;\n  const { data } = await getAptosFullNode<{}, TransactionResponse>({\n    aptosConfig,\n    originMethod: \"getTransactionByVersion\",\n    path: `transactions/by_version/${ledgerVersion}`,\n  });\n  return data;\n}\n\nexport async function getTransactionByHash(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n}): Promise<TransactionResponse> {\n  const { aptosConfig, transactionHash } = args;\n  const { data } = await getAptosFullNode<{}, TransactionResponse>({\n    aptosConfig,\n    path: `transactions/by_hash/${transactionHash}`,\n    originMethod: \"getTransactionByHash\",\n  });\n  return data;\n}\n\nexport async function isTransactionPending(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n}): Promise<boolean> {\n  const { aptosConfig, transactionHash } = args;\n  try {\n    const transaction = await getTransactionByHash({ aptosConfig, transactionHash });\n    return transaction.type === TransactionResponseType.Pending;\n  } catch (e: any) {\n    if (e?.status === 404) {\n      return true;\n    }\n    throw e;\n  }\n}\n\nexport async function waitForTransaction(args: {\n  aptosConfig: AptosConfig;\n  transactionHash: HexInput;\n  options?: WaitForTransactionOptions;\n}): Promise<TransactionResponse> {\n  const { aptosConfig, transactionHash, options } = args;\n  const timeoutSecs = options?.timeoutSecs ?? DEFAULT_TXN_TIMEOUT_SEC;\n  const checkSuccess = options?.checkSuccess ?? true;\n  const indexerVersionCheck = options?.indexerVersionCheck ?? true;\n\n  let isPending = true;\n  let timeElapsed = 0;\n  let lastTxn: TransactionResponse | undefined;\n  let lastError: AptosApiError | undefined;\n  let backoffIntervalMs = 200;\n  const backoffMultiplier = 1.5;\n\n  while (isPending) {\n    if (timeElapsed >= timeoutSecs) {\n      break;\n    }\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      lastTxn = await getTransactionByHash({ aptosConfig, transactionHash });\n\n      isPending = lastTxn.type === TransactionResponseType.Pending;\n\n      if (!isPending) {\n        break;\n      }\n    } catch (e) {\n      // In short, this means we will retry if it was an AptosApiError and the code was 404 or 5xx.\n      const isAptosApiError = e instanceof AptosApiError;\n      if (!isAptosApiError) {\n        throw e; // This would be unexpected\n      }\n      lastError = e;\n      const isRequestError = e.status !== 404 && e.status >= 400 && e.status < 500;\n      if (isRequestError) {\n        throw e;\n      }\n    }\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(backoffIntervalMs);\n    timeElapsed += backoffIntervalMs / 1000; // Convert to seconds\n    backoffIntervalMs *= backoffMultiplier;\n  }\n\n  // There is a chance that lastTxn is still undefined. Let's throw the last error otherwise a WaitForTransactionError\n  if (lastTxn === undefined) {\n    if (lastError) {\n      throw lastError;\n    } else {\n      throw new WaitForTransactionError(\n        `Fetching transaction ${transactionHash} failed and timed out after ${timeoutSecs} seconds`,\n        lastTxn,\n      );\n    }\n  }\n\n  if (lastTxn.type === TransactionResponseType.Pending) {\n    throw new WaitForTransactionError(\n      `Transaction ${transactionHash} timed out in pending state after ${timeoutSecs} seconds`,\n      lastTxn,\n    );\n  }\n  if (!checkSuccess) {\n    return lastTxn;\n  }\n  if (!lastTxn.success) {\n    throw new FailedTransactionError(\n      `Transaction ${transactionHash} failed with an error: ${(lastTxn as any).vm_status}`,\n      lastTxn,\n    );\n  }\n\n  // Make sure indexer is synced with the latest ledger version\n  if (indexerVersionCheck) {\n    try {\n      await waitForLastSuccessIndexerVersionSync({ aptosConfig, ledgerVersion: Number(lastTxn.version) });\n    } catch (_e) {\n      throw new WaitForTransactionError(\n        // eslint-disable-next-line max-len\n        `Transaction ${transactionHash} committed, but timed out waiting for indexer to sync with ledger version ${lastTxn.version}.` +\n          \"You can disable this check by setting `indexerVersionCheck` to false in the `extraArgs` parameter.\",\n        lastTxn,\n      );\n    }\n  }\n\n  return lastTxn;\n}\n\n/**\n * Waits for the indexer to sync up to the ledgerVersion. Timeout is 3 seconds.\n */\nasync function waitForLastSuccessIndexerVersionSync(args: {\n  aptosConfig: AptosConfig;\n  ledgerVersion: number;\n}): Promise<void> {\n  const { aptosConfig, ledgerVersion } = args;\n  const timeoutMilliseconds = 3000; // 3 seconds\n  const startTime = new Date().getTime();\n  let indexerVersion = -1;\n\n  while (indexerVersion < ledgerVersion) {\n    // check for timeout\n    if (new Date().getTime() - startTime > timeoutMilliseconds) {\n      throw new Error(\"waitForLastSuccessIndexerVersionSync timeout\");\n    }\n\n    // eslint-disable-next-line no-await-in-loop\n    indexerVersion = await getIndexerLastSuccessVersion({ aptosConfig });\n    if (indexerVersion >= ledgerVersion) {\n      // break out immediately if we are synced\n      break;\n    }\n\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(200);\n  }\n}\n\n/**\n * This error is used by `waitForTransaction` when waiting for a\n * transaction to time out or when the transaction response is undefined\n */\nexport class WaitForTransactionError extends Error {\n  public readonly lastSubmittedTransaction: TransactionResponse | undefined;\n\n  constructor(message: string, lastSubmittedTransaction: TransactionResponse | undefined) {\n    super(message);\n    this.lastSubmittedTransaction = lastSubmittedTransaction;\n  }\n}\n\n/**\n * This error is used by `waitForTransaction` if `checkSuccess` is true.\n * See that function for more information.\n */\nexport class FailedTransactionError extends Error {\n  public readonly transaction: TransactionResponse;\n\n  constructor(message: string, transaction: TransactionResponse) {\n    super(message);\n    this.transaction = transaction;\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Serializer, Deserializer, Serializable } from \"../../bcs\";\nimport { AnyPublicKey } from \"../../core/crypto/anyPublicKey\";\nimport { AnySignature } from \"../../core/crypto/anySignature\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../../core/crypto/multiEd25519\";\nimport { MultiKey } from \"../../core/crypto/multiKey\";\nimport { AccountAuthenticatorVariant } from \"../../types\";\n\nexport abstract class AccountAuthenticator extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): AccountAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case AccountAuthenticatorVariant.Ed25519:\n        return AccountAuthenticatorEd25519.load(deserializer);\n      case AccountAuthenticatorVariant.MultiEd25519:\n        return AccountAuthenticatorMultiEd25519.load(deserializer);\n      case AccountAuthenticatorVariant.SingleKey:\n        return AccountAuthenticatorSingleKey.load(deserializer);\n      case AccountAuthenticatorVariant.MultiKey:\n        return AccountAuthenticatorMultiKey.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for AccountAuthenticator: ${index}`);\n    }\n  }\n}\n\n/**\n * Transaction authenticator Ed25519 for a multi signer transaction\n *\n * @param public_key Account's Ed25519 public key.\n * @param signature Account's Ed25519 signature\n *\n */\nexport class AccountAuthenticatorEd25519 extends AccountAuthenticator {\n  public readonly public_key: Ed25519PublicKey;\n\n  public readonly signature: Ed25519Signature;\n\n  constructor(public_key: Ed25519PublicKey, signature: Ed25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.Ed25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorEd25519(public_key, signature);\n  }\n}\n\n/**\n * Transaction authenticator Multi Ed25519 for a multi signers transaction\n *\n * @param public_key Account's MultiEd25519 public key.\n * @param signature Account's MultiEd25519 signature\n *\n */\nexport class AccountAuthenticatorMultiEd25519 extends AccountAuthenticator {\n  public readonly public_key: MultiEd25519PublicKey;\n\n  public readonly signature: MultiEd25519Signature;\n\n  constructor(public_key: MultiEd25519PublicKey, signature: MultiEd25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.MultiEd25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new AccountAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\n/**\n * AccountAuthenticatorSingleKey for a single signer\n *\n * @param public_key AnyPublicKey\n * @param signature AnySignature\n *\n */\nexport class AccountAuthenticatorSingleKey extends AccountAuthenticator {\n  public readonly public_key: AnyPublicKey;\n\n  public readonly signature: AnySignature;\n\n  constructor(public_key: AnyPublicKey, signature: AnySignature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.SingleKey);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorSingleKey {\n    const public_key = AnyPublicKey.deserialize(deserializer);\n    const signature = AnySignature.deserialize(deserializer);\n    return new AccountAuthenticatorSingleKey(public_key, signature);\n  }\n}\n\n/**\n * AccountAuthenticatorMultiKey for a multi signer\n *\n * @param public_keys MultiKey\n * @param signatures Signature\n *\n */\nexport class AccountAuthenticatorMultiKey extends AccountAuthenticator {\n  public readonly public_keys: MultiKey;\n\n  public readonly signatures: Array<AnySignature>;\n\n  public readonly signatures_bitmap: Uint8Array;\n\n  constructor(public_keys: MultiKey, signatures: Array<AnySignature>, signatures_bitmap: Uint8Array) {\n    super();\n    this.public_keys = public_keys;\n    this.signatures = signatures;\n    this.signatures_bitmap = signatures_bitmap;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(AccountAuthenticatorVariant.MultiKey);\n    this.public_keys.serialize(serializer);\n    serializer.serializeVector<AnySignature>(this.signatures);\n    serializer.serializeBytes(this.signatures_bitmap);\n  }\n\n  static load(deserializer: Deserializer): AccountAuthenticatorMultiKey {\n    const public_keys = MultiKey.deserialize(deserializer);\n    const signatures = deserializer.deserializeVector(AnySignature);\n    const signatures_bitmap = deserializer.deserializeBytes();\n    return new AccountAuthenticatorMultiKey(public_keys, signatures, signatures_bitmap);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { AccountAuthenticator } from \"./account\";\nimport { Deserializer, Serializable, Serializer } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { Ed25519PublicKey, Ed25519Signature } from \"../../core/crypto/ed25519\";\nimport { MultiEd25519PublicKey, MultiEd25519Signature } from \"../../core/crypto/multiEd25519\";\nimport { TransactionAuthenticatorVariant } from \"../../types\";\n\nexport abstract class TransactionAuthenticator extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TransactionAuthenticator {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionAuthenticatorVariant.Ed25519:\n        return TransactionAuthenticatorEd25519.load(deserializer);\n      case TransactionAuthenticatorVariant.MultiEd25519:\n        return TransactionAuthenticatorMultiEd25519.load(deserializer);\n      case TransactionAuthenticatorVariant.MultiAgent:\n        return TransactionAuthenticatorMultiAgent.load(deserializer);\n      case TransactionAuthenticatorVariant.FeePayer:\n        return TransactionAuthenticatorFeePayer.load(deserializer);\n      case TransactionAuthenticatorVariant.SingleSender:\n        return TransactionAuthenticatorSingleSender.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionAuthenticator: ${index}`);\n    }\n  }\n}\n\n/**\n * Transaction authenticator Ed25519 for a single signer transaction\n *\n * @param public_key Client's public key.\n * @param signature Ed25519 signature of a raw transaction.\n * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n * for details about generating a signature.\n */\nexport class TransactionAuthenticatorEd25519 extends TransactionAuthenticator {\n  public readonly public_key: Ed25519PublicKey;\n\n  public readonly signature: Ed25519Signature;\n\n  constructor(public_key: Ed25519PublicKey, signature: Ed25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.Ed25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorEd25519 {\n    const public_key = Ed25519PublicKey.deserialize(deserializer);\n    const signature = Ed25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorEd25519(public_key, signature);\n  }\n}\n\n/**\n * Transaction authenticator Ed25519 for a multi signers transaction\n *\n * @param public_key Client's public key.\n * @param signature Multi Ed25519 signature of a raw transaction.\n *\n */\nexport class TransactionAuthenticatorMultiEd25519 extends TransactionAuthenticator {\n  public readonly public_key: MultiEd25519PublicKey;\n\n  public readonly signature: MultiEd25519Signature;\n\n  constructor(public_key: MultiEd25519PublicKey, signature: MultiEd25519Signature) {\n    super();\n    this.public_key = public_key;\n    this.signature = signature;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.MultiEd25519);\n    this.public_key.serialize(serializer);\n    this.signature.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiEd25519 {\n    const public_key = MultiEd25519PublicKey.deserialize(deserializer);\n    const signature = MultiEd25519Signature.deserialize(deserializer);\n    return new TransactionAuthenticatorMultiEd25519(public_key, signature);\n  }\n}\n\n/**\n * Transaction authenticator for a multi-agent transaction\n *\n * @param sender Sender account authenticator\n * @param secondary_signer_addresses Secondary signers address\n * @param secondary_signers Secondary signers account authenticators\n *\n */\nexport class TransactionAuthenticatorMultiAgent extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  public readonly secondary_signers: Array<AccountAuthenticator>;\n\n  constructor(\n    sender: AccountAuthenticator,\n    secondary_signer_addresses: Array<AccountAddress>,\n    secondary_signers: Array<AccountAuthenticator>,\n  ) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.MultiAgent);\n    this.sender.serialize(serializer);\n    serializer.serializeVector<AccountAddress>(this.secondary_signer_addresses);\n    serializer.serializeVector<AccountAuthenticator>(this.secondary_signers);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializer.deserializeVector(AccountAddress);\n    const secondary_signers = deserializer.deserializeVector(AccountAuthenticator);\n    return new TransactionAuthenticatorMultiAgent(sender, secondary_signer_addresses, secondary_signers);\n  }\n}\n\n/**\n * Transaction authenticator for a fee payer transaction\n *\n * @param sender Sender account authenticator\n * @param secondary_signer_addresses Secondary signers address\n * @param secondary_signers Secondary signers account authenticators\n * @param fee_payer Object of the fee payer account address and the fee payer authentication\n *\n */\nexport class TransactionAuthenticatorFeePayer extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  public readonly secondary_signers: Array<AccountAuthenticator>;\n\n  public readonly fee_payer: {\n    address: AccountAddress;\n    authenticator: AccountAuthenticator;\n  };\n\n  constructor(\n    sender: AccountAuthenticator,\n    secondary_signer_addresses: Array<AccountAddress>,\n    secondary_signers: Array<AccountAuthenticator>,\n    fee_payer: { address: AccountAddress; authenticator: AccountAuthenticator },\n  ) {\n    super();\n    this.sender = sender;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.secondary_signers = secondary_signers;\n    this.fee_payer = fee_payer;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.FeePayer);\n    this.sender.serialize(serializer);\n    serializer.serializeVector<AccountAddress>(this.secondary_signer_addresses);\n    serializer.serializeVector<AccountAuthenticator>(this.secondary_signers);\n    this.fee_payer.address.serialize(serializer);\n    this.fee_payer.authenticator.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorMultiAgent {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    const secondary_signer_addresses = deserializer.deserializeVector(AccountAddress);\n    const secondary_signers = deserializer.deserializeVector(AccountAuthenticator);\n    const address = AccountAddress.deserialize(deserializer);\n    const authenticator = AccountAuthenticator.deserialize(deserializer);\n    const fee_payer = { address, authenticator };\n    return new TransactionAuthenticatorFeePayer(sender, secondary_signer_addresses, secondary_signers, fee_payer);\n  }\n}\n\n/**\n * Single Sender authenticator for a single signer transaction\n *\n * @param sender AccountAuthenticator\n */\nexport class TransactionAuthenticatorSingleSender extends TransactionAuthenticator {\n  public readonly sender: AccountAuthenticator;\n\n  constructor(sender: AccountAuthenticator) {\n    super();\n    this.sender = sender;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionAuthenticatorVariant.SingleSender);\n    this.sender.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionAuthenticatorSingleSender {\n    const sender = AccountAuthenticator.deserialize(deserializer);\n    return new TransactionAuthenticatorSingleSender(sender);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializer, Serializable } from \"../../bcs/serializer\";\nimport { Deserializer } from \"../../bcs/deserializer\";\n\n/**\n * Representation of a ChainId that can serialized and deserialized\n */\nexport class ChainId extends Serializable {\n  public readonly chainId: number;\n\n  constructor(chainId: number) {\n    super();\n    this.chainId = chainId;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU8(this.chainId);\n  }\n\n  static deserialize(deserializer: Deserializer): ChainId {\n    const chainId = deserializer.deserializeU8();\n    return new ChainId(chainId);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\n\n/**\n * Representation of an Identifier that can serialized and deserialized.\n * We use Identifier to represent the module \"name\" in \"ModuleId\" and\n * the \"function name\" in \"EntryFunction\"\n */\nexport class Identifier extends Serializable {\n  public identifier: string;\n\n  constructor(identifier: string) {\n    super();\n    this.identifier = identifier;\n  }\n\n  public serialize(serializer: Serializer): void {\n    serializer.serializeStr(this.identifier);\n  }\n\n  static deserialize(deserializer: Deserializer): Identifier {\n    const identifier = deserializer.deserializeStr();\n    return new Identifier(identifier);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"./identifier\";\nimport { MoveModuleId } from \"../../types\";\n\n/**\n * Representation of a ModuleId that can serialized and deserialized\n * ModuleId means the module address (e.g \"0x1\") and the module name (e.g \"coin\")\n */\nexport class ModuleId extends Serializable {\n  public readonly address: AccountAddress;\n\n  public readonly name: Identifier;\n\n  /**\n   * Full name of a module.\n   * @param address The account address. e.g \"0x1\"\n   * @param name The module name under the \"address\". e.g \"coin\"\n   */\n  constructor(address: AccountAddress, name: Identifier) {\n    super();\n    this.address = address;\n    this.name = name;\n  }\n\n  /**\n   * Converts a string literal to a ModuleId\n   * @param moduleId String literal in format \"account_address::module_name\", e.g. \"0x1::coin\"\n   * @returns ModuleId\n   */\n  static fromStr(moduleId: MoveModuleId): ModuleId {\n    const parts = moduleId.split(\"::\");\n    if (parts.length !== 2) {\n      throw new Error(\"Invalid module id.\");\n    }\n    return new ModuleId(AccountAddress.fromString(parts[0]), new Identifier(parts[1]));\n  }\n\n  serialize(serializer: Serializer): void {\n    this.address.serialize(serializer);\n    this.name.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): ModuleId {\n    const address = AccountAddress.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    return new ModuleId(address, name);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"../instances/identifier\";\nimport { TypeTagVariants } from \"../../types\";\n\nexport abstract class TypeTag extends Serializable {\n  abstract serialize(serializer: Serializer): void;\n\n  static deserialize(deserializer: Deserializer): TypeTag {\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TypeTagVariants.Bool:\n        return TypeTagBool.load(deserializer);\n      case TypeTagVariants.U8:\n        return TypeTagU8.load(deserializer);\n      case TypeTagVariants.U64:\n        return TypeTagU64.load(deserializer);\n      case TypeTagVariants.U128:\n        return TypeTagU128.load(deserializer);\n      case TypeTagVariants.Address:\n        return TypeTagAddress.load(deserializer);\n      case TypeTagVariants.Signer:\n        return TypeTagSigner.load(deserializer);\n      case TypeTagVariants.Vector:\n        return TypeTagVector.load(deserializer);\n      case TypeTagVariants.Struct:\n        return TypeTagStruct.load(deserializer);\n      case TypeTagVariants.U16:\n        return TypeTagU16.load(deserializer);\n      case TypeTagVariants.U32:\n        return TypeTagU32.load(deserializer);\n      case TypeTagVariants.U256:\n        return TypeTagU256.load(deserializer);\n      case TypeTagVariants.Generic:\n        // This is only used for ABI representation, and cannot actually be used as a type.\n        return TypeTagGeneric.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TypeTag: ${index}`);\n    }\n  }\n\n  abstract toString(): string;\n\n  isBool(): this is TypeTagBool {\n    return this instanceof TypeTagBool;\n  }\n\n  isAddress(): this is TypeTagAddress {\n    return this instanceof TypeTagAddress;\n  }\n\n  isGeneric(): this is TypeTagGeneric {\n    return this instanceof TypeTagGeneric;\n  }\n\n  isSigner(): this is TypeTagSigner {\n    return this instanceof TypeTagSigner;\n  }\n\n  isVector(): this is TypeTagVector {\n    return this instanceof TypeTagVector;\n  }\n\n  isStruct(): this is TypeTagStruct {\n    return this instanceof TypeTagStruct;\n  }\n\n  isU8(): this is TypeTagU8 {\n    return this instanceof TypeTagU8;\n  }\n\n  isU16(): this is TypeTagU16 {\n    return this instanceof TypeTagU16;\n  }\n\n  isU32(): this is TypeTagU32 {\n    return this instanceof TypeTagU32;\n  }\n\n  isU64(): this is TypeTagU64 {\n    return this instanceof TypeTagU64;\n  }\n\n  isU128(): this is TypeTagU128 {\n    return this instanceof TypeTagU128;\n  }\n\n  isU256(): this is TypeTagU256 {\n    return this instanceof TypeTagU256;\n  }\n}\n\nexport class TypeTagBool extends TypeTag {\n  toString(): string {\n    return \"bool\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Bool);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagBool {\n    return new TypeTagBool();\n  }\n}\n\nexport class TypeTagU8 extends TypeTag {\n  toString(): string {\n    return \"u8\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U8);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU8 {\n    return new TypeTagU8();\n  }\n}\n\nexport class TypeTagU16 extends TypeTag {\n  toString(): string {\n    return \"u16\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U16);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU16 {\n    return new TypeTagU16();\n  }\n}\n\nexport class TypeTagU32 extends TypeTag {\n  toString(): string {\n    return \"u32\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U32);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU32 {\n    return new TypeTagU32();\n  }\n}\n\nexport class TypeTagU64 extends TypeTag {\n  toString(): string {\n    return \"u64\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U64);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU64 {\n    return new TypeTagU64();\n  }\n}\n\nexport class TypeTagU128 extends TypeTag {\n  toString(): string {\n    return \"u128\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U128);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU128 {\n    return new TypeTagU128();\n  }\n}\n\nexport class TypeTagU256 extends TypeTag {\n  toString(): string {\n    return \"u256\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.U256);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagU256 {\n    return new TypeTagU256();\n  }\n}\n\nexport class TypeTagAddress extends TypeTag {\n  toString(): string {\n    return \"address\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Address);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagAddress {\n    return new TypeTagAddress();\n  }\n}\n\nexport class TypeTagSigner extends TypeTag {\n  toString(): string {\n    return \"signer\";\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Signer);\n  }\n\n  static load(_deserializer: Deserializer): TypeTagSigner {\n    return new TypeTagSigner();\n  }\n}\n\nexport class TypeTagReference extends TypeTag {\n  toString(): `&${string}` {\n    return `&${this.value.toString()}`;\n  }\n\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Reference);\n  }\n\n  static load(deserializer: Deserializer): TypeTagReference {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagReference(value);\n  }\n}\n\n/**\n * Generics are used for type parameters in entry functions.  However,\n * they are not actually serialized into a real type, so they cannot be\n * used as a type directly.\n */\nexport class TypeTagGeneric extends TypeTag {\n  toString(): `T${number}` {\n    return `T${this.value}`;\n  }\n\n  constructor(public readonly value: number) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Generic);\n    serializer.serializeU32(this.value);\n  }\n\n  static load(deserializer: Deserializer): TypeTagGeneric {\n    const value = deserializer.deserializeU32();\n    return new TypeTagGeneric(value);\n  }\n}\n\nexport class TypeTagVector extends TypeTag {\n  toString(): `vector<${string}>` {\n    return `vector<${this.value.toString()}>`;\n  }\n\n  constructor(public readonly value: TypeTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Vector);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagVector {\n    const value = TypeTag.deserialize(deserializer);\n    return new TypeTagVector(value);\n  }\n}\n\nexport class TypeTagStruct extends TypeTag {\n  toString(): `0x${string}::${string}::${string}` {\n    // Collect type args and add it if there are any\n    let typePredicate = \"\";\n    if (this.value.type_args.length > 0) {\n      typePredicate = `<${this.value.type_args.map((typeArg) => typeArg.toString()).join(\", \")}>`;\n    }\n\n    return `${this.value.address.toString()}::${this.value.module_name.identifier}::${\n      this.value.name.identifier\n    }${typePredicate}`;\n  }\n\n  constructor(public readonly value: StructTag) {\n    super();\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TypeTagVariants.Struct);\n    this.value.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TypeTagStruct {\n    const value = StructTag.deserialize(deserializer);\n    return new TypeTagStruct(value);\n  }\n\n  isTypeTag(address: AccountAddress, moduleName: string, structName: string): boolean {\n    return (\n      this.value.module_name.identifier === moduleName &&\n      this.value.name.identifier === structName &&\n      this.value.address.equals(address)\n    );\n  }\n\n  isString(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"string\", \"String\");\n  }\n\n  isOption(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"option\", \"Option\");\n  }\n\n  isObject(): boolean {\n    return this.isTypeTag(AccountAddress.ONE, \"object\", \"Object\");\n  }\n}\n\nexport class StructTag extends Serializable {\n  public readonly address: AccountAddress;\n\n  public readonly module_name: Identifier;\n\n  public readonly name: Identifier;\n\n  public readonly type_args: Array<TypeTag>;\n\n  constructor(address: AccountAddress, module_name: Identifier, name: Identifier, type_args: Array<TypeTag>) {\n    super();\n    this.address = address;\n    this.module_name = module_name;\n    this.name = name;\n    this.type_args = type_args;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serialize(this.address);\n    serializer.serialize(this.module_name);\n    serializer.serialize(this.name);\n    serializer.serializeVector(this.type_args);\n  }\n\n  static deserialize(deserializer: Deserializer): StructTag {\n    const address = AccountAddress.deserialize(deserializer);\n    const moduleName = Identifier.deserialize(deserializer);\n    const name = Identifier.deserialize(deserializer);\n    const typeArgs = deserializer.deserializeVector(TypeTag);\n    return new StructTag(address, moduleName, name, typeArgs);\n  }\n}\n\nexport function aptosCoinStructTag(): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"aptos_coin\"), new Identifier(\"AptosCoin\"), []);\n}\n\nexport function stringStructTag(): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"string\"), new Identifier(\"String\"), []);\n}\n\nexport function optionStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"option\"), new Identifier(\"Option\"), [typeArg]);\n}\n\nexport function objectStructTag(typeArg: TypeTag): StructTag {\n  return new StructTag(AccountAddress.ONE, new Identifier(\"object\"), new Identifier(\"Object\"), [typeArg]);\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { EntryFunctionBytes } from \"../../bcs/serializable/entryFunctionBytes\";\nimport { Bool, U128, U16, U256, U32, U64, U8 } from \"../../bcs/serializable/movePrimitives\";\nimport { MoveVector } from \"../../bcs/serializable/moveStructs\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"./identifier\";\nimport { ModuleId } from \"./moduleId\";\nimport type { EntryFunctionArgument, ScriptFunctionArgument, TransactionArgument } from \"./transactionArgument\";\nimport { MoveModuleId, ScriptTransactionArgumentVariants, TransactionPayloadVariants } from \"../../types\";\nimport { TypeTag } from \"../typeTag\";\n\n/**\n * Deserialize a Script Transaction Argument\n */\nexport function deserializeFromScriptArgument(deserializer: Deserializer): TransactionArgument {\n  // index enum variant\n  const index = deserializer.deserializeUleb128AsU32();\n  switch (index) {\n    case ScriptTransactionArgumentVariants.U8:\n      return U8.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U64:\n      return U64.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U128:\n      return U128.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.Address:\n      return AccountAddress.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U8Vector:\n      return MoveVector.deserialize(deserializer, U8);\n    case ScriptTransactionArgumentVariants.Bool:\n      return Bool.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U16:\n      return U16.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U32:\n      return U32.deserialize(deserializer);\n    case ScriptTransactionArgumentVariants.U256:\n      return U256.deserialize(deserializer);\n    default:\n      throw new Error(`Unknown variant index for ScriptTransactionArgument: ${index}`);\n  }\n}\n\n/**\n * Representation of the supported Transaction Payload\n * that can serialized and deserialized\n */\nexport abstract class TransactionPayload extends Serializable {\n  /**\n   * Serialize a Transaction Payload\n   */\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserialize a Transaction Payload\n   */\n  static deserialize(deserializer: Deserializer): TransactionPayload {\n    // index enum variant\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionPayloadVariants.Script:\n        return TransactionPayloadScript.load(deserializer);\n      case TransactionPayloadVariants.EntryFunction:\n        return TransactionPayloadEntryFunction.load(deserializer);\n      case TransactionPayloadVariants.Multisig:\n        return TransactionPayloadMultisig.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for TransactionPayload: ${index}`);\n    }\n  }\n}\n\n/**\n * Representation of a Transaction Payload Script that can serialized and deserialized\n */\nexport class TransactionPayloadScript extends TransactionPayload {\n  public readonly script: Script;\n\n  constructor(script: Script) {\n    super();\n    this.script = script;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.Script);\n    this.script.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadScript {\n    const script = Script.deserialize(deserializer);\n    return new TransactionPayloadScript(script);\n  }\n}\n\n/**\n * Representation of a Transaction Payload Entry Function that can serialized and deserialized\n */\nexport class TransactionPayloadEntryFunction extends TransactionPayload {\n  public readonly entryFunction: EntryFunction;\n\n  constructor(entryFunction: EntryFunction) {\n    super();\n    this.entryFunction = entryFunction;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.EntryFunction);\n    this.entryFunction.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadEntryFunction {\n    const entryFunction = EntryFunction.deserialize(deserializer);\n    return new TransactionPayloadEntryFunction(entryFunction);\n  }\n}\n\n/**\n * Representation of a Transaction Payload Multi-sig that can serialized and deserialized\n */\nexport class TransactionPayloadMultisig extends TransactionPayload {\n  public readonly multiSig: MultiSig;\n\n  constructor(multiSig: MultiSig) {\n    super();\n    this.multiSig = multiSig;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionPayloadVariants.Multisig);\n    this.multiSig.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): TransactionPayloadMultisig {\n    const multiSig = MultiSig.deserialize(deserializer);\n    return new TransactionPayloadMultisig(multiSig);\n  }\n}\n\n/**\n * Representation of a EntryFunction that can serialized and deserialized\n */\nexport class EntryFunction {\n  public readonly module_name: ModuleId;\n\n  public readonly function_name: Identifier;\n\n  public readonly type_args: Array<TypeTag>;\n\n  public readonly args: Array<EntryFunctionArgument>;\n\n  /**\n   * Contains the payload to run a function within a module.\n   * @param module_name Fully qualified module name in format \"account_address::module_name\" e.g. \"0x1::coin\"\n   * @param function_name The function name. e.g \"transfer\"\n   * @param type_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public entry fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   * @param args arguments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public entry fun transfer<CoinType>(from: &signer, to: address, amount: u64)\n   * ```\n   */\n  constructor(\n    module_name: ModuleId,\n    function_name: Identifier,\n    type_args: Array<TypeTag>,\n    args: Array<EntryFunctionArgument>,\n  ) {\n    this.module_name = module_name;\n    this.function_name = function_name;\n    this.type_args = type_args;\n    this.args = args;\n  }\n\n  /**\n   * A helper function to build a EntryFunction payload from raw primitive values\n   *\n   * @param module_id Fully qualified module name in format \"AccountAddress::module_id\" e.g. \"0x1::coin\"\n   * @param function_name Function name\n   * @param type_args Type arguments that move function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args Arguments to the move function.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @returns EntryFunction\n   */\n  static build(\n    module_id: MoveModuleId,\n    function_name: string,\n    type_args: Array<TypeTag>,\n    args: Array<EntryFunctionArgument>,\n  ): EntryFunction {\n    return new EntryFunction(ModuleId.fromStr(module_id), new Identifier(function_name), type_args, args);\n  }\n\n  serialize(serializer: Serializer): void {\n    this.module_name.serialize(serializer);\n    this.function_name.serialize(serializer);\n    serializer.serializeVector<TypeTag>(this.type_args);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: EntryFunctionArgument) => {\n      item.serializeForEntryFunction(serializer);\n    });\n  }\n\n  /**\n   * Deserializes an entry function payload with the arguments represented as EntryFunctionBytes instances.\n   * @see EntryFunctionBytes\n   *\n   * NOTE: When you deserialize an EntryFunction payload with this method, the entry function\n   * arguments are populated into the deserialized instance as type-agnostic, raw fixed bytes\n   * in the form of the EntryFunctionBytes class.\n   *\n   * In order to correctly deserialize these arguments as their actual type representations, you\n   * must know the types of the arguments beforehand and deserialize them yourself individually.\n   *\n   * One way you could achieve this is by using the ABIs for an entry function and deserializing each\n   * argument as its given, corresponding type.\n   *\n   * @param deserializer\n   * @returns A deserialized EntryFunction payload for a transaction.\n   *\n   */\n  static deserialize(deserializer: Deserializer): EntryFunction {\n    const module_name = ModuleId.deserialize(deserializer);\n    const function_name = Identifier.deserialize(deserializer);\n    const type_args = deserializer.deserializeVector(TypeTag);\n\n    const length = deserializer.deserializeUleb128AsU32();\n    const args: Array<EntryFunctionArgument> = new Array<EntryFunctionBytes>();\n\n    for (let i = 0; i < length; i += 1) {\n      const fixedBytesLength = deserializer.deserializeUleb128AsU32();\n      const fixedBytes = EntryFunctionBytes.deserialize(deserializer, fixedBytesLength);\n      args.push(fixedBytes);\n    }\n\n    return new EntryFunction(module_name, function_name, type_args, args);\n  }\n}\n\n/**\n * Representation of a Script that can serialized and deserialized\n */\nexport class Script {\n  /**\n   * The move module bytecode\n   */\n  public readonly bytecode: Uint8Array;\n\n  /**\n   * The type arguments that the bytecode function requires.\n   */\n  public readonly type_args: Array<TypeTag>;\n\n  /**\n   * The arguments that the bytecode function requires.\n   */\n  public readonly args: Array<ScriptFunctionArgument>;\n\n  /**\n   * Scripts contain the Move bytecodes payload that can be submitted to Aptos chain for execution.\n   *\n   * @param bytecode The move module bytecode\n   * @param type_args The type arguments that the bytecode function requires.\n   *\n   * @example\n   * A coin transfer function has one type argument \"CoinType\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   * @param args The arguments that the bytecode function requires.\n   *\n   * @example\n   * A coin transfer function has three arguments \"from\", \"to\" and \"amount\".\n   * ```\n   * public(script) fun transfer<CoinType>(from: &signer, to: address, amount: u64,)\n   * ```\n   */\n  constructor(bytecode: Uint8Array, type_args: Array<TypeTag>, args: Array<ScriptFunctionArgument>) {\n    this.bytecode = bytecode;\n    this.type_args = type_args;\n    this.args = args;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeBytes(this.bytecode);\n    serializer.serializeVector<TypeTag>(this.type_args);\n    serializer.serializeU32AsUleb128(this.args.length);\n    this.args.forEach((item: ScriptFunctionArgument) => {\n      item.serializeForScriptFunction(serializer);\n    });\n  }\n\n  static deserialize(deserializer: Deserializer): Script {\n    const bytecode = deserializer.deserializeBytes();\n    const type_args = deserializer.deserializeVector(TypeTag);\n    const length = deserializer.deserializeUleb128AsU32();\n    const args = new Array<ScriptFunctionArgument>();\n    for (let i = 0; i < length; i += 1) {\n      // Note that we deserialize directly to the Move value, not its Script argument representation.\n      // We are abstracting away the Script argument representation because knowing about it is\n      // functionally useless.\n      const scriptArgument = deserializeFromScriptArgument(deserializer);\n      args.push(scriptArgument);\n    }\n    return new Script(bytecode, type_args, args);\n  }\n}\n\n/**\n * Representation of a MultiSig that can serialized and deserialized\n */\nexport class MultiSig {\n  public readonly multisig_address: AccountAddress;\n\n  public readonly transaction_payload?: MultisigTransactionPayload;\n\n  /**\n   * Contains the payload to run a multi-sig account transaction.\n   *\n   * @param multisig_address The multi-sig account address the transaction will be executed as.\n   *\n   * @param transaction_payload The payload of the multi-sig transaction. This is optional when executing a multi-sig\n   *  transaction whose payload is already stored on chain.\n   */\n  constructor(multisig_address: AccountAddress, transaction_payload?: MultisigTransactionPayload) {\n    this.multisig_address = multisig_address;\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.multisig_address.serialize(serializer);\n    // Options are encoded with an extra u8 field before the value - 0x0 is none and 0x1 is present.\n    // We use serializeBool below to create this prefix value.\n    if (this.transaction_payload === undefined) {\n      serializer.serializeBool(false);\n    } else {\n      serializer.serializeBool(true);\n      this.transaction_payload.serialize(serializer);\n    }\n  }\n\n  static deserialize(deserializer: Deserializer): MultiSig {\n    const multisig_address = AccountAddress.deserialize(deserializer);\n    const payloadPresent = deserializer.deserializeBool();\n    let transaction_payload;\n    if (payloadPresent) {\n      transaction_payload = MultisigTransactionPayload.deserialize(deserializer);\n    }\n    return new MultiSig(multisig_address, transaction_payload);\n  }\n}\n\n/**\n * Representation of a MultiSig Transaction Payload from `multisig_account.move`\n * that can be serialized and deserialized\n\n * This class exists right now to represent an extensible transaction payload class for\n * transactions used in `multisig_account.move`. Eventually, this class will be able to\n * support script payloads when the `multisig_account.move` module supports them.\n */\nexport class MultisigTransactionPayload {\n  public readonly transaction_payload: EntryFunction;\n\n  /**\n   * Contains the payload to run a multi-sig account transaction.\n   *\n   * @param transaction_payload The payload of the multi-sig transaction.\n   * This can only be EntryFunction for now but,\n   * Script might be supported in the future.\n   */\n  constructor(transaction_payload: EntryFunction) {\n    this.transaction_payload = transaction_payload;\n  }\n\n  serialize(serializer: Serializer): void {\n    /**\n     * We can support multiple types of inner transaction payload in the future.\n     * For now, it's only EntryFunction but if we support more types,\n     * we need to serialize with the right enum values here\n     */\n    serializer.serializeU32AsUleb128(0);\n    this.transaction_payload.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): MultisigTransactionPayload {\n    // This is the enum value indicating which type of payload the multi-sig transaction contains.\n    deserializer.deserializeUleb128AsU32();\n    return new MultisigTransactionPayload(EntryFunction.deserialize(deserializer));\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { ChainId } from \"./chainId\";\nimport { AccountAddress } from \"../../core\";\nimport { TransactionPayload } from \"./transactionPayload\";\nimport { TransactionVariants } from \"../../types\";\n\n/**\n * Representation of a Raw Transaction that can serialized and deserialized\n */\nexport class RawTransaction extends Serializable {\n  public readonly sender: AccountAddress;\n\n  public readonly sequence_number: bigint;\n\n  public readonly payload: TransactionPayload;\n\n  public readonly max_gas_amount: bigint;\n\n  public readonly gas_unit_price: bigint;\n\n  public readonly expiration_timestamp_secs: bigint;\n\n  public readonly chain_id: ChainId;\n\n  /**\n   * RawTransactions contain the metadata and payloads that can be submitted to Aptos chain for execution.\n   * RawTransactions must be signed before Aptos chain can execute them.\n   *\n   * @param sender The sender Account Address\n   * @param sequence_number Sequence number of this transaction. This must match the sequence number stored in\n   *   the sender's account at the time the transaction executes.\n   * @param payload Instructions for the Aptos Blockchain, including publishing a module,\n   *   execute an entry function or execute a script payload.\n   * @param max_gas_amount Maximum total gas to spend for this transaction. The account must have more\n   *   than this gas or the transaction will be discarded during validation.\n   * @param gas_unit_price Price to be paid per gas unit.\n   * @param expiration_timestamp_secs The blockchain timestamp at which the blockchain would discard this transaction.\n   * @param chain_id The chain ID of the blockchain that this transaction is intended to be run on.\n   */\n  constructor(\n    sender: AccountAddress,\n    sequence_number: bigint,\n    payload: TransactionPayload,\n    max_gas_amount: bigint,\n    gas_unit_price: bigint,\n    expiration_timestamp_secs: bigint,\n    chain_id: ChainId,\n  ) {\n    super();\n    this.sender = sender;\n    this.sequence_number = sequence_number;\n    this.payload = payload;\n    this.max_gas_amount = max_gas_amount;\n    this.gas_unit_price = gas_unit_price;\n    this.expiration_timestamp_secs = expiration_timestamp_secs;\n    this.chain_id = chain_id;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.sender.serialize(serializer);\n    serializer.serializeU64(this.sequence_number);\n    this.payload.serialize(serializer);\n    serializer.serializeU64(this.max_gas_amount);\n    serializer.serializeU64(this.gas_unit_price);\n    serializer.serializeU64(this.expiration_timestamp_secs);\n    this.chain_id.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): RawTransaction {\n    const sender = AccountAddress.deserialize(deserializer);\n    const sequence_number = deserializer.deserializeU64();\n    const payload = TransactionPayload.deserialize(deserializer);\n    const max_gas_amount = deserializer.deserializeU64();\n    const gas_unit_price = deserializer.deserializeU64();\n    const expiration_timestamp_secs = deserializer.deserializeU64();\n    const chain_id = ChainId.deserialize(deserializer);\n    return new RawTransaction(\n      sender,\n      sequence_number,\n      payload,\n      max_gas_amount,\n      gas_unit_price,\n      expiration_timestamp_secs,\n      chain_id,\n    );\n  }\n}\n\n/**\n * Representation of a Raw Transaction With Data that can serialized and deserialized\n */\nexport abstract class RawTransactionWithData extends Serializable {\n  /**\n   * Serialize a Raw Transaction With Data\n   */\n  abstract serialize(serializer: Serializer): void;\n\n  /**\n   * Deserialize a Raw Transaction With Data\n   */\n  static deserialize(deserializer: Deserializer): RawTransactionWithData {\n    // index enum variant\n    const index = deserializer.deserializeUleb128AsU32();\n    switch (index) {\n      case TransactionVariants.MultiAgentTransaction:\n        return MultiAgentRawTransaction.load(deserializer);\n      case TransactionVariants.FeePayerTransaction:\n        return FeePayerRawTransaction.load(deserializer);\n      default:\n        throw new Error(`Unknown variant index for RawTransactionWithData: ${index}`);\n    }\n  }\n}\n\n/**\n * Representation of a Multi Agent Transaction that can serialized and deserialized\n */\nexport class MultiAgentRawTransaction extends RawTransactionWithData {\n  /**\n   * The raw transaction\n   */\n  public readonly raw_txn: RawTransaction;\n\n  /**\n   * The secondary signers on this transaction\n   */\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  constructor(raw_txn: RawTransaction, secondary_signer_addresses: Array<AccountAddress>) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionVariants.MultiAgentTransaction);\n    this.raw_txn.serialize(serializer);\n    serializer.serializeVector(this.secondary_signer_addresses);\n  }\n\n  static load(deserializer: Deserializer): MultiAgentRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n\n    return new MultiAgentRawTransaction(rawTxn, secondarySignerAddresses);\n  }\n}\n\n/**\n * Representation of a Fee Payer Transaction that can serialized and deserialized\n */\nexport class FeePayerRawTransaction extends RawTransactionWithData {\n  /**\n   * The raw transaction\n   */\n  public readonly raw_txn: RawTransaction;\n\n  /**\n   * The secondary signers on this transaction - optional and can be empty\n   */\n  public readonly secondary_signer_addresses: Array<AccountAddress>;\n\n  /**\n   * The fee payer account address\n   */\n  public readonly fee_payer_address: AccountAddress;\n\n  constructor(\n    raw_txn: RawTransaction,\n    secondary_signer_addresses: Array<AccountAddress>,\n    fee_payer_address: AccountAddress,\n  ) {\n    super();\n    this.raw_txn = raw_txn;\n    this.secondary_signer_addresses = secondary_signer_addresses;\n    this.fee_payer_address = fee_payer_address;\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeU32AsUleb128(TransactionVariants.FeePayerTransaction);\n    this.raw_txn.serialize(serializer);\n    serializer.serializeVector(this.secondary_signer_addresses);\n    this.fee_payer_address.serialize(serializer);\n  }\n\n  static load(deserializer: Deserializer): FeePayerRawTransaction {\n    const rawTxn = RawTransaction.deserialize(deserializer);\n    const secondarySignerAddresses = deserializer.deserializeVector(AccountAddress);\n    const feePayerAddress = AccountAddress.deserialize(deserializer);\n\n    return new FeePayerRawTransaction(rawTxn, secondarySignerAddresses, feePayerAddress);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { TransactionAuthenticator } from \"../authenticator/transaction\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializable, Serializer } from \"../../bcs/serializer\";\nimport { RawTransaction } from \"./rawTransaction\";\n\nexport class SignedTransaction extends Serializable {\n  public readonly raw_txn: RawTransaction;\n\n  public readonly authenticator: TransactionAuthenticator;\n\n  /**\n   * A SignedTransaction consists of a raw transaction and an authenticator. The authenticator\n   * contains a client's public key and the signature of the raw transaction.\n   *\n   * @see {@link https://aptos.dev/integration/creating-a-signed-transaction | Creating a Signed Transaction}\n   *\n   * @param raw_txn\n   * @param authenticator Contains a client's public key and the signature of the raw transaction.\n   * Authenticator has 3 flavors: single signature, multi-signature and multi-agent.\n   * @see {@link https://github.com/aptos-labs/aptos-core/blob/main/types/src/transaction/authenticator.rs} for details.\n   */\n  constructor(raw_txn: RawTransaction, authenticator: TransactionAuthenticator) {\n    super();\n    this.raw_txn = raw_txn;\n    this.authenticator = authenticator;\n  }\n\n  serialize(serializer: Serializer): void {\n    this.raw_txn.serialize(serializer);\n    this.authenticator.serialize(serializer);\n  }\n\n  static deserialize(deserializer: Deserializer): SignedTransaction {\n    const raw_txn = RawTransaction.deserialize(deserializer);\n    const authenticator = TransactionAuthenticator.deserialize(deserializer);\n    return new SignedTransaction(raw_txn, authenticator);\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  StructTag,\n  TypeTag,\n  TypeTagAddress,\n  TypeTagBool,\n  TypeTagGeneric,\n  TypeTagReference,\n  TypeTagSigner,\n  TypeTagStruct,\n  TypeTagU128,\n  TypeTagU16,\n  TypeTagU256,\n  TypeTagU32,\n  TypeTagU64,\n  TypeTagU8,\n  TypeTagVector,\n} from \".\";\nimport { AccountAddress } from \"../../core\";\nimport { Identifier } from \"../instances/identifier\";\n\nfunction isValidIdentifier(str: string) {\n  return !!str.match(/^[_a-zA-Z0-9]+$/);\n}\n\nfunction isValidWhitespaceCharacter(char: string) {\n  return !!char.match(/\\s/);\n}\n\nfunction consumeWhitespace(tagStr: string, pos: number) {\n  let i = pos;\n  for (; i < tagStr.length; i += 1) {\n    const innerChar = tagStr[i];\n\n    if (!isValidWhitespaceCharacter(innerChar)) {\n      // If it's not colons, and it's an invalid character, we will stop here\n      break;\n    }\n  }\n  return i;\n}\n\ntype TypeTagState = {\n  savedExpectedTypes: number;\n  savedStr: string;\n  savedTypes: Array<TypeTag>;\n};\n\nexport enum TypeTagParserErrorType {\n  InvalidTypeTag = \"unknown type\",\n  UnexpectedTypeArgumentClose = \"unexpected '>'\",\n  UnexpectedWhitespaceCharacter = \"unexpected whitespace character\",\n  UnexpectedComma = \"unexpected ','\",\n  TypeArgumentCountMismatch = \"type argument count doesn't match expected amount\",\n  MissingTypeArgumentClose = \"no matching '>' for '<'\",\n  UnexpectedPrimitiveTypeArguments = \"primitive types not expected to have type arguments\",\n  UnexpectedVectorTypeArgumentCount = \"vector type expected to have exactly one type argument\",\n  UnexpectedStructFormat = \"unexpected struct format, must be of the form 0xaddress::module_name::struct_name\",\n  InvalidModuleNameCharacter = \"module name must only contain alphanumeric or '_' characters\",\n  InvalidStructNameCharacter = \"struct name must only contain alphanumeric or '_' characters\",\n}\n\nexport class TypeTagParserError extends Error {\n  constructor(typeTagStr: string, invalidReason: TypeTagParserErrorType) {\n    super(`Failed to parse typeTag '${typeTagStr}', ${invalidReason}`);\n  }\n}\n\n/**\n * All types are made of a few parts they're either:\n * 1. A simple type e.g. u8\n * 2. A standalone struct e.g. 0x1::account::Account\n * 3. A nested struct e.g. 0x1::coin::Coin<0x1234::coin::MyCoin>\n *\n * There are a few more special cases that need to be handled, however.\n * 1. Multiple generics e.g 0x1::pair::Pair<u8, u16>\n * 2. Spacing in the generics e.g. 0x1::pair::Pair< u8 , u16>\n * 3. Nested generics of different depths e.g. 0x1::pair::Pair<0x1::coin::Coin<0x1234::coin::MyCoin>, u8>\n * 4. Generics for types in ABIs are filled in with placeholders e.g T1, T2, T3\n */\nexport function parseTypeTag(typeStr: string, options?: { allowGenerics?: boolean }) {\n  const allowGenerics = options?.allowGenerics ?? false;\n\n  const saved: Array<TypeTagState> = [];\n  // This represents the internal types for a type tag e.g. '0x1::coin::Coin<innerTypes>'\n  let innerTypes: Array<TypeTag> = [];\n  // This represents the current parsed types in a comma list e.g. 'u8, u8'\n  let curTypes: Array<TypeTag> = [];\n  // This represents the current character index\n  let cur: number = 0;\n  // This represents the current working string as a type or struct name\n  let currentStr: string = \"\";\n  let expectedTypes: number = 1;\n\n  // Iterate through each character, and handle the border conditions\n  while (cur < typeStr.length) {\n    const char = typeStr[cur];\n\n    if (char === \"<\") {\n      // Start of a type argument, push current state onto a stack\n      saved.push({\n        savedExpectedTypes: expectedTypes,\n        savedStr: currentStr,\n        savedTypes: curTypes,\n      });\n\n      // Clear current state\n      currentStr = \"\";\n      curTypes = [];\n      expectedTypes = 1;\n    } else if (char === \">\") {\n      // Process last type, if there is no type string, then don't parse it\n      if (currentStr !== \"\") {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n        curTypes.push(newType);\n      }\n\n      // Pop off stack outer type, if there's nothing left, there were too many '>'\n      const savedPop = saved.pop();\n      if (savedPop === undefined) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedTypeArgumentClose);\n      }\n\n      // If the expected types don't match the number of commas, then we also fail\n      if (expectedTypes !== curTypes.length) {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.TypeArgumentCountMismatch);\n      }\n\n      // Add in the new created type, shifting the current types to the inner types\n      const { savedStr, savedTypes, savedExpectedTypes } = savedPop;\n      innerTypes = curTypes;\n      curTypes = savedTypes;\n      currentStr = savedStr;\n      expectedTypes = savedExpectedTypes;\n    } else if (char === \",\") {\n      // Comma means we need to start parsing a new tag, push the previous one to the curTypes\n      // Process last type, if there is no type string, then don't parse it\n      if (currentStr.length !== 0) {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n\n        // parse type tag and push it on the types\n        innerTypes = [];\n        curTypes.push(newType);\n        currentStr = \"\";\n        expectedTypes += 1;\n      }\n    } else if (isValidWhitespaceCharacter(char)) {\n      // This means we should save what we have and everything else should skip until the next\n      let parsedTypeTag = false;\n      if (currentStr.length !== 0) {\n        const newType = parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n\n        // parse type tag and push it on the types\n        innerTypes = [];\n        curTypes.push(newType);\n        currentStr = \"\";\n        parsedTypeTag = true;\n      }\n\n      // Skip ahead on any more whitespace\n      cur = consumeWhitespace(typeStr, cur);\n\n      // The next space MUST be a comma, or a closing > if there was something parsed before\n      // e.g. `u8 u8` is invalid but `u8, u8` is valid\n      const nextChar = typeStr[cur];\n      if (cur < typeStr.length && parsedTypeTag && nextChar !== \",\" && nextChar !== \">\") {\n        throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedWhitespaceCharacter);\n      }\n\n      // eslint-disable-next-line no-continue\n      continue;\n    } else {\n      // Any other characters just append to the current string\n      currentStr += char;\n    }\n\n    cur += 1;\n  }\n\n  // This prevents a missing '>' on type arguments\n  if (saved.length > 0) {\n    throw new TypeTagParserError(typeStr, TypeTagParserErrorType.MissingTypeArgumentClose);\n  }\n\n  // This prevents 'u8, u8' as an input\n  switch (curTypes.length) {\n    case 0:\n      return parseTypeTagInner(currentStr, innerTypes, allowGenerics);\n    case 1:\n      if (currentStr === \"\") {\n        return curTypes[0];\n      }\n      throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedComma);\n    default:\n      throw new TypeTagParserError(typeStr, TypeTagParserErrorType.UnexpectedWhitespaceCharacter);\n  }\n}\n\n/**\n * Parses a type tag with internal types associated\n * @param str\n * @param types\n */\nfunction parseTypeTagInner(str: string, types: Array<TypeTag>, allowGenerics: boolean): TypeTag {\n  // TODO: Parse references to any item not just signer\n  switch (str) {\n    case \"&signer\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagReference(new TypeTagSigner());\n    case \"signer\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagSigner();\n    case \"bool\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagBool();\n    case \"address\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagAddress();\n    case \"u8\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU8();\n    case \"u16\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU16();\n    case \"u32\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU32();\n    case \"u64\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU64();\n    case \"u128\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU128();\n    case \"u256\":\n      if (types.length > 0) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedPrimitiveTypeArguments);\n      }\n      return new TypeTagU256();\n    case \"vector\":\n      if (types.length !== 1) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedVectorTypeArgumentCount);\n      }\n      return new TypeTagVector(types[0]);\n    default:\n      if (allowGenerics && str.match(/^T[0-9]+$/)) {\n        return new TypeTagGeneric(Number(str.split(\"T\")[1]));\n      }\n\n      // If the value doesn't contain a colon, then we'll assume it isn't trying to be a struct\n      if (!str.match(/.*:.*/)) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidTypeTag);\n      }\n\n      // Parse for a struct tag\n      // eslint-disable-next-line no-case-declarations\n      const structParts = str.split(\"::\");\n      if (structParts.length !== 3) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.UnexpectedStructFormat);\n      }\n\n      // Validate identifier characters\n      if (!isValidIdentifier(structParts[1])) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidModuleNameCharacter);\n      }\n      if (!isValidIdentifier(structParts[2])) {\n        throw new TypeTagParserError(str, TypeTagParserErrorType.InvalidStructNameCharacter);\n      }\n\n      return new TypeTagStruct(\n        new StructTag(\n          AccountAddress.fromString(structParts[0]),\n          new Identifier(structParts[1]),\n          new Identifier(structParts[2]),\n          types,\n        ),\n      );\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  EntryFunctionArgumentTypes,\n  InputGenerateTransactionPayloadData,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n  InputScriptData,\n  SimpleEntryFunctionArgumentTypes,\n} from \"../types\";\nimport { Bool, FixedBytes, MoveString, U128, U16, U256, U32, U64, U8 } from \"../../bcs\";\nimport { AccountAddress } from \"../../core\";\nimport { MoveFunction, MoveStructType } from \"../../types\";\n\nexport function isBool(arg: SimpleEntryFunctionArgumentTypes): arg is boolean {\n  return typeof arg === \"boolean\";\n}\n\nexport function isString(arg: any): arg is string {\n  return typeof arg === \"string\";\n}\n\nexport function isNumber(arg: SimpleEntryFunctionArgumentTypes): arg is number {\n  return typeof arg === \"number\";\n}\n\nexport function isLargeNumber(arg: SimpleEntryFunctionArgumentTypes): arg is number | bigint | string {\n  return typeof arg === \"number\" || typeof arg === \"bigint\" || typeof arg === \"string\";\n}\n\nexport function isNull(arg: SimpleEntryFunctionArgumentTypes): arg is null | undefined {\n  return arg === null || arg === undefined;\n}\n\nexport function isBcsBool(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is Bool {\n  return arg instanceof Bool;\n}\nexport function isBcsAddress(\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n): arg is AccountAddress {\n  return arg instanceof AccountAddress;\n}\nexport function isBcsString(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is MoveString {\n  return arg instanceof MoveString;\n}\nexport function isBcsFixedBytes(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is FixedBytes {\n  return arg instanceof FixedBytes;\n}\n\nexport function isBcsU8(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U8 {\n  return arg instanceof U8;\n}\nexport function isBcsU16(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U16 {\n  return arg instanceof U16;\n}\nexport function isBcsU32(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U32 {\n  return arg instanceof U32;\n}\nexport function isBcsU64(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U64 {\n  return arg instanceof U64;\n}\nexport function isBcsU128(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U128 {\n  return arg instanceof U128;\n}\nexport function isBcsU256(arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes): arg is U256 {\n  return arg instanceof U256;\n}\n\nexport function isScriptDataInput(\n  arg: InputGenerateTransactionPayloadDataWithRemoteABI | InputGenerateTransactionPayloadData,\n): arg is InputScriptData {\n  return \"bytecode\" in arg;\n}\n\nexport function throwTypeMismatch(expectedType: string, position: number) {\n  throw new Error(`Type mismatch for argument ${position}, expected '${expectedType}'`);\n}\n\n/**\n * Finds first non-signer arg.\n *\n * A function is often defined with a `signer` or `&signer` arguments at the start, which are filled in\n * by signatures, and not by the caller.\n * @param functionAbi\n */\nexport function findFirstNonSignerArg(functionAbi: MoveFunction): number {\n  return functionAbi.params.findIndex((param) => param !== \"signer\" && param !== \"&signer\");\n}\n\nexport function getFunctionParts(functionArg: MoveStructType) {\n  const funcNameParts = functionArg.split(\"::\");\n  if (funcNameParts.length !== 3) {\n    throw new Error(`Invalid function ${functionArg}`);\n  }\n  const moduleAddress = funcNameParts[0];\n  const moduleName = funcNameParts[1];\n  const functionName = funcNameParts[2];\n  return { moduleAddress, moduleName, functionName };\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { parseTypeTag } from \"../typeTag/parser\";\nimport { TypeTag, TypeTagStruct } from \"../typeTag\";\nimport { AptosConfig } from \"../../api/aptosConfig\";\nimport { EntryFunctionArgumentTypes, SimpleEntryFunctionArgumentTypes, EntryFunctionABI } from \"../types\";\nimport { Bool, MoveOption, MoveString, MoveVector, U128, U16, U256, U32, U64, U8 } from \"../../bcs\";\nimport { AccountAddress, Hex } from \"../../core\";\nimport { getModule } from \"../../internal/account\";\nimport {\n  findFirstNonSignerArg,\n  isBcsAddress,\n  isBcsBool,\n  isBcsFixedBytes,\n  isBcsString,\n  isBcsU128,\n  isBcsU16,\n  isBcsU256,\n  isBcsU32,\n  isBcsU64,\n  isBcsU8,\n  isBool,\n  isLargeNumber,\n  isNull,\n  isNumber,\n  isString,\n  throwTypeMismatch,\n} from \"./helpers\";\n\n/**\n * Convert type arguments to only type tags, allowing for string representations of type tags\n */\nexport function standardizeTypeTags(typeArguments?: Array<TypeTag | string>): Array<TypeTag> {\n  return (\n    typeArguments?.map((typeArg: string | TypeTag): TypeTag => {\n      // Convert to TypeTag if it's a string representation\n      if (isString(typeArg)) {\n        return parseTypeTag(typeArg);\n      }\n      return typeArg;\n    }) ?? []\n  );\n}\n\n/**\n * Fetches the ABI for an entry function from the module\n *\n * @param moduleAddress\n * @param moduleName\n * @param functionName\n * @param aptosConfig\n */\nexport async function fetchEntryFunctionAbi(\n  moduleAddress: string,\n  moduleName: string,\n  functionName: string,\n  aptosConfig: AptosConfig,\n): Promise<EntryFunctionABI> {\n  // This fetch from the API is currently cached\n  const module = await getModule({ aptosConfig, accountAddress: moduleAddress, moduleName });\n\n  const functionAbi = module.abi?.exposed_functions.find((func) => func.name === functionName);\n\n  // If there's no ABI, then the function is invalid\n  if (!functionAbi) {\n    throw new Error(`Could not find entry function ABI for '${moduleAddress}::${moduleName}::${functionName}'`);\n  }\n\n  // Non-entry functions also can't be used\n  if (!functionAbi.is_entry) {\n    throw new Error(`'${moduleAddress}::${moduleName}::${functionName}' is not an entry function`);\n  }\n\n  // Remove the signer arguments\n  const first = findFirstNonSignerArg(functionAbi);\n  const params = [];\n  for (let i = first; i < functionAbi.params.length; i += 1) {\n    params.push(parseTypeTag(functionAbi.params[i], { allowGenerics: true }));\n  }\n\n  return {\n    typeParameters: functionAbi.generic_type_params,\n    parameters: params,\n  };\n}\n\n/**\n * Converts a non-BCS encoded argument into BCS encoded, if necessary\n * @param functionName\n * @param functionAbi\n * @param arg\n * @param position\n */\nexport function convertArgument(\n  functionName: string,\n  functionAbi: EntryFunctionABI,\n  arg: EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n) {\n  // Ensure not too many arguments\n  if (position >= functionAbi.parameters.length) {\n    throw new Error(`Too many arguments for '${functionName}', expected ${functionAbi.parameters.length}`);\n  }\n\n  // If the argument is bcs encoded, we can just use it directly\n  if (\n    isBcsBool(arg) ||\n    isBcsU8(arg) ||\n    isBcsU16(arg) ||\n    isBcsU32(arg) ||\n    isBcsU64(arg) ||\n    isBcsU128(arg) ||\n    isBcsU256(arg) ||\n    isBcsAddress(arg) ||\n    isBcsString(arg) ||\n    isBcsFixedBytes(arg) ||\n    arg instanceof MoveVector ||\n    arg instanceof MoveOption\n  ) {\n    // Ensure the type matches the ABI\n    checkType(functionAbi, arg, position);\n    return arg;\n  }\n\n  // If it is not BCS encoded, we will need to convert it with the ABI\n  return parseArg(arg, functionAbi.parameters[position], position, genericTypeParams);\n}\n\n/**\n * Parses a non-BCS encoded argument into a BCS encoded argument recursively\n * @param arg\n * @param param\n * @param position\n * @param genericTypeParams\n */\nfunction parseArg(\n  arg: SimpleEntryFunctionArgumentTypes,\n  param: TypeTag,\n  position: number,\n  genericTypeParams: Array<TypeTag>,\n): EntryFunctionArgumentTypes {\n  if (param.isBool()) {\n    if (isBool(arg)) {\n      return new Bool(arg);\n    }\n    throwTypeMismatch(\"boolean\", position);\n  }\n  // TODO: support uint8array?\n  if (param.isAddress()) {\n    if (isString(arg)) {\n      return AccountAddress.fromString(arg);\n    }\n    throwTypeMismatch(\"string\", position);\n  }\n  if (param.isU8()) {\n    if (isNumber(arg)) {\n      return new U8(arg);\n    }\n    throwTypeMismatch(\"number\", position);\n  }\n  if (param.isU16()) {\n    if (isNumber(arg)) {\n      return new U16(arg);\n    }\n    throwTypeMismatch(\"number\", position);\n  }\n  if (param.isU32()) {\n    if (isNumber(arg)) {\n      return new U32(arg);\n    }\n    throwTypeMismatch(\"number\", position);\n  }\n  if (param.isU64()) {\n    if (isLargeNumber(arg)) {\n      return new U64(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n  if (param.isU128()) {\n    if (isLargeNumber(arg)) {\n      return new U128(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n  if (param.isU256()) {\n    if (isLargeNumber(arg)) {\n      return new U256(BigInt(arg));\n    }\n    throwTypeMismatch(\"bigint | number | string\", position);\n  }\n\n  // Generic needs to use the sub-type\n  if (param.isGeneric()) {\n    const genericIndex = param.value;\n    if (genericIndex < 0 || genericIndex >= genericTypeParams.length) {\n      throw new Error(`Generic argument ${param.toString()} is invalid for argument ${position}`);\n    }\n\n    parseArg(arg, genericTypeParams[genericIndex], position, genericTypeParams);\n  }\n\n  // We have to special case some vectors for Vector<u8>\n  if (param.isVector()) {\n    // Check special case for Vector<u8>\n    if (param.value.isU8() && isString(arg)) {\n      // TODO: Improve message when hex is invalid\n      return MoveVector.U8(Hex.fromHexInput(arg).toUint8Array());\n    }\n\n    if (Array.isArray(arg)) {\n      return new MoveVector(arg.map((item) => parseArg(item, param.value, position, genericTypeParams)));\n    }\n\n    throw new Error(`Type mismatch for argument ${position}, type '${param.toString()}'`);\n  }\n\n  // Handle structs as they're more complex\n  if (param.isStruct()) {\n    if (param.isString()) {\n      if (isString(arg)) {\n        return new MoveString(arg);\n      }\n      throwTypeMismatch(\"string\", position);\n    }\n    if (param.isObject()) {\n      // The inner type of Object doesn't matter, since it's just syntactic sugar\n      if (isString(arg)) {\n        return AccountAddress.fromString(arg);\n      }\n      throwTypeMismatch(\"string\", position);\n    }\n\n    if (param.isOption()) {\n      // Empty option must be handled specially\n      if (isNull(arg)) {\n        // Note: This is a placeholder U8 type, and does not match the actual type, as that can't be dynamically grabbed\n        return new MoveOption<U8>(null);\n      }\n\n      return new MoveOption(parseArg(arg, param.value.type_args[0], position, genericTypeParams));\n    }\n\n    throw new Error(`Unsupported struct input type for argument ${position}, type '${param.toString()}'`);\n  }\n\n  throw new Error(`Type mismatch for argument ${position}, type '${param.toString()}'`);\n}\n\n/**\n * Checks that the type of an already BCS encoded argument matches the ABI\n * @param functionAbi\n * @param arg\n * @param position\n */\nfunction checkType(functionAbi: EntryFunctionABI, arg: EntryFunctionArgumentTypes, position: number) {\n  const param = functionAbi.parameters[position];\n  if (param.isBool()) {\n    if (isBcsBool(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"Bool\", position);\n  }\n  if (param.isAddress()) {\n    if (isBcsAddress(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"AccountAddress\", position);\n  }\n  if (param.isU8()) {\n    if (isBcsU8(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U8\", position);\n  }\n  if (param.isU16()) {\n    if (isBcsU16(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U16\", position);\n  }\n  if (param.isU32()) {\n    if (isBcsU32(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U32\", position);\n  }\n  if (param.isU64()) {\n    if (isBcsU64(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U64\", position);\n  }\n  if (param.isU128()) {\n    if (isBcsU128(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U128\", position);\n  }\n  if (param.isU256()) {\n    if (isBcsU256(arg)) {\n      return;\n    }\n    throwTypeMismatch(\"U256\", position);\n  }\n  if (param.isVector()) {\n    if (arg instanceof MoveVector) {\n      // TODO: More introspection to verify the type\n      return;\n    }\n    throwTypeMismatch(\"MoveVector\", position);\n  }\n\n  // Handle structs as they're more complex\n  if (param instanceof TypeTagStruct) {\n    if (param.isString()) {\n      if (isBcsString(arg)) {\n        return;\n      }\n      throwTypeMismatch(\"MoveString\", position);\n    }\n    if (param.isObject()) {\n      if (isBcsAddress(arg)) {\n        return;\n      }\n      throwTypeMismatch(\"AccountAddress\", position);\n    }\n    if (param.isOption()) {\n      if (arg instanceof MoveOption) {\n        // TODO: more introspection for the type\n        return;\n      }\n      throwTypeMismatch(\"MoveOption\", position);\n    }\n  }\n\n  throw new Error(`Type mismatch for argument ${position}, expected '${param.toString()}'`);\n}\n", "/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/transaction_submission}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * transaction_submission namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { MoveVector } from \"../bcs\";\nimport { postAptosFullNode } from \"../client\";\nimport { Account } from \"../core/account\";\nimport { AccountAuthenticator } from \"../transactions/authenticator/account\";\nimport {\n  buildTransaction,\n  generateTransactionPayload,\n  generateSignedTransactionForSimulation,\n  generateSignedTransaction,\n  sign,\n} from \"../transactions/transactionBuilder/transactionBuilder\";\nimport {\n  InputGenerateTransactionData,\n  AnyRawTransaction,\n  InputSimulateTransactionData,\n  InputGenerateTransactionOptions,\n  InputSingleSignerTransaction,\n  InputGenerateTransactionPayloadDataWithRemoteABI,\n} from \"../transactions/types\";\nimport { UserTransactionResponse, PendingTransactionResponse, MimeType, HexInput } from \"../types\";\n\n/**\n * Generates any transaction by passing in the required arguments\n *\n * @param args.sender The transaction sender's account address as a HexInput\n * @param args.data EntryFunctionData | ScriptData | MultiSigData\n * @param args.feePayerAddress optional. For a fee payer (aka sponsored) transaction\n * @param args.secondarySignerAddresses optional. For a multi-agent or fee payer (aka sponsored) transactions\n * @param args.options optional. GenerateTransactionOptions type\n *\n * @example\n * For a single signer entry function\n * move function name, move function type arguments, move function arguments\n * `\n * data: {\n *  function:\"0x1::aptos_account::transfer\",\n *  typeArguments:[]\n *  functionArguments :[receiverAddress,10]\n * }\n * `\n *\n * @example\n * For a single signer script function\n * module bytecode, move function type arguments, move function arguments\n * ```\n * data: {\n *  bytecode:\"0x001234567\",\n *  typeArguments:[],\n *  functionArguments :[receiverAddress,10]\n * }\n * ```\n *\n * @return A raw transaction type (note that it holds the raw transaction as a bcs serialized data)\n * ```\n * {\n *  rawTransaction: Uint8Array,\n *  secondarySignerAddresses? : Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n */\nexport async function generateTransaction(\n  args: { aptosConfig: AptosConfig } & InputGenerateTransactionData,\n): Promise<AnyRawTransaction> {\n  const { aptosConfig, sender, data, options, secondarySignerAddresses, feePayerAddress } = args;\n\n  // Merge in aptosConfig for remote ABI on non-script payloads\n  let generateTransactionPayloadData: InputGenerateTransactionPayloadDataWithRemoteABI;\n  if (\"bytecode\" in data) {\n    generateTransactionPayloadData = data;\n  } else if (\"multisigAddress\" in data) {\n    generateTransactionPayloadData = {\n      aptosConfig,\n      multisigAddress: data.multisigAddress,\n      function: data.function,\n      functionArguments: data.functionArguments,\n      typeArguments: data.typeArguments,\n    };\n  } else {\n    generateTransactionPayloadData = {\n      aptosConfig,\n      function: data.function,\n      functionArguments: data.functionArguments,\n      typeArguments: data.typeArguments,\n    };\n  }\n  const payload = await generateTransactionPayload(generateTransactionPayloadData);\n  return buildTransaction({\n    aptosConfig,\n    sender,\n    payload,\n    options,\n    secondarySignerAddresses,\n    feePayerAddress,\n  });\n}\n\n/**\n * Sign a transaction that can later be submitted to chain\n *\n * @param args.signer The signer account to sign the transaction\n * @param args.transaction A raw transaction type (note that it holds the raw transaction as a bcs serialized data)\n * ```\n * {\n *  rawTransaction: Uint8Array,\n *  secondarySignerAddresses? : Array<AccountAddress>,\n *  feePayerAddress?: AccountAddress\n * }\n * ```\n *\n * @return The signer AccountAuthenticator\n */\nexport function signTransaction(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n  const accountAuthenticator = sign({ ...args });\n  return accountAuthenticator;\n}\n\n/**\n * Simulates a transaction before singing it.\n *\n * @param args.signerPublicKey The signer public key\n * @param args.transaction The raw transaction to simulate\n * @param args.secondarySignersPublicKeys optional. For when the transaction is a multi signers transaction\n * @param args.feePayerPublicKey optional. For when the transaction is a fee payer (aka sponsored) transaction\n * @param args.options optional. A config to simulate the transaction with\n */\nexport async function simulateTransaction(\n  args: { aptosConfig: AptosConfig } & InputSimulateTransactionData,\n): Promise<Array<UserTransactionResponse>> {\n  const { aptosConfig, transaction, signerPublicKey, secondarySignersPublicKeys, feePayerPublicKey, options } = args;\n\n  const signedTransaction = generateSignedTransactionForSimulation({\n    transaction,\n    signerPublicKey,\n    secondarySignersPublicKeys,\n    feePayerPublicKey,\n    options,\n  });\n\n  const { data } = await postAptosFullNode<Uint8Array, Array<UserTransactionResponse>>({\n    aptosConfig,\n    body: signedTransaction,\n    path: \"transactions/simulate\",\n    params: {\n      estimate_gas_unit_price: args.options?.estimateGasUnitPrice ?? false,\n      estimate_max_gas_amount: args.options?.estimateMaxGasAmount ?? false,\n      estimate_prioritized_gas_unit_price: args.options?.estimatePrioritizedGasUnitPrice ?? false,\n    },\n    originMethod: \"simulateTransaction\",\n    contentType: MimeType.BCS_SIGNED_TRANSACTION,\n  });\n  return data;\n}\n\n/**\n * Submit transaction to chain\n *\n * @param args.transaction A aptos transaction type\n * @param args.senderAuthenticator The account authenticator of the transaction sender\n * @param args.secondarySignerAuthenticators optional. For when the transaction is a multi signers transaction\n *\n * @return PendingTransactionResponse\n */\nexport async function submitTransaction(args: {\n  aptosConfig: AptosConfig;\n  transaction: AnyRawTransaction;\n  senderAuthenticator: AccountAuthenticator;\n  secondarySignerAuthenticators?: {\n    feePayerAuthenticator?: AccountAuthenticator;\n    additionalSignersAuthenticators?: Array<AccountAuthenticator>;\n  };\n}): Promise<PendingTransactionResponse> {\n  const { aptosConfig } = args;\n  const signedTransaction = generateSignedTransaction({ ...args });\n  const { data } = await postAptosFullNode<Uint8Array, PendingTransactionResponse>({\n    aptosConfig,\n    body: signedTransaction,\n    path: \"transactions\",\n    originMethod: \"submitTransaction\",\n    contentType: MimeType.BCS_SIGNED_TRANSACTION,\n  });\n  return data;\n}\n\nexport async function signAndSubmitTransaction(args: {\n  aptosConfig: AptosConfig;\n  signer: Account;\n  transaction: AnyRawTransaction;\n}): Promise<PendingTransactionResponse> {\n  const { aptosConfig, signer, transaction } = args;\n  const authenticator = signTransaction({ signer, transaction });\n  return submitTransaction({\n    aptosConfig,\n    transaction,\n    senderAuthenticator: authenticator,\n  });\n}\n\nexport async function publicPackageTransaction(args: {\n  aptosConfig: AptosConfig;\n  account: HexInput;\n  metadataBytes: HexInput;\n  moduleBytecode: Array<HexInput>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<InputSingleSignerTransaction> {\n  const { aptosConfig, account, metadataBytes, moduleBytecode, options } = args;\n\n  const totalByteCode = moduleBytecode.map((bytecode) => MoveVector.U8(bytecode));\n\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: account,\n    data: {\n      function: \"0x1::code::publish_package_txn\",\n      functionArguments: [MoveVector.U8(metadataBytes), new MoveVector(totalByteCode)],\n    },\n    options,\n  });\n  return transaction as InputSingleSignerTransaction;\n}\n", "import { AptosConfig } from \"../api/aptosConfig\";\nimport { U64 } from \"../bcs/serializable/movePrimitives\";\nimport { Account, AccountAddress } from \"../core\";\nimport { InputGenerateTransactionOptions, InputSingleSignerTransaction } from \"../transactions/types\";\nimport { HexInput, AnyNumber, MoveStructType } from \"../types\";\nimport { APTOS_COIN } from \"../utils/const\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { parseTypeTag } from \"../transactions/typeTag/parser\";\n\nexport async function transferCoinTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  recipient: HexInput;\n  amount: AnyNumber;\n  coinType?: MoveStructType;\n  options?: InputGenerateTransactionOptions;\n}): Promise<InputSingleSignerTransaction> {\n  const { aptosConfig, sender, recipient, amount, coinType, options } = args;\n  const coinStructType = coinType ?? APTOS_COIN;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress.toString(),\n    data: {\n      function: \"0x1::aptos_account::transfer_coins\",\n      typeArguments: [parseTypeTag(coinStructType)],\n      functionArguments: [AccountAddress.fromHexInput(recipient), new U64(amount)],\n    },\n    options,\n  });\n\n  return transaction as InputSingleSignerTransaction;\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport { Account } from \"../core\";\nimport { transferCoinTransaction } from \"../internal/coin\";\nimport { InputSingleSignerTransaction, InputGenerateTransactionOptions } from \"../transactions/types\";\nimport { AnyNumber, HexInput, MoveStructType } from \"../types\";\n\n/**\n * A class to handle all `Coin` operations\n */\nexport class Coin {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Generate a transfer coin transaction that can be simulated and/or signed and submitted\n   *\n   * @param args.sender The sender account\n   * @param args.recipient The recipient address\n   * @param args.amount The amount to transfer\n   * @param args.coinType optional. The coin struct type to transfer. Defaults to 0x1::aptos_coin::AptosCoin\n   *\n   * @returns SingleSignerTransaction\n   */\n  async transferCoinTransaction(args: {\n    sender: Account;\n    recipient: HexInput;\n    amount: AnyNumber;\n    coinType?: MoveStructType;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<InputSingleSignerTransaction> {\n    return transferCoinTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/digitalAsset}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * digitalAsset namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { MoveString, MoveVector, Bool, U64, U8 } from \"../bcs\";\nimport { Account, Hex } from \"../core\";\nimport { InputGenerateTransactionOptions, InputSingleSignerTransaction } from \"../transactions/types\";\nimport {\n  AnyNumber,\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  HexInput,\n  OrderBy,\n  PaginationArgs,\n  TokenStandard,\n} from \"../types\";\nimport {\n  GetCollectionDataQuery,\n  GetCurrentTokenOwnershipQuery,\n  GetTokenActivityQuery,\n  GetTokenDataQuery,\n} from \"../types/generated/operations\";\nimport {\n  GetCollectionData,\n  GetCurrentTokenOwnership,\n  GetTokenActivity,\n  GetTokenData,\n} from \"../types/generated/queries\";\nimport { queryIndexer } from \"./general\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { MAX_U64_BIG_INT } from \"../bcs/consts\";\nimport { CurrentTokenOwnershipsV2BoolExp, TokenActivitiesV2BoolExp } from \"../types/generated/types\";\n\n// TODO: Support properties when minting.\nexport interface MintTokenOptions {\n  propertyKeys?: Array<string>;\n  propertyTypes?: Array<string>;\n  propertyValues?: Array<string>;\n}\n\nexport async function mintTokenTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  collection: string;\n  description: string;\n  name: string;\n  uri: string;\n  options?: InputGenerateTransactionOptions;\n}): Promise<InputSingleSignerTransaction> {\n  const { aptosConfig, options, creator } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress.toString(),\n    data: {\n      function: \"0x4::aptos_token::mint\",\n      functionArguments: [\n        new MoveString(args.collection),\n        new MoveString(args.description),\n        new MoveString(args.name),\n        new MoveString(args.uri),\n        MoveVector.MoveString([]),\n        MoveVector.MoveString([]),\n        new MoveVector<MoveVector<U8>>([]),\n      ],\n    },\n    options,\n  });\n  return transaction as InputSingleSignerTransaction;\n}\n\nexport async function getTokenData(args: {\n  aptosConfig: AptosConfig;\n  tokenAddress: HexInput;\n}): Promise<GetTokenDataResponse> {\n  const { aptosConfig, tokenAddress } = args;\n\n  const whereCondition: any = {\n    token_data_id: { _eq: Hex.fromHexInput(tokenAddress).toString() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenData,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getTokenData\",\n  });\n\n  return data.current_token_datas_v2[0];\n}\n\nexport async function getCurrentTokenOwnership(args: {\n  aptosConfig: AptosConfig;\n  tokenAddress: HexInput;\n}): Promise<GetCurrentTokenOwnershipResponse> {\n  const { aptosConfig, tokenAddress } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    token_data_id: { _eq: Hex.fromHexInput(tokenAddress).toString() },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCurrentTokenOwnership\",\n  });\n\n  return data.current_token_ownerships_v2[0];\n}\n\nexport async function getOwnedTokens(args: {\n  aptosConfig: AptosConfig;\n  ownerAddress: HexInput;\n  options?: {\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetTokenActivityResponse[0]>;\n  };\n}): Promise<GetOwnedTokensResponse> {\n  const { aptosConfig, ownerAddress, options } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    owner_address: { _eq: Hex.fromHexInput(ownerAddress).toString() },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.pagination?.offset,\n      limit: options?.pagination?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getOwnedTokens\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\nexport async function getTokenActivity(args: {\n  aptosConfig: AptosConfig;\n  tokenAddress: HexInput;\n  options?: {\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetTokenActivityResponse[0]>;\n  };\n}): Promise<GetTokenActivityResponse> {\n  const { aptosConfig, tokenAddress, options } = args;\n\n  const whereCondition: TokenActivitiesV2BoolExp = {\n    token_data_id: { _eq: Hex.fromHexInput(tokenAddress).toString() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenActivity,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.pagination?.offset,\n      limit: options?.pagination?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenActivityQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getTokenActivity\",\n  });\n\n  return data.token_activities_v2;\n}\n\nexport interface CreateCollectionOptions {\n  maxSupply?: AnyNumber;\n  mutableDescription?: boolean;\n  mutableRoyalty?: boolean;\n  mutableURI?: boolean;\n  mutableTokenDescription?: boolean;\n  mutableTokenName?: boolean;\n  mutableTokenProperties?: boolean;\n  mutableTokenURI?: boolean;\n  tokensBurnableByCreator?: boolean;\n  tokensFreezableByCreator?: boolean;\n  royaltyNumerator?: number;\n  royaltyDenominator?: number;\n}\n\nexport async function createCollectionTransaction(\n  args: {\n    aptosConfig: AptosConfig;\n    creator: Account;\n    description: string;\n    name: string;\n    uri: string;\n    options?: InputGenerateTransactionOptions;\n  } & CreateCollectionOptions,\n): Promise<InputSingleSignerTransaction> {\n  const { aptosConfig, options, creator } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress.toString(),\n    data: {\n      function: \"0x4::aptos_token::create_collection\",\n      functionArguments: [\n        // Do not change the order\n        new MoveString(args.description),\n        new U64(args.maxSupply ?? MAX_U64_BIG_INT),\n        new MoveString(args.name),\n        new MoveString(args.uri),\n        new Bool(args.mutableDescription ?? true),\n        new Bool(args.mutableRoyalty ?? true),\n        new Bool(args.mutableURI ?? true),\n        new Bool(args.mutableTokenDescription ?? true),\n        new Bool(args.mutableTokenName ?? true),\n        new Bool(args.mutableTokenProperties ?? true),\n        new Bool(args.mutableTokenURI ?? true),\n        new Bool(args.tokensBurnableByCreator ?? true),\n        new Bool(args.tokensFreezableByCreator ?? true),\n        new U64(args.royaltyNumerator ?? 0),\n        new U64(args.royaltyDenominator ?? 1),\n      ],\n    },\n    options,\n  });\n  return transaction as InputSingleSignerTransaction;\n}\n\nexport async function getCollectionData(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: HexInput;\n  collectionName: string;\n  options?: {\n    tokenStandard?: TokenStandard;\n  };\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, creatorAddress, collectionName, options } = args;\n  const address = Hex.fromHexInput(creatorAddress).toString();\n\n  const whereCondition: any = {\n    collection_name: { _eq: collectionName },\n    creator_address: { _eq: address },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  const graphqlQuery = {\n    query: GetCollectionData,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n  const data = await queryIndexer<GetCollectionDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCollectionData\",\n  });\n\n  return data.current_collections_v2[0];\n}\n\nexport async function getCollectionId(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: HexInput;\n  collectionName: string;\n  options?: {\n    tokenStandard?: TokenStandard;\n  };\n}): Promise<string> {\n  return (await getCollectionData(args)).collection_id;\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  HexInput,\n  OrderBy,\n  PaginationArgs,\n  TokenStandard,\n} from \"../types\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { Account } from \"../core\";\nimport { InputGenerateTransactionOptions, InputSingleSignerTransaction } from \"../transactions/types\";\nimport {\n  CreateCollectionOptions,\n  createCollectionTransaction,\n  getCollectionData,\n  getCollectionId,\n  getCurrentTokenOwnership,\n  getOwnedTokens,\n  getTokenActivity,\n  getTokenData,\n  mintTokenTransaction,\n} from \"../internal/digitalAsset\";\n\n/**\n * A class to query all `DigitalAsset` related queries on Aptos.\n */\nexport class DigitalAsset {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Creates a new collection within the specified account\n   *\n   * @param args.creator the account of the collection's creator\n   * @param args.description the description of the collection\n   * @param args.name the name of the collection\n   * @param args.uri the URI to additional info about the collection\n   *\n   * The parameters below are optional.\n   * @param args.maxSupply controls the max supply of the tokens - defaults MAX_U64_BIG_INT\n   * @param args.mutableDescription controls mutability of the collection's description - defaults true\n   * @param args.mutableRoyalty controls mutability of the collection's description - defaults true\n   * @param args.mutableUri controls mutability of the collection's URI - defaults true\n   * @param args.mutableTokenDescription controls mutability of the token's description - defaults true\n   * @param args.mutableTokenName controls mutability of the token's name - defaults true\n   * @param args.mutableTokenProperties controls mutability of token's properties - defaults true\n   * @param args.mutableTokenUri controls mutability of the token's URI - defaults true\n   * @param args.tokensBurnableByCreator controls whether tokens can be burnable by the creator - defaults true\n   * @param args.tokensFreezableByCreator controls whether tokens can be frozen by the creator - defaults true\n   * @param args.royaltyNumerator the numerator of the royalty to be paid to the creator when a token is transferred - defaults 0\n   * @param args.royaltyDenominator the denominator of the royalty to be paid to the creator when a token is transferred -\n   *    defaults 1\n   *\n   * @returns A SingleSignerTransaction that when submitted will create the collection.\n   */\n  async createCollectionTransaction(\n    args: {\n      creator: Account;\n      description: string;\n      name: string;\n      uri: string;\n      options?: InputGenerateTransactionOptions;\n    } & CreateCollectionOptions,\n  ): Promise<InputSingleSignerTransaction> {\n    return createCollectionTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries data of a specific collection by the collection creator address and the collection name.\n   *\n   * If, for some reason, a creator account has 2 collections with the same name in v1 and v2,\n   * can pass an optional `tokenStandard` parameter to query a specific standard\n   *\n   * @param args.creatorAddress the address of the collection's creator\n   * @param args.collectionName the name of the collection\n   * @param args.options.tokenStandard the token standard to query\n   * @returns GetCollectionDataResponse response type\n   */\n  async getCollectionData(args: {\n    creatorAddress: HexInput;\n    collectionName: string;\n    options?: {\n      tokenStandard?: TokenStandard;\n    };\n  }): Promise<GetCollectionDataResponse> {\n    return getCollectionData({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a collection's ID.\n   *\n   * This is the same as the collection's object address in V2, but V1 does\n   * not use objects, and does not have an address\n   *\n   * @param args.creatorAddress the address of the collection's creator\n   * @param args.collectionName the name of the collection\n   * @param args.options.tokenStandard the token standard to query\n   * @returns the collection id\n   */\n  async getCollectionId(args: {\n    creatorAddress: HexInput;\n    collectionName: string;\n    options?: {\n      tokenStandard?: TokenStandard;\n    };\n  }): Promise<string> {\n    return getCollectionId({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Create a transaction to mint a token into the creators account within an existing collection.\n   *\n   * @param args.creator the creator of the collection\n   * @param args.collection the name of the collection the token belongs to\n   * @param args.description the description of the token\n   * @param args.name the name of the token\n   * @param args.uri the URI to additional info about the token\n   *\n   * @returns A SingleSignerTransaction that can be simulated or submitted to chain\n   */\n  async mintTokenTransaction(args: {\n    creator: Account;\n    collection: string;\n    description: string;\n    name: string;\n    uri: string;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<InputSingleSignerTransaction> {\n    return mintTokenTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets token data given the address of a token.\n   *\n   * @param args.tokenAddress The address of the token\n   * @returns GetTokenDataResponse containing relevant data to the token.\n   */\n  async getTokenData(args: { tokenAddress: HexInput }): Promise<GetTokenDataResponse> {\n    return getTokenData({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets token ownership data given the address of a token.\n   *\n   * @param args.tokenAddress The address of the token\n   * @returns GetCurrentTokenOwnershipResponse containing relevant ownership data of the token.\n   */\n  async getCurrentTokenOwnership(args: { tokenAddress: HexInput }): Promise<GetCurrentTokenOwnershipResponse> {\n    return getCurrentTokenOwnership({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets the tokens that the given address owns.\n   *\n   * @param args.ownerAddress The address of the owner\n   * @returns GetOwnedTokensResponse containing ownership data of the tokens belonging to the ownerAddresss.\n   */\n  async getOwnedTokens(args: {\n    ownerAddress: HexInput;\n    options?: {\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetOwnedTokensResponse[0]>;\n    };\n  }): Promise<GetOwnedTokensResponse> {\n    return getOwnedTokens({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets the activity data given the address of a token.\n   *\n   * @param args.tokenAddress The address of the token\n   * @returns GetTokenActivityResponse containing relevant activity data to the token.\n   */\n  async getTokenActivity(args: {\n    tokenAddress: HexInput;\n    options?: {\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetTokenActivityResponse[0]>;\n    };\n  }): Promise<GetTokenActivityResponse> {\n    return getTokenActivity({ aptosConfig: this.config, ...args });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/event}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * event namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddress } from \"../core\";\nimport { AnyNumber, GetEventsResponse, HexInput, PaginationArgs, MoveStructType, OrderBy } from \"../types\";\nimport { GetEventsQuery } from \"../types/generated/operations\";\nimport { GetEvents } from \"../types/generated/queries\";\nimport { EventsBoolExp } from \"../types/generated/types\";\nimport { queryIndexer } from \"./general\";\n\nexport async function getAccountEventsByCreationNumber(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  creationNumber: AnyNumber;\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, creationNumber } = args;\n  const address = AccountAddress.fromHexInput(accountAddress).toString();\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address },\n    creation_number: { _eq: creationNumber },\n  };\n\n  return getEvents({ aptosConfig, options: { where: whereCondition } });\n}\n\nexport async function getAccountEventsByEventType(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  eventType: MoveStructType;\n  options?: {\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetEventsResponse[0]>;\n  };\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, eventType, options } = args;\n  const address = AccountAddress.fromHexInput(accountAddress).toString();\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address },\n    type: { _eq: eventType },\n  };\n\n  const customOptions = {\n    where: whereCondition,\n    pagination: options?.pagination,\n    orderBy: options?.orderBy,\n  };\n\n  return getEvents({ aptosConfig, options: customOptions });\n}\n\nexport async function getEvents(args: {\n  aptosConfig: AptosConfig;\n  options?: {\n    where?: EventsBoolExp;\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetEventsResponse[0]>;\n  };\n}): Promise<GetEventsResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetEvents,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.pagination?.offset,\n      limit: options?.pagination?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetEventsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getEvents\",\n  });\n\n  return data.events;\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport { getAccountEventsByCreationNumber, getAccountEventsByEventType, getEvents } from \"../internal/event\";\nimport { AnyNumber, GetEventsResponse, HexInput, MoveStructType, OrderBy, PaginationArgs } from \"../types\";\nimport { EventsBoolExp } from \"../types/generated/types\";\n\n/**\n * A class to query all `Event` Aptos related queries\n */\nexport class Event {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Get events by creation number and an account address\n   *\n   * @param args.accountAddress - The account address\n   * @param args.creationNumber - The event creation number\n   *\n   * @returns Promise<GetEventsResponse>\n   */\n  async getAccountEventsByCreationNumber(args: {\n    accountAddress: HexInput;\n    creationNumber: AnyNumber;\n  }): Promise<GetEventsResponse> {\n    return getAccountEventsByCreationNumber({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Get events by event type and an account address\n   *\n   * @param args.accountAddress - The account address\n   * @param args.eventType - The event type\n   *\n   * @returns Promise<GetEventsResponse>\n   */\n  async getAccountEventsByEventType(args: {\n    accountAddress: HexInput;\n    eventType: MoveStructType;\n    options?: {\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetEventsResponse[0]>;\n    };\n  }): Promise<GetEventsResponse> {\n    return getAccountEventsByEventType({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Get all events\n   *\n   * An optional `where` can be passed in to filter out the response.\n   *\n   * @example\n   * ```\n   * { where:\n   *  {\n   *   transaction_version: { _eq: 123456 },\n   *  }\n   * }\n   * ```\n   *\n   * @returns GetEventsQuery response type\n   */\n  async getEvents(args?: {\n    options?: {\n      where?: EventsBoolExp;\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetEventsResponse[0]>;\n    };\n  }): Promise<GetEventsResponse> {\n    return getEvents({ aptosConfig: this.config, ...args });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/faucet}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * faucet namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { postAptosFaucet } from \"../client\";\nimport { AccountAddress } from \"../core\";\nimport { HexInput, WaitForTransactionOptions } from \"../types\";\nimport { DEFAULT_TXN_TIMEOUT_SEC } from \"../utils/const\";\nimport { waitForTransaction } from \"./transaction\";\n\nexport async function fundAccount(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: HexInput;\n  amount: number;\n  options?: WaitForTransactionOptions;\n}): Promise<string> {\n  const { aptosConfig, accountAddress, amount, options } = args;\n  const timeout = options?.timeoutSecs || DEFAULT_TXN_TIMEOUT_SEC;\n  const { data } = await postAptosFaucet<any, { txn_hashes: Array<string> }>({\n    aptosConfig,\n    path: \"fund\",\n    body: {\n      address: AccountAddress.fromHexInput(accountAddress).toString(),\n      amount,\n    },\n    originMethod: \"fundAccount\",\n  });\n\n  const txnHash = data.txn_hashes[0];\n\n  await waitForTransaction({\n    aptosConfig,\n    transactionHash: txnHash,\n    options: {\n      timeoutSecs: timeout,\n      checkSuccess: options?.checkSuccess,\n      indexerVersionCheck: options?.indexerVersionCheck,\n    },\n  });\n\n  return txnHash;\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport { fundAccount } from \"../internal/faucet\";\nimport { HexInput, WaitForTransactionOptions } from \"../types\";\n\n/**\n * A class to query all `Faucet` related queries on Aptos.\n */\nexport class Faucet {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * This creates an account if it does not exist and mints the specified amount of\n   * coins into that account\n   *\n   * @param args.accountAddress Address of the account to fund\n   * @param args.amount Amount of tokens to fund the account with\n   * @param args.options Configuration options for waitForTransaction\n   * @returns Transaction hash of the transaction that funded the account\n   */\n  async fundAccount(args: {\n    accountAddress: HexInput;\n    amount: number;\n    options?: WaitForTransactionOptions;\n  }): Promise<string> {\n    return fundAccount({ aptosConfig: this.config, ...args });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/fungible_asset}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * fungible_asset namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport {\n  GetCurrentFungibleAssetBalancesResponse,\n  GetFungibleAssetActivitiesResponse,\n  GetFungibleAssetMetadataResponse,\n  PaginationArgs,\n} from \"../types\";\nimport { queryIndexer } from \"./general\";\nimport {\n  GetCurrentFungibleAssetBalances,\n  GetFungibleAssetActivities,\n  GetFungibleAssetMetadata,\n} from \"../types/generated/queries\";\nimport {\n  GetCurrentFungibleAssetBalancesQuery,\n  GetFungibleAssetActivitiesQuery,\n  GetFungibleAssetMetadataQuery,\n} from \"../types/generated/operations\";\nimport {\n  CurrentFungibleAssetBalancesBoolExp,\n  FungibleAssetActivitiesBoolExp,\n  FungibleAssetMetadataBoolExp,\n} from \"../types/generated/types\";\n\nexport async function getFungibleAssetMetadata(args: {\n  aptosConfig: AptosConfig;\n  options?: {\n    pagination?: PaginationArgs;\n    where?: FungibleAssetMetadataBoolExp;\n  };\n}): Promise<GetFungibleAssetMetadataResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetFungibleAssetMetadata,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.pagination?.limit,\n      offset: options?.pagination?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetFungibleAssetMetadataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getFungibleAssetMetadata\",\n  });\n\n  return data.fungible_asset_metadata;\n}\n\nexport async function getFungibleAssetActivities(args: {\n  aptosConfig: AptosConfig;\n  options?: {\n    pagination?: PaginationArgs;\n    where?: FungibleAssetActivitiesBoolExp;\n  };\n}): Promise<GetFungibleAssetActivitiesResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetFungibleAssetActivities,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.pagination?.limit,\n      offset: options?.pagination?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetFungibleAssetActivitiesQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getFungibleAssetActivities\",\n  });\n\n  return data.fungible_asset_activities;\n}\n\nexport async function getCurrentFungibleAssetBalances(args: {\n  aptosConfig: AptosConfig;\n  options?: {\n    pagination?: PaginationArgs;\n    where?: CurrentFungibleAssetBalancesBoolExp;\n  };\n}): Promise<GetCurrentFungibleAssetBalancesResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetCurrentFungibleAssetBalances,\n    variables: {\n      where_condition: options?.where,\n      limit: options?.pagination?.limit,\n      offset: options?.pagination?.offset,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentFungibleAssetBalancesQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCurrentFungibleAssetBalances\",\n  });\n\n  return data.current_fungible_asset_balances;\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  GetCurrentFungibleAssetBalancesResponse,\n  GetFungibleAssetActivitiesResponse,\n  GetFungibleAssetMetadataResponse,\n  PaginationArgs,\n} from \"../types\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getCurrentFungibleAssetBalances,\n  getFungibleAssetActivities,\n  getFungibleAssetMetadata,\n} from \"../internal/fungibleAsset\";\nimport {\n  CurrentFungibleAssetBalancesBoolExp,\n  FungibleAssetActivitiesBoolExp,\n  FungibleAssetMetadataBoolExp,\n} from \"../types/generated/types\";\n\n/**\n * A class to query all `FungibleAsset` related queries on Aptos.\n */\nexport class FungibleAsset {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Queries the current fungible asset metadata.\n   *\n   * This query returns the fungible asset metadata for all fungible assets.\n   * It can be filtered by creator address and asset type.\n   *\n   * @returns getFungibleAssetMetadata A list of fungible asset metadata\n   */\n  async getFungibleAssetMetadata(args?: {\n    options?: {\n      pagination?: PaginationArgs;\n      where?: FungibleAssetMetadataBoolExp;\n    };\n  }): Promise<GetFungibleAssetMetadataResponse> {\n    return getFungibleAssetMetadata({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the current specific fungible asset metadata\n   *\n   * This query returns the fungible asset metadata for a specific fungible asset.\n   *\n   * @param assetType The asset type of the fungible asset.\n   * e.g\n   * \"0x1::aptos_coin::AptosCoin\" for Aptos Coin\n   * \"0xc2948283c2ce03aafbb294821de7ee684b06116bb378ab614fa2de07a99355a8\" - address format if this is fungible asset\n   *\n   * @returns getFungibleAssetMetadata A fungible asset metadata item\n   */\n  async getFungibleAssetMetadataByAssetType(assetType: string): Promise<GetFungibleAssetMetadataResponse[0]> {\n    const data = await getFungibleAssetMetadata({\n      aptosConfig: this.config,\n      options: {\n        where: {\n          asset_type: { _eq: assetType },\n        },\n      },\n    });\n\n    return data[0];\n  }\n\n  /**\n   * Queries the fungible asset activities\n   *\n   * This query returns the fungible asset activities.\n   * It can be filtered by owner address, asset type, and type.\n   *\n   * @returns GetFungibleAssetActivitiesResponse A list of fungible asset metadata\n   */\n  async getFungibleAssetActivities(args?: {\n    options?: {\n      pagination?: PaginationArgs;\n      where?: FungibleAssetActivitiesBoolExp;\n    };\n  }): Promise<GetFungibleAssetActivitiesResponse> {\n    return getFungibleAssetActivities({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries the fungible asset balance\n   *\n   * This query returns the fungible asset balance.\n   * It can be filtered by owner address, and asset type\n   *\n   * @returns GetCurrentFungibleAssetBalancesResponse A list of fungible asset metadata\n   */\n  async getCurrentFungibleAssetBalances(args?: {\n    options?: {\n      pagination?: PaginationArgs;\n      where?: CurrentFungibleAssetBalancesBoolExp;\n    };\n  }): Promise<GetCurrentFungibleAssetBalancesResponse> {\n    return getCurrentFungibleAssetBalances({ aptosConfig: this.config, ...args });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getBlockByHeight,\n  getBlockByVersion,\n  getChainTopUserTransactions,\n  getIndexerLastSuccessVersion,\n  getLedgerInfo,\n  getTableItem,\n  queryIndexer,\n  view,\n} from \"../internal/general\";\nimport {\n  AnyNumber,\n  Block,\n  GetChainTopUserTransactionsResponse,\n  GraphqlQuery,\n  LedgerInfo,\n  LedgerVersion,\n  MoveValue,\n  TableItemRequest,\n  ViewRequestData,\n} from \"../types\";\n\n/**\n * A class to query all `General` Aptos related queries\n */\nexport class General {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Queries for the Aptos ledger info\n   *\n   * @returns Aptos Ledger Info\n   *\n   * @example An example of the returned data\n   * ```\n   * {\n   * \"chain_id\": 4,\n   * \"epoch\": \"8\",\n   * \"ledger_version\": \"714\",\n   * \"oldest_ledger_version\": \"0\",\n   * \"ledger_timestamp\": \"1694695496521775\",\n   * \"node_role\": \"validator\",\n   * \"oldest_block_height\": \"0\",\n   * \"block_height\": \"359\",\n   * \"git_hash\": \"c82193f36f4e185fed9f68c4ad21f6c6dd390c6e\"\n   * }\n   * ```\n   */\n  async getLedgerInfo(): Promise<LedgerInfo> {\n    return getLedgerInfo({ aptosConfig: this.config });\n  }\n\n  /**\n   * Queries for the chain id\n   *\n   * @returns The chain id\n   */\n  async getChainId(): Promise<number> {\n    const result = await this.getLedgerInfo();\n    return result.chain_id;\n  }\n\n  /**\n   * Queries for block by transaction version\n   *\n   * @param args.ledgerVersion Ledger version to lookup block information for\n   * @param args.options.withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block information with optional transactions\n   */\n  async getBlockByVersion(args: {\n    ledgerVersion: AnyNumber;\n    options?: { withTransactions?: boolean };\n  }): Promise<Block> {\n    return getBlockByVersion({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Get block by block height\n   *\n   * @param args.blockHeight Block height to lookup.  Starts at 0\n   * @param args.options.withTransactions If set to true, include all transactions in the block\n   *\n   * @returns Block with optional transactions\n   */\n  async getBlockByHeight(args: { blockHeight: AnyNumber; options?: { withTransactions?: boolean } }): Promise<Block> {\n    return getBlockByHeight({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a table item for a table identified by the handle and the key for the item.\n   * Key and value types need to be passed in to help with key serialization and value deserialization.\n   * @param args.handle A pointer to where that table is stored\n   * @param args.data Object that describes table item\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   *\n   * @example https://fullnode.devnet.aptoslabs.com/v1/accounts/0x1/resource/0x1::coin::CoinInfo%3C0x1::aptos_coin::AptosCoin%3E\n   * {\n   *  data.key_type = \"address\" // Move type of table key\n   *  data.value_type = \"u128\" // Move type of table value\n   *  data.key = \"0x619dc29a0aac8fa146714058e8dd6d2d0f3bdf5f6331907bf91f3acd81e6935\" // Value of table key\n   * }\n   *\n   * @returns Table item value rendered in JSON\n   */\n  async getTableItem(args: { handle: string; data: TableItemRequest; options?: LedgerVersion }): Promise<any> {\n    return getTableItem({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries for a Move view function\n   * @param args.payload Payload for the view function\n   * @param args.options.ledgerVersion The ledger version to query, if not provided it will get the latest version\n   * @example\n   * `\n   * const payload: ViewRequest = {\n   *  function: \"0x1::coin::balance\",\n   *  typeArguments: [\"0x1::aptos_coin::AptosCoin\"],\n   *  functionArguments: [accountAddress],\n   * };\n   * `\n   *\n   * @returns an array of Move values\n   */\n  async view(args: { payload: ViewRequestData; options?: LedgerVersion }): Promise<Array<MoveValue>> {\n    return view({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries top user transactions\n   *\n   * @param args.limit The number of transactions to return\n   * @returns GetChainTopUserTransactionsResponse\n   */\n  async getChainTopUserTransactions(args: { limit: number }): Promise<GetChainTopUserTransactionsResponse> {\n    return getChainTopUserTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * A generic function for retrieving data from Aptos Indexer.\n   * For more detailed queries specification see\n   * {@link https://cloud.hasura.io/public/graphiql?endpoint=https://indexer.mainnet.aptoslabs.com/v1/graphql}\n   *\n   * @param args.query.query A GraphQL query\n   * @param args.query.variables The variables for the query\n   * @example\n   * ```\n   * {\n   *  query: `query MyQuery {\n        ledger_infos {\n          chain_id\n        }\n      }`;\n   * }\n   * ```\n   *\n   * @return The provided T type\n   */\n  async queryIndexer<T>(args: { query: GraphqlQuery }): Promise<T> {\n    return queryIndexer<T>({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries for the last successful indexer version\n   *\n   * This is useful to tell what ledger version the indexer is updated to, as it can be behind the full nodes.\n   */\n  async getIndexerLastSuccessVersion(): Promise<number> {\n    return getIndexerLastSuccessVersion({ aptosConfig: this.config });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/staking}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * faucet namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { Hex } from \"../core\";\nimport { GetDelegatedStakingActivitiesResponse, GetNumberOfDelegatorsResponse, HexInput, OrderBy } from \"../types\";\nimport { GetDelegatedStakingActivitiesQuery, GetNumberOfDelegatorsQuery } from \"../types/generated/operations\";\nimport { GetDelegatedStakingActivities, GetNumberOfDelegators } from \"../types/generated/queries\";\nimport { queryIndexer } from \"./general\";\n\nexport async function getNumberOfDelegators(args: {\n  aptosConfig: AptosConfig;\n  poolAddress: HexInput;\n}): Promise<number> {\n  const { aptosConfig, poolAddress } = args;\n  const address = Hex.fromHexInput(poolAddress).toString();\n  const query = {\n    query: GetNumberOfDelegators,\n    variables: { where_condition: { pool_address: { _eq: address } } },\n  };\n  const data: GetNumberOfDelegatorsQuery = await queryIndexer<GetNumberOfDelegatorsQuery>({ aptosConfig, query });\n  if (data.num_active_delegator_per_pool.length === 0) {\n    throw Error(\"Delegator pool not found\");\n  }\n  return data.num_active_delegator_per_pool[0].num_active_delegator;\n}\n\nexport async function getNumberOfDelegatorsForAllPools(args: {\n  aptosConfig: AptosConfig;\n  options?: {\n    orderBy?: OrderBy<GetNumberOfDelegatorsResponse[0]>;\n  };\n}): Promise<GetNumberOfDelegatorsResponse> {\n  const { aptosConfig, options } = args;\n  const query = {\n    query: GetNumberOfDelegators,\n    variables: { where_condition: {}, order_by: options?.orderBy },\n  };\n  const data: GetNumberOfDelegatorsQuery = await queryIndexer<GetNumberOfDelegatorsQuery>({\n    aptosConfig,\n    query,\n  });\n  return data.num_active_delegator_per_pool;\n}\n\nexport async function getDelegatedStakingActivities(args: {\n  aptosConfig: AptosConfig;\n  delegatorAddress: HexInput;\n  poolAddress: HexInput;\n}): Promise<GetDelegatedStakingActivitiesResponse> {\n  const { aptosConfig, delegatorAddress, poolAddress } = args;\n  const query = {\n    query: GetDelegatedStakingActivities,\n    variables: {\n      delegatorAddress: Hex.fromHexInput(delegatorAddress).toString(),\n      poolAddress: Hex.fromHexInput(poolAddress).toString(),\n    },\n  };\n  const data = await queryIndexer<GetDelegatedStakingActivitiesQuery>({ aptosConfig, query });\n  return data.delegated_staking_activities;\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getDelegatedStakingActivities,\n  getNumberOfDelegators,\n  getNumberOfDelegatorsForAllPools,\n} from \"../internal/staking\";\nimport { GetDelegatedStakingActivitiesResponse, GetNumberOfDelegatorsResponse, HexInput, OrderBy } from \"../types\";\n\n/**\n * A class to query all `Staking` related queries on Aptos.\n */\nexport class Staking {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Queries current number of delegators in a pool.  Throws an error if the pool is not found.\n   *\n   * @param args.poolAddress Pool address\n   * @returns The number of delegators for the given pool\n   */\n  async getNumberOfDelegators(args: { poolAddress: HexInput }): Promise<number> {\n    return getNumberOfDelegators({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries current number of delegators in a pool.  Throws an error if the pool is not found.\n   *\n   * @returns GetNumberOfDelegatorsForAllPoolsResponse response type\n   */\n  async getNumberOfDelegatorsForAllPools(args?: {\n    options?: {\n      orderBy?: OrderBy<GetNumberOfDelegatorsResponse[0]>;\n    };\n  }): Promise<GetNumberOfDelegatorsResponse> {\n    return getNumberOfDelegatorsForAllPools({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries delegated staking activities\n   *\n   * @param args.delegatorAddress Delegator address\n   * @param args.poolAddress Pool address\n   * @returns GetDelegatedStakingActivitiesResponse response type\n   */\n  async getDelegatedStakingActivities(args: {\n    delegatorAddress: HexInput;\n    poolAddress: HexInput;\n  }): Promise<GetDelegatedStakingActivitiesResponse> {\n    return getDelegatedStakingActivities({ aptosConfig: this.config, ...args });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport {\n  getGasPriceEstimation,\n  getTransactionByHash,\n  getTransactionByVersion,\n  getTransactions,\n  isTransactionPending,\n  waitForTransaction,\n} from \"../internal/transaction\";\nimport {\n  AnyNumber,\n  GasEstimation,\n  HexInput,\n  PaginationArgs,\n  TransactionResponse,\n  WaitForTransactionOptions,\n} from \"../types\";\n\nexport class Transaction {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Queries on-chain transactions. This function will not return pending\n   * transactions. For that, use `getTransactionsByHash`.\n   *\n   * @param args.options.offset The number transaction to start with\n   * @param args.options.limit Number of results to return\n   *\n   * @returns Array of on-chain transactions\n   */\n  async getTransactions(args?: { options?: PaginationArgs }): Promise<TransactionResponse[]> {\n    return getTransactions({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries on-chain transaction by version. This function will not return pending transactions.\n   *\n   * @param args.ledgerVersion - Transaction version is an unsigned 64-bit number.\n   * @returns On-chain transaction. Only on-chain transactions have versions, so this\n   * function cannot be used to query pending transactions.\n   */\n  async getTransactionByVersion(args: { ledgerVersion: AnyNumber }): Promise<TransactionResponse> {\n    return getTransactionByVersion({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Queries on-chain transaction by transaction hash. This function will return pending transactions.\n   * @param args.transactionHash - Transaction hash should be hex-encoded bytes string with 0x prefix.\n   * @returns Transaction from mempool (pending) or on-chain (committed) transaction\n   */\n  async getTransactionByHash(args: { transactionHash: HexInput }): Promise<TransactionResponse> {\n    return getTransactionByHash({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Defines if specified transaction is currently in pending state\n   *\n   * To create a transaction hash:\n   *\n   * 1. Create a hash message from the bytes: \"Aptos::Transaction\" bytes + the BCS-serialized Transaction bytes.\n   * 2. Apply hash algorithm SHA3-256 to the hash message bytes.\n   * 3. Hex-encode the hash bytes with 0x prefix.\n   *\n   * @param args.transactionHash A hash of transaction\n   * @returns `true` if transaction is in pending state and `false` otherwise\n   */\n  async isPendingTransaction(args: { transactionHash: HexInput }): Promise<boolean> {\n    return isTransactionPending({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Waits for a transaction to move past the pending state.\n   *\n   * There are 4 cases.\n   * 1. Transaction is successfully processed and committed to the chain.\n   *    - The function will resolve with the transaction response from the API.\n   * 2. Transaction is rejected for some reason, and is therefore not committed to the blockchain.\n   *    - The function will throw an AptosApiError with an HTTP status code indicating some problem with the request.\n   * 3. Transaction is committed but execution failed, meaning no changes were\n   *    written to the blockchain state.\n   *    - If `checkSuccess` is true, the function will throw a FailedTransactionError\n   *      If `checkSuccess` is false, the function will resolve with the transaction response where the `success` field is false.\n   * 4. Transaction does not move past the pending state within `args.options.timeoutSecs` seconds.\n   *    - The function will throw a WaitForTransactionError\n   *\n   *\n   * @param args.transactionHash The hash of a transaction previously submitted to the blockchain.\n   * @param args.options.timeoutSecs Timeout in seconds. Defaults to 20 seconds.\n   * @param args.options.checkSuccess A boolean which controls whether the function will error if the transaction failed.\n   *   Defaults to true.  See case 3 above.\n   * @returns The transaction on-chain.  See above for more details.\n   */\n  async waitForTransaction(args: {\n    transactionHash: HexInput;\n    options?: WaitForTransactionOptions;\n  }): Promise<TransactionResponse> {\n    return waitForTransaction({\n      aptosConfig: this.config,\n      ...args,\n    });\n  }\n\n  /**\n   * Gives an estimate of the gas unit price required to get a\n   * transaction on chain in a reasonable amount of time.\n   * For more information {@link https://fullnode.mainnet.aptoslabs.com/v1/spec#/operations/estimate_gas_price}\n   *\n   * @returns Object holding the outputs of the estimate gas API\n   * @example\n   * ```\n   * {\n   *  gas_estimate: number;\n   *  deprioritized_gas_estimate?: number;\n   *  prioritized_gas_estimate?: number;\n   * }\n   * ```\n   */\n  async getGasPriceEstimation(): Promise<GasEstimation> {\n    return getGasPriceEstimation({\n      aptosConfig: this.config,\n    });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosConfig } from \"./aptosConfig\";\nimport { Account } from \"../core\";\nimport { AccountAuthenticator } from \"../transactions/authenticator/account\";\nimport {\n  AnyRawTransaction,\n  InputFeePayerTransaction,\n  InputGenerateMultiAgentRawTransactionData,\n  InputGenerateTransactionData,\n  InputGenerateFeePayerRawTransactionData,\n  InputGenerateSingleSignerRawTransactionData,\n  InputMultiAgentTransaction,\n  InputSingleSignerTransaction,\n  InputSimulateTransactionData,\n  InputGenerateTransactionOptions,\n} from \"../transactions/types\";\nimport { UserTransactionResponse, PendingTransactionResponse, HexInput } from \"../types\";\nimport {\n  generateTransaction,\n  publicPackageTransaction,\n  signAndSubmitTransaction,\n  signTransaction,\n  simulateTransaction,\n  submitTransaction,\n} from \"../internal/transactionSubmission\";\n\nexport class TransactionSubmission {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * We are defining function signatures, each with its specific input and output.\n   * These are the possible function signature for `generateTransaction` function.\n   * When we call `generateTransaction` function with the relevant type properties,\n   * Typescript can infer the return type based on the appropriate function overload.\n   */\n  async generateTransaction(args: InputGenerateSingleSignerRawTransactionData): Promise<InputSingleSignerTransaction>;\n  async generateTransaction(args: InputGenerateFeePayerRawTransactionData): Promise<InputFeePayerTransaction>;\n  async generateTransaction(args: InputGenerateMultiAgentRawTransactionData): Promise<InputMultiAgentTransaction>;\n  async generateTransaction(args: InputGenerateTransactionData): Promise<AnyRawTransaction>;\n\n  /**\n   * Generates any transaction by passing in the required arguments\n   *\n   * @param args.sender The transaction sender's account address as a HexInput\n   * @param args.data EntryFunctionData | ScriptData | MultiSigData\n   * @param args.feePayerAddress optional. For a fee payer (aka sponsored) transaction\n   * @param args.secondarySignerAddresses optional. For a multi-agent or fee payer (aka sponsored) transactions\n   * @param args.options optional. GenerateTransactionOptions type\n   *\n   * @example\n   * For a single signer entry function\n   * move function name, move function type arguments, move function arguments\n   * `\n   * data: {\n   *  function: \"0x1::aptos_account::transfer\",\n   *  typeArguments: []\n   *  functionArguments: [receiverAddress,10]\n   * }\n   * `\n   *\n   * @example\n   * For a single signer script function\n   * module bytecode, move function type arguments, move function arguments\n   * ```\n   * data: {\n   *  bytecode: \"0x001234567\",\n   *  typeArguments: [],\n   *  functionArguments: [receiverAddress,10]\n   * }\n   * ```\n   *\n   * @return A raw transaction type (note that it holds the raw transaction as a bcs serialized data)\n   * ```\n   * {\n   *  rawTransaction: Uint8Array,\n   *  secondarySignerAddresses? : Array<AccountAddress>,\n   *  feePayerAddress?: AccountAddress\n   * }\n   * ```\n   */\n  async generateTransaction(args: InputGenerateTransactionData): Promise<AnyRawTransaction> {\n    return generateTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sign a transaction that can later be submitted to chain\n   *\n   * @param args.signer The signer account to sign the transaction\n   * @param args.transaction A raw transaction type (note that it holds the raw transaction as a bcs serialized data)\n   * ```\n   * {\n   *  rawTransaction: Uint8Array,\n   *  secondarySignerAddresses? : Array<AccountAddress>,\n   *  feePayerAddress?: AccountAddress\n   * }\n   * ```\n   *\n   * @return The signer AccountAuthenticator\n   */\n  /* eslint-disable class-methods-use-this */\n  signTransaction(args: { signer: Account; transaction: AnyRawTransaction }): AccountAuthenticator {\n    return signTransaction({ ...args });\n  }\n\n  /**\n   * Simulates a transaction before singing it.\n   *\n   * @param args.signerPublicKey The signer public key\n   * @param args.transaction The raw transaction to simulate\n   * @param args.secondarySignersPublicKeys optional. For when the transaction is a multi signers transaction\n   * @param args.feePayerPublicKey optional. For when the transaction is a fee payer (aka sponsored) transaction\n   * @param args.options optional. A config to simulate the transaction with\n   */\n  async simulateTransaction(args: InputSimulateTransactionData): Promise<Array<UserTransactionResponse>> {\n    return simulateTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Submit transaction to chain\n   *\n   * @param args.transaction A aptos transaction type\n   * @param args.senderAuthenticator The account authenticator of the transaction sender\n   * @param args.secondarySignerAuthenticators optional. For when the transaction is a multi signers transaction\n   *\n   * @return PendingTransactionResponse\n   */\n  async submitTransaction(args: {\n    transaction: AnyRawTransaction;\n    senderAuthenticator: AccountAuthenticator;\n    secondarySignerAuthenticators?: {\n      feePayerAuthenticator?: AccountAuthenticator;\n      additionalSignersAuthenticators?: Array<AccountAuthenticator>;\n    };\n  }): Promise<PendingTransactionResponse> {\n    return submitTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Sign and submit a single signer transaction to chain\n   *\n   * @param args.signer The signer account to sign the transaction\n   * @param args.transaction A raw transaction type (note that it holds the raw transaction as a bcs serialized data)\n   * ```\n   * {\n   *  rawTransaction: Uint8Array,\n   *  secondarySignerAddresses? : Array<AccountAddress>,\n   *  feePayerAddress?: AccountAddress\n   * }\n   * ```\n   *\n   * @return PendingTransactionResponse\n   */\n  async signAndSubmitTransaction(args: {\n    signer: Account;\n    transaction: AnyRawTransaction;\n  }): Promise<PendingTransactionResponse> {\n    const { signer, transaction } = args;\n    return signAndSubmitTransaction({\n      aptosConfig: this.config,\n      signer,\n      transaction,\n    });\n  }\n\n  /**\n   * Generates a transaction to publish a move package to chain.\n   *\n   * To get the `metadataBytes` and `byteCode`, can compile using Aptos CLI with command\n   * `aptos move compile --save-metadata ...`,\n   * For more info {@link https://aptos.dev/tutorials/your-first-dapp/#step-4-publish-a-move-module}\n   *\n   * @param args.account The publisher account\n   * @param args.metadataBytes The package metadata bytes\n   * @param args.moduleBytecode An array of the bytecode of each module in the package in compiler output order\n   *\n   * @returns A SingleSignerTransaction that can be simulated or submitted to chain\n   */\n  async publishPackageTransaction(args: {\n    account: HexInput;\n    metadataBytes: HexInput;\n    moduleBytecode: Array<HexInput>;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<InputSingleSignerTransaction> {\n    return publicPackageTransaction({ aptosConfig: this.config, ...args });\n  }\n}\n", "// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Account } from \"./account\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { Coin } from \"./coin\";\nimport { DigitalAsset } from \"./digitalAsset\";\nimport { Event } from \"./event\";\nimport { Faucet } from \"./faucet\";\nimport { FungibleAsset } from \"./fungibleAsset\";\nimport { General } from \"./general\";\nimport { Staking } from \"./staking\";\nimport { Transaction } from \"./transaction\";\nimport { TransactionSubmission } from \"./transactionSubmission\";\n\n/**\n * This class is the main entry point into Aptos's\n * APIs and separates functionality into different namespaces.\n *\n * To use the SDK, create a new Aptos instance to get access\n * to all the sdk functionality.\n */\nexport class Aptos {\n  readonly config: AptosConfig;\n\n  readonly account: Account;\n\n  readonly coin: Coin;\n\n  readonly digitalAsset: DigitalAsset;\n\n  readonly event: Event;\n\n  readonly faucet: Faucet;\n\n  readonly fungibleAsset: FungibleAsset;\n\n  readonly general: General;\n\n  readonly staking: Staking;\n\n  readonly transaction: Transaction;\n\n  readonly transactionSubmission: TransactionSubmission;\n\n  constructor(settings?: AptosConfig) {\n    this.config = new AptosConfig(settings);\n    this.account = new Account(this.config);\n    this.coin = new Coin(this.config);\n    this.digitalAsset = new DigitalAsset(this.config);\n    this.event = new Event(this.config);\n    this.faucet = new Faucet(this.config);\n    this.fungibleAsset = new FungibleAsset(this.config);\n    this.general = new General(this.config);\n    this.staking = new Staking(this.config);\n    this.transaction = new Transaction(this.config);\n    this.transactionSubmission = new TransactionSubmission(this.config);\n  }\n}\n\nexport interface Aptos\n  extends Account,\n    Coin,\n    DigitalAsset,\n    Event,\n    Faucet,\n    FungibleAsset,\n    General,\n    Staking,\n    Transaction,\n    TransactionSubmission {}\n\n/**\nIn TypeScript, we can’t inherit or extend from more than one class,\nMixins helps us to get around that by creating a partial classes \nthat we can combine to form a single class that contains all the methods and properties from the partial classes.\n{@link https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern}\n\nHere, we combine any subclass and the Aptos class.\n*/\nfunction applyMixin(targetClass: any, baseClass: any, baseClassProp: string) {\n  // Mixin instance methods\n  Object.getOwnPropertyNames(baseClass.prototype).forEach((propertyName) => {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(baseClass.prototype, propertyName);\n    if (!propertyDescriptor) return;\n    // eslint-disable-next-line func-names\n    propertyDescriptor.value = function (...args: any) {\n      return (this as any)[baseClassProp][propertyName](...args);\n    };\n    Object.defineProperty(targetClass.prototype, propertyName, propertyDescriptor);\n  });\n}\n\napplyMixin(Aptos, Account, \"account\");\napplyMixin(Aptos, Coin, \"coin\");\napplyMixin(Aptos, DigitalAsset, \"digitalAsset\");\napplyMixin(Aptos, Event, \"event\");\napplyMixin(Aptos, Faucet, \"faucet\");\napplyMixin(Aptos, FungibleAsset, \"fungibleAsset\");\napplyMixin(Aptos, General, \"general\");\napplyMixin(Aptos, Staking, \"staking\");\napplyMixin(Aptos, Transaction, \"transaction\");\napplyMixin(Aptos, TransactionSubmission, \"transactionSubmission\");\n", "import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n", "import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n", "import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n", "import axios, { AxiosRequestConfig, AxiosError } from \"axios\";\nimport { AptosClientRequest, AptosClientResponse } from \"./types\";\n\nexport default async function aptosClient<Res>(options: AptosClientRequest): Promise<AptosClientResponse<Res>> {\n  const { params, method, url, headers, body, overrides } = options;\n  const requestConfig: AxiosRequestConfig = {\n    headers,\n    method,\n    url,\n    params,\n    data: body,\n    withCredentials: overrides?.WITH_CREDENTIALS ?? true,\n  };\n\n  try {\n    const response = await axios(requestConfig);\n    return {\n      status: response.status,\n      statusText: response.statusText!,\n      data: response.data,\n      headers: response.headers,\n      config: response.config,\n    };\n  } catch (error) {\n    const axiosError = error as AxiosError<Res>;\n    if (axiosError.response) {\n      return axiosError.response;\n    }\n    throw error;\n  }\n}\n", "// src/WalletCore.ts\nimport { HexString } from \"aptos\";\nimport { AptosConfig, generateTransactionPayload } from \"@aptos-labs/ts-sdk\";\nimport EventEmitter from \"eventemitter3\";\nimport nacl from \"tweetnacl\";\nimport { Buffer } from \"buffer\";\n\n// src/constants.ts\nvar WalletReadyState = /* @__PURE__ */ ((WalletReadyState2) => {\n  WalletReadyState2[\"Installed\"] = \"Installed\";\n  WalletReadyState2[\"NotDetected\"] = \"NotDetected\";\n  WalletReadyState2[\"Loadable\"] = \"Loadable\";\n  WalletReadyState2[\"Unsupported\"] = \"Unsupported\";\n  return WalletReadyState2;\n})(WalletReadyState || {});\nvar NetworkName = /* @__PURE__ */ ((NetworkName2) => {\n  NetworkName2[\"Mainnet\"] = \"mainnet\";\n  NetworkName2[\"Testnet\"] = \"testnet\";\n  NetworkName2[\"Devnet\"] = \"devnet\";\n  return NetworkName2;\n})(NetworkName || {});\n\n// src/error/index.ts\nvar WalletError = class extends Error {\n  constructor(message, error) {\n    super(message);\n    this.error = error;\n  }\n};\nvar WalletNotSelectedError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotSelectedError\";\n  }\n};\nvar WalletNotReadyError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotReadyError\";\n  }\n};\nvar WalletConnectionError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletConnectionError\";\n  }\n};\nvar WalletDisconnectionError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletDisconnectionError\";\n  }\n};\nvar WalletAccountError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletAccountError\";\n  }\n};\nvar WalletGetNetworkError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletGetNetworkError\";\n  }\n};\nvar WalletAccountChangeError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletAccountChangeError\";\n  }\n};\nvar WalletNetworkChangeError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNetworkChangeError\";\n  }\n};\nvar WalletNotConnectedError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotConnectedError\";\n  }\n};\nvar WalletSignMessageError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignMessageError\";\n  }\n};\nvar WalletSignMessageAndVerifyError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignMessageAndVerifyError\";\n  }\n};\nvar WalletSignAndSubmitMessageError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignAndSubmitMessageError\";\n  }\n};\nvar WalletSignTransactionError = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletSignTransactionError\";\n  }\n};\nvar WalletNotSupportedMethod = class extends WalletError {\n  constructor() {\n    super(...arguments);\n    this.name = \"WalletNotSupportedMethod\";\n  }\n};\n\n// src/utils/scopePollingDetectionStrategy.ts\nfunction scopePollingDetectionStrategy(detect) {\n  if (typeof window === \"undefined\" || typeof document === \"undefined\")\n    return;\n  const disposers = [];\n  function detectAndDispose() {\n    const detected = detect();\n    if (detected) {\n      for (const dispose of disposers) {\n        dispose();\n      }\n    }\n  }\n  const interval = setInterval(detectAndDispose, 1e3);\n  disposers.push(() => clearInterval(interval));\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", detectAndDispose, {\n      once: true\n    });\n    disposers.push(\n      () => document.removeEventListener(\"DOMContentLoaded\", detectAndDispose)\n    );\n  }\n  if (document.readyState !== \"complete\") {\n    window.addEventListener(\"load\", detectAndDispose, { once: true });\n    disposers.push(() => window.removeEventListener(\"load\", detectAndDispose));\n  }\n  detectAndDispose();\n}\n\n// src/utils/localStorage.ts\nvar LOCAL_STORAGE_ITEM_KEY = \"AptosWalletName\";\nfunction setLocalStorage(walletName) {\n  localStorage.setItem(LOCAL_STORAGE_ITEM_KEY, walletName);\n}\nfunction removeLocalStorage() {\n  localStorage.removeItem(LOCAL_STORAGE_ITEM_KEY);\n}\nfunction getLocalStorage() {\n  localStorage.getItem(LOCAL_STORAGE_ITEM_KEY);\n}\n\n// src/utils/helpers.ts\nfunction isMobile() {\n  return /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/i.test(\n    navigator.userAgent\n  );\n}\nfunction isInAppBrowser() {\n  const isIphone = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(\n    navigator.userAgent\n  );\n  const isAndroid = /(Android).*Version\\/[\\d.]+.*Chrome\\/[^\\s]+ Mobile/i.test(\n    navigator.userAgent\n  );\n  return isIphone || isAndroid;\n}\nfunction isRedirectable() {\n  if (typeof navigator === \"undefined\" || !navigator)\n    return false;\n  return isMobile() && !isInAppBrowser();\n}\n\n// src/ans.ts\nvar ChainIdToAnsContractAddressMap = {\n  \"1\": \"mainnet\",\n  \"2\": \"testnet\"\n};\nvar getNameByAddress = async (chainId, address) => {\n  try {\n    if (!ChainIdToAnsContractAddressMap[chainId])\n      return null;\n    const response = await fetch(\n      `https://www.aptosnames.com/api/${ChainIdToAnsContractAddressMap[chainId]}/v1/name/${address}`\n    );\n    const data = await response.json();\n    return data.name;\n  } catch (e) {\n    console.log(\"error\", e);\n    return null;\n  }\n};\n\n// src/conversion.ts\nimport { Network } from \"@aptos-labs/ts-sdk\";\nimport { BCS, TxnBuilderTypes } from \"aptos\";\nfunction convertNetwork(networkInfo) {\n  switch (networkInfo == null ? void 0 : networkInfo.name.toLowerCase()) {\n    case \"mainnet\":\n      return Network.MAINNET;\n    case \"testnet\":\n      return Network.TESTNET;\n    case \"devnet\":\n      return Network.DEVNET;\n    default:\n      throw new Error(\"Invalid network name\");\n  }\n}\nfunction convertToBCSPayload(payload) {\n  const deserializer = new BCS.Deserializer(payload.bcsToBytes());\n  return TxnBuilderTypes.TransactionPayload.deserialize(deserializer);\n}\n\n// src/WalletCore.ts\nvar WalletCore = class extends EventEmitter {\n  constructor(plugins) {\n    super();\n    this._wallets = [];\n    this._wallet = null;\n    this._account = null;\n    this._network = null;\n    this._connecting = false;\n    this._connected = false;\n    this._wallets = plugins;\n    this.scopePollingDetectionStrategy();\n  }\n  scopePollingDetectionStrategy() {\n    var _a;\n    (_a = this._wallets) == null ? void 0 : _a.forEach((wallet) => {\n      if (!wallet.readyState) {\n        wallet.readyState = typeof window === \"undefined\" || typeof document === \"undefined\" ? \"Unsupported\" /* Unsupported */ : \"NotDetected\" /* NotDetected */;\n      }\n      if (typeof window !== \"undefined\") {\n        scopePollingDetectionStrategy(() => {\n          const providerName = wallet.providerName || wallet.name.toLowerCase();\n          if (Object.keys(window).includes(providerName)) {\n            wallet.readyState = \"Installed\" /* Installed */;\n            wallet.provider = window[providerName];\n            this.emit(\"readyStateChange\", wallet);\n            return true;\n          }\n          return false;\n        });\n      }\n    });\n  }\n  doesWalletExist() {\n    if (!this._connected || this._connecting || !this._wallet)\n      throw new WalletNotConnectedError().name;\n    if (!(this._wallet.readyState === \"Loadable\" /* Loadable */ || this._wallet.readyState === \"Installed\" /* Installed */))\n      throw new WalletNotReadyError().name;\n    return true;\n  }\n  clearData() {\n    this._connected = false;\n    this.setWallet(null);\n    this.setAccount(null);\n    this.setNetwork(null);\n    removeLocalStorage();\n  }\n  async setAnsName() {\n    var _a;\n    if (((_a = this._network) == null ? void 0 : _a.chainId) && this._account) {\n      const name = await getNameByAddress(\n        this._network.chainId,\n        this._account.address\n      );\n      this._account.ansName = name;\n    }\n  }\n  setWallet(wallet) {\n    this._wallet = wallet;\n  }\n  setAccount(account) {\n    this._account = account;\n  }\n  setNetwork(network) {\n    this._network = network;\n  }\n  isConnected() {\n    return this._connected;\n  }\n  get wallets() {\n    return this._wallets;\n  }\n  get wallet() {\n    try {\n      if (!this._wallet)\n        return null;\n      return {\n        name: this._wallet.name,\n        icon: this._wallet.icon,\n        url: this._wallet.url\n      };\n    } catch (error) {\n      throw new WalletNotSelectedError(error).message;\n    }\n  }\n  get account() {\n    try {\n      return this._account;\n    } catch (error) {\n      throw new WalletAccountError(error).message;\n    }\n  }\n  get network() {\n    try {\n      return this._network;\n    } catch (error) {\n      throw new WalletGetNetworkError(error).message;\n    }\n  }\n  async connect(walletName) {\n    var _a;\n    const selectedWallet = (_a = this._wallets) == null ? void 0 : _a.find(\n      (wallet) => wallet.name === walletName\n    );\n    if (!selectedWallet)\n      return;\n    if (this._connected) {\n      if (selectedWallet.name === walletName)\n        throw new WalletConnectionError(\n          `${walletName} wallet is already connected`\n        ).message;\n    }\n    if (isRedirectable()) {\n      if (selectedWallet.deeplinkProvider) {\n        const url = encodeURIComponent(window.location.href);\n        const location = selectedWallet.deeplinkProvider({ url });\n        window.location.href = location;\n      }\n    }\n    if (selectedWallet.readyState !== \"Installed\" /* Installed */ && selectedWallet.readyState !== \"Loadable\" /* Loadable */) {\n      return;\n    }\n    await this.connectWallet(selectedWallet);\n  }\n  async connectWallet(selectedWallet) {\n    try {\n      this._connecting = true;\n      this.setWallet(selectedWallet);\n      const account = await selectedWallet.connect();\n      this.setAccount({ ...account });\n      const network = await selectedWallet.network();\n      this.setNetwork({ ...network });\n      await this.setAnsName();\n      setLocalStorage(selectedWallet.name);\n      this._connected = true;\n      this.emit(\"connect\", account);\n    } catch (error) {\n      this.clearData();\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletConnectionError(errMsg).message;\n    } finally {\n      this._connecting = false;\n    }\n  }\n  async disconnect() {\n    var _a;\n    try {\n      this.doesWalletExist();\n      await ((_a = this._wallet) == null ? void 0 : _a.disconnect());\n      this.clearData();\n      this.emit(\"disconnect\");\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletDisconnectionError(errMsg).message;\n    }\n  }\n  async signAndSubmitTransaction(transaction, options) {\n    var _a;\n    try {\n      this.doesWalletExist();\n      const response = await ((_a = this._wallet) == null ? void 0 : _a.signAndSubmitTransaction(\n        transaction,\n        options\n      ));\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignAndSubmitMessageError(errMsg).message;\n    }\n  }\n  async signAndSubmitBCSTransaction(transaction, options) {\n    var _a;\n    if (this._wallet && !(\"signAndSubmitBCSTransaction\" in this._wallet)) {\n      throw new WalletNotSupportedMethod(\n        `Submit a BCS Transaction is not supported by ${(_a = this.wallet) == null ? void 0 : _a.name}`\n      ).message;\n    }\n    try {\n      this.doesWalletExist();\n      const response = await this._wallet.signAndSubmitBCSTransaction(\n        transaction,\n        options\n      );\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignAndSubmitMessageError(errMsg).message;\n    }\n  }\n  async signTransaction(transaction, options) {\n    var _a;\n    if (this._wallet && !(\"signTransaction\" in this._wallet)) {\n      throw new WalletNotSupportedMethod(\n        `Sign Transaction is not supported by ${(_a = this.wallet) == null ? void 0 : _a.name}`\n      ).message;\n    }\n    try {\n      this.doesWalletExist();\n      const response = await this._wallet.signTransaction(\n        transaction,\n        options\n      );\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignTransactionError(errMsg).message;\n    }\n  }\n  async signMessage(message) {\n    var _a;\n    try {\n      this.doesWalletExist();\n      if (!this._wallet)\n        return null;\n      const response = await ((_a = this._wallet) == null ? void 0 : _a.signMessage(message));\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignMessageError(errMsg).message;\n    }\n  }\n  async submitTransaction(transactionInput, options) {\n    const payloadData = transactionInput.data;\n    const aptosConfig = new AptosConfig({ network: convertNetwork(this._network) });\n    const newPayload = await generateTransactionPayload({ ...payloadData, aptosConfig });\n    const oldTransactionPayload = convertToBCSPayload(newPayload);\n    const response = await this.signAndSubmitBCSTransaction(oldTransactionPayload, options);\n    const { hash, ...output } = response;\n    return { hash, output };\n  }\n  async signMultiAgentTransaction(transaction) {\n    var _a;\n    if (this._wallet && !(\"signMultiAgentTransaction\" in this._wallet)) {\n      throw new WalletNotSupportedMethod(\n        `Multi-agent & sponsored transactions are not supported by ${(_a = this.wallet) == null ? void 0 : _a.name}`\n      ).message;\n    }\n    try {\n      this.doesWalletExist();\n      const response = await this._wallet.signMultiAgentTransaction(\n        transaction\n      );\n      return response;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignTransactionError(errMsg).message;\n    }\n  }\n  async onAccountChange() {\n    var _a;\n    try {\n      this.doesWalletExist();\n      await ((_a = this._wallet) == null ? void 0 : _a.onAccountChange(async (data) => {\n        this.setAccount({ ...data });\n        await this.setAnsName();\n        this.emit(\"accountChange\", this._account);\n      }));\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletAccountChangeError(errMsg).message;\n    }\n  }\n  async onNetworkChange() {\n    var _a;\n    try {\n      this.doesWalletExist();\n      await ((_a = this._wallet) == null ? void 0 : _a.onNetworkChange(async (data) => {\n        this.setNetwork({ ...data });\n        await this.setAnsName();\n        this.emit(\"networkChange\", this._network);\n      }));\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletNetworkChangeError(errMsg).message;\n    }\n  }\n  async signMessageAndVerify(message) {\n    var _a;\n    try {\n      this.doesWalletExist();\n      if (!this._account)\n        throw new Error(\"No account found!\");\n      const response = await ((_a = this._wallet) == null ? void 0 : _a.signMessage(message));\n      if (!response)\n        throw new WalletSignMessageAndVerifyError(\"Failed to sign a message\").message;\n      let verified = false;\n      if (Array.isArray(response.signature)) {\n        const { fullMessage, signature, bitmap } = response;\n        if (bitmap) {\n          const minKeysRequired = this._account.minKeysRequired;\n          if (signature.length < minKeysRequired) {\n            verified = false;\n          } else {\n            const bits = Array.from(bitmap).flatMap(\n              (n) => Array.from({ length: 8 }).map((_, i) => n >> i & 1)\n            );\n            const index = bits.map((_, i) => i).filter((i) => bits[i]);\n            const publicKeys = this._account.publicKey;\n            const matchedPublicKeys = publicKeys.filter(\n              (_, i) => index.includes(i)\n            );\n            verified = true;\n            for (let i = 0; i < signature.length; i++) {\n              const isSigVerified = nacl.sign.detached.verify(\n                Buffer.from(fullMessage),\n                Buffer.from(signature[i], \"hex\"),\n                Buffer.from(matchedPublicKeys[i], \"hex\")\n              );\n              if (!isSigVerified) {\n                verified = false;\n                break;\n              }\n            }\n          }\n        } else {\n          throw new WalletSignMessageAndVerifyError(\"Failed to get a bitmap\").message;\n        }\n      } else {\n        const currentAccountPublicKey = new HexString(\n          this._account.publicKey\n        );\n        const signature = new HexString(response.signature);\n        verified = nacl.sign.detached.verify(\n          Buffer.from(response.fullMessage),\n          Buffer.from(signature.noPrefix(), \"hex\"),\n          Buffer.from(currentAccountPublicKey.noPrefix(), \"hex\")\n        );\n      }\n      return verified;\n    } catch (error) {\n      const errMsg = typeof error == \"object\" && \"message\" in error ? error.message : error;\n      throw new WalletSignMessageAndVerifyError(errMsg).message;\n    }\n  }\n};\n\n// src/types.ts\nimport { TxnBuilderTypes as TxnBuilderTypes3, Types as Types2 } from \"aptos\";\nexport {\n  NetworkName,\n  TxnBuilderTypes3 as TxnBuilderTypes,\n  Types2 as Types,\n  WalletCore,\n  WalletReadyState,\n  getLocalStorage,\n  isInAppBrowser,\n  isMobile,\n  isRedirectable,\n  removeLocalStorage,\n  scopePollingDetectionStrategy,\n  setLocalStorage\n};\n", "// src/useWallet.tsx\nimport {\n  WalletReadyState,\n  NetworkName,\n  isInAppBrowser,\n  isRedirectable,\n  isMobile\n} from \"@aptos-labs/wallet-adapter-core\";\nimport { createContext, useContext } from \"react\";\nvar DEFAULT_COUNTEXT = {\n  connected: false\n};\nvar WalletContext = createContext(\n  DEFAULT_COUNTEXT\n);\nfunction useWallet() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletContextState\");\n  }\n  return context;\n}\n\n// src/WalletProvider.tsx\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from \"react\";\nimport { WalletCore } from \"@aptos-labs/wallet-adapter-core\";\nimport { jsx } from \"react/jsx-runtime\";\nvar initialState = {\n  connected: false,\n  account: null,\n  network: null,\n  wallet: null\n};\nvar AptosWalletAdapterProvider = ({\n  children,\n  plugins,\n  autoConnect = false,\n  onError\n}) => {\n  const [{ connected, account, network, wallet }, setState] = useState(initialState);\n  const [isLoading, setIsLoading] = useState(true);\n  const walletCore = useMemo(() => new WalletCore(plugins), []);\n  const [wallets, setWallets] = useState(\n    walletCore.wallets\n  );\n  const connect = async (walletName) => {\n    try {\n      setIsLoading(true);\n      await walletCore.connect(walletName);\n    } catch (error) {\n      console.log(\"connect error\", error);\n      if (onError)\n        onError(error);\n      else\n        throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const disconnect = async () => {\n    try {\n      await walletCore.disconnect();\n    } catch (e) {\n      console.log(\"disconnect error\", e);\n      if (onError)\n        onError(e);\n    }\n  };\n  const signAndSubmitTransaction = async (transaction, options) => {\n    try {\n      return await walletCore.signAndSubmitTransaction(transaction, options);\n    } catch (error) {\n      if (onError)\n        onError(error);\n      else\n        throw error;\n    }\n  };\n  const signAndSubmitBCSTransaction = async (transaction, options) => {\n    try {\n      return await walletCore.signAndSubmitBCSTransaction(transaction, options);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const signTransaction = async (transaction, options) => {\n    try {\n      return await walletCore.signTransaction(transaction, options);\n    } catch (error) {\n      if (onError)\n        onError(error);\n      else\n        throw error;\n    }\n  };\n  const signMessage = async (message) => {\n    try {\n      return await walletCore.signMessage(message);\n    } catch (error) {\n      if (onError)\n        onError(error);\n      else\n        throw error;\n      return null;\n    }\n  };\n  const signMessageAndVerify = async (message) => {\n    try {\n      return await walletCore.signMessageAndVerify(message);\n    } catch (error) {\n      if (onError)\n        onError(error);\n      else\n        throw error;\n      return false;\n    }\n  };\n  const signMultiAgentTransaction = async (transaction) => {\n    try {\n      return await walletCore.signMultiAgentTransaction(transaction);\n    } catch (error) {\n      if (onError)\n        onError(error);\n      else\n        throw error;\n      return false;\n    }\n  };\n  const submitTransaction = async (transaction) => {\n    try {\n      return await walletCore.submitTransaction(transaction);\n    } catch (error) {\n      if (onError)\n        onError(error);\n      else\n        throw error;\n      return false;\n    }\n  };\n  useEffect(() => {\n    if (autoConnect) {\n      if (localStorage.getItem(\"AptosWalletName\")) {\n        connect(localStorage.getItem(\"AptosWalletName\"));\n      } else {\n        setIsLoading(false);\n      }\n    }\n  }, wallets);\n  useEffect(() => {\n    if (connected) {\n      walletCore.onAccountChange();\n      walletCore.onNetworkChange();\n    }\n  }, [...wallets, connected]);\n  const handleConnect = () => {\n    setState((state) => {\n      return {\n        ...state,\n        connected: true,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: walletCore.wallet\n      };\n    });\n  };\n  const handleDisconnect = () => {\n    if (!connected)\n      return;\n    setState((state) => {\n      return {\n        ...state,\n        connected: false,\n        account: walletCore.account,\n        network: walletCore.network,\n        wallet: null\n      };\n    });\n  };\n  const handleAccountChange = useCallback(() => {\n    if (!connected)\n      return;\n    if (!walletCore.wallet)\n      return;\n    setState((state) => {\n      return {\n        ...state,\n        account: walletCore.account\n      };\n    });\n  }, [connected]);\n  const handleNetworkChange = useCallback(() => {\n    if (!connected)\n      return;\n    if (!walletCore.wallet)\n      return;\n    setState((state) => {\n      return {\n        ...state,\n        network: walletCore.network\n      };\n    });\n  }, [connected]);\n  const handleReadyStateChange = (wallet2) => {\n    setWallets((wallets2) => [...wallets2]);\n  };\n  useEffect(() => {\n    walletCore.on(\"connect\", handleConnect);\n    walletCore.on(\"disconnect\", handleDisconnect);\n    walletCore.on(\"accountChange\", handleAccountChange);\n    walletCore.on(\"networkChange\", handleNetworkChange);\n    walletCore.on(\"readyStateChange\", handleReadyStateChange);\n    return () => {\n      walletCore.off(\"connect\", handleConnect);\n      walletCore.off(\"disconnect\", handleDisconnect);\n      walletCore.off(\"accountChange\", handleAccountChange);\n      walletCore.off(\"networkChange\", handleNetworkChange);\n      walletCore.off(\"readyStateChange\", handleReadyStateChange);\n    };\n  }, [...wallets, connected]);\n  return /* @__PURE__ */ jsx(WalletContext.Provider, {\n    value: {\n      connect,\n      account,\n      network,\n      connected,\n      disconnect,\n      wallet,\n      wallets,\n      signAndSubmitTransaction,\n      signAndSubmitBCSTransaction,\n      signTransaction,\n      signMessage,\n      signMessageAndVerify,\n      signMultiAgentTransaction,\n      submitTransaction,\n      isLoading\n    },\n    children\n  });\n};\nexport {\n  AptosWalletAdapterProvider,\n  NetworkName,\n  WalletReadyState,\n  isInAppBrowser,\n  isMobile,\n  isRedirectable,\n  useWallet\n};\n"],
  "mappings": "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",
  "names": ["number", "bool", "bytes", "hash", "exists", "output", "assert", "u32", "createView", "hexes", "bytesToHex", "hexToBytes", "utf8ToBytes", "toBytes", "Hash", "wrapConstructor", "wrapConstructorWithOpts", "HMAC", "hash", "hmac", "hash", "view", "i", "setBigUint64", "view", "isLE", "_32n", "SHA2", "view", "U32_MASK64", "_32n", "fromBig", "split", "toBig", "shrSH", "shrSL", "rotrSH", "rotrSL", "rotrBH", "rotrBL", "rotr32H", "rotr32L", "rotlSH", "rotlSL", "rotlBH", "rotlBL", "add", "add3L", "add3H", "add4L", "add4H", "add5L", "add5H", "u64", "SHA512_Kh", "SHA512_Kl", "SHA512_W_H", "SHA512_W_L", "SHA512", "view", "SHA512_256", "SHA384", "alphabet", "padding", "bytes", "checksum", "_words", "mnemonicToSeed", "mnemonicToSeedSync", "require_utils", "cache", "isString", "isNumber", "request", "request", "VERSION", "request", "axios", "require_axios", "EventEmitter", "hash", "bytes", "hash", "view", "isLE", "_32n", "view", "axios", "request", "MimeType", "TypeTagVariants", "ScriptTransactionArgumentVariants", "TransactionPayloadVariants", "TransactionVariants", "TransactionAuthenticatorVariant", "AccountAuthenticatorVariant", "AnyPublicKeyVariant", "AnySignatureVariant", "TransactionResponseType", "MoveFunctionVisibility", "MoveAbility", "RoleType", "SigningScheme", "SigningSchemeInput", "DeriveScheme", "Network", "HexInvalidReason", "bytes", "AddressInvalidReason", "bytesToHex", "hexToBytes", "bool", "nacl", "hash", "KeyType", "Account", "getTransactions", "TypeTagParserErrorType", "transactionAuthenticator", "hash", "sha3Hash", "getTransactions", "Account", "import_tweetnacl", "EventEmitter", "hash", "output", "nacl", "import_react", "signAndSubmitTransaction", "signTransaction", "submitTransaction"]
}
